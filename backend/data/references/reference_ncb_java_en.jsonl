{"_id": 131, "response": "```java\n\npublic class PhoneNumberCreator {\n    public static String createPhoneNumber(int[] numbers) {\n        StringBuilder phoneNumber = new StringBuilder(\"(\");\n        for (int i = 0; i < numbers.length; i++) {\n            if (i == 3) {\n                phoneNumber.append(\") \");\n            } else if (i == 6) {\n                phoneNumber.append(\"-\");\n            }\n            phoneNumber.append(numbers[i]);\n        }\n        return phoneNumber.toString();\n    }\n}\n\n```"}
{"_id": 132, "response": "```java\n\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class Conversation {\n    private String sender; // 发送者\n\n    public Conversation(String sender) {\n        this.sender = sender;\n    }\n\n    public String getSender() {\n        return sender;\n    }\n}\n\npublic class ConversationCounter {\n    public static int countConversationTurns(List<Conversation> conversations, String doctor, String patient) {\n        if (conversations == null || conversations.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        String lastSender = conversations.get(0).getSender();\n        for (Conversation conversation : conversations) {\n            String currentSender = conversation.getSender();\n            if (!currentSender.equals(lastSender)) {\n                count++;\n                lastSender = currentSender;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        List<Conversation> conversations = Arrays.asList(\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\")\n        );\n\n        System.out.println(countConversationTurns(conversations, \"doctor\", \"patient\")); // 输出：3\n    }\n}\n\n```"}
{"_id": 133, "response": "```java\n\nimport java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n\npublic class Main {\n    public static void main(String[] args) {\n        String text = \"全部已关闭待支付交易成功订单号: 100e863a2b86402a881b62abee3e337e交易成功客户账号: 13422344170产品名称:代服管家￥200.00\";\n        String result = findFirstAlphabeticStringAfterOrder(text);\n\n        if (result != null) {\n            System.out.println(\"找到的字符串: \" + result);\n        } else {\n            System.out.println(\"没有找到匹配的字符串\");\n        }\n    }\n\n    public static String findFirstAlphabeticStringAfterOrder(String text) {\n        String regex = \"订单.*?([a-zA-Z]+)\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(text);\n\n        if (matcher.find()) {\n            return matcher.group(1);\n        } else {\n            return null;\n        }\n    }\n}\n\n```"}
{"_id": 134, "response": "```java\n\nimport java.util.ArrayList;\n\nclass User {\n    private String name;\n\n    public User(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public String toString() {\n        return \"name is:\" + name;\n    }\n}\n\nclass UserManager {\n    private ArrayList<User> users;\n\n    public UserManager() {\n        users = new ArrayList<>();\n    }\n\n    public void addUser(User user) {\n        users.add(user);\n    }\n\n    public void deleteUser(User user) {\n        users.remove(user);\n    }\n\n    public boolean isExist(User user) {\n        return users.contains(user);\n    }\n\n    public void display() {\n        for (User user : users) {\n            System.out.println(user);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        UserManager userManager = new UserManager();\n        User alice = new User(\"alice\");\n        User john = new User(\"john\");\n        userManager.addUser(alice);\n        userManager.addUser(john);\n        userManager.display();\n    }\n}\n\n```"}
{"_id": 135, "response": "```java\n\npublic class Student {\n    private String name;\n    private String userID;\n    private double math;\n    private double chinese;\n    private double english;\n\n    public Student(String name, String userID, double math, double chinese, double english) {\n        this.name = name;\n        this.userID = userID;\n        setMath(math);\n        setChinese(chinese);\n        setEnglish(english);\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getUserID() {\n        return userID;\n    }\n\n    public double getMath() {\n        return math;\n    }\n\n    public void setMath(double math) {\n        if(math >= 0 && math <= 100) {\n            this.math = math;\n        } else {\n            System.out.println(\"Invalid math score. It should be between 0 and 100.\");\n        }\n    }\n\n    public double getChinese() {\n        return chinese;\n    }\n\n    public void setChinese(double chinese) {\n        if(chinese >= 0 && chinese <= 100) {\n            this.chinese = chinese;\n        } else {\n            System.out.println(\"Invalid chinese score. It should be between 0 and 100.\");\n        }\n    }\n\n    public double getEnglish() {\n        return english;\n    }\n\n    public void setEnglish(double english) {\n        if(english >= 0 && english <= 100) {\n            this.english = english;\n        } else {\n            System.out.println(\"Invalid english score. It should be between 0 and 100.\");\n        }\n    }\n\n    public double getTotalScore() {\n        return math + chinese + english;\n    }\n\n    public double getAverageScore() {\n        return getTotalScore() / 3;\n    }\n\n    public static void main(String[] args) {\n        Student student = new Student(\"John Doe\", \"123456\", 85.5, 90.0, 88.0);\n        System.out.println(\"Name: \" + student.getName());\n        System.out.println(\"UserID: \" + student.getUserID());\n        System.out.println(\"Math Score: \" + student.getMath());\n        System.out.println(\"Chinese Score: \" + student.getChinese());\n        System.out.println(\"English Score: \" + student.getEnglish());\n        System.out.println(\"Total Score: \" + student.getTotalScore());\n        System.out.println(\"Average Score: \" + student.getAverageScore());\n    }\n}\n\n```"}
{"_id": 136, "response": "```java\n\nimport java.util.*;\n\nclass Task {\n    String name;\n    Date deadline;\n\n    public Task(String name, Date deadline) {\n        this.name = name;\n        this.deadline = deadline;\n    }\n\n    @Override\n    public String toString() {\n        return \"Task{\" +\n                \"name='\" + name + '\\'' +\n                \", deadline=\" + deadline +\n                '}';\n    }\n}\n\nclass Model {\n    List<Task> tasks;\n\n    public Model() {\n        this.tasks = new ArrayList<>(Collections.nCopies(10, null));\n    }\n\n    public void addTask(Task task) {\n        for (int i = 0; i < tasks.size(); i++) {\n            if (tasks.get(i) == null) {\n                tasks.set(i, task);\n                break;\n            }\n        }\n    }\n\n    public void deleteTask(String taskName) {\n        tasks.removeIf(task -> task != null && task.name.equals(taskName));\n    }\n\n    public void viewTasks() {\n        for (Task task : tasks) {\n            System.out.println(task);\n        }\n    }\n}\n\nclass Controller {\n    Model model;\n\n    public Controller(Model model) {\n        this.model = model;\n    }\n\n    public void addTask(String name, Date deadline) {\n        model.addTask(new Task(name, deadline));\n    }\n\n    public void deleteTask(String name) {\n        model.deleteTask(name);\n    }\n\n    public void viewTasks() {\n        model.viewTasks();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n\n        // Test view tasks\n        controller.viewTasks();\n\n        // Test add tasks\n        controller.addTask(\"Task 1\", new Date());\n        controller.addTask(\"Task 2\", new Date());\n\n        // Test view tasks\n        controller.viewTasks();\n\n        // Test delete tasks\n        controller.deleteTask(\"Task 1\");\n\n        // Test view tasks\n        controller.viewTasks();\n    }\n}\n\n```"}
{"_id": 137, "response": "```java\n\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] result = calculateProportion(0.3, 0.4, 0.3, 100);\n        for (int i : result) {\n            System.out.println(i);\n        }\n    }\n\n    public static int[] calculateProportion(double ratio1, double ratio2, double ratio3, int total) {\n        int[] result = new int[3];\n        result[0] = (int) Math.floor(ratio1 * total);\n        result[1] = (int) Math.floor(ratio2 * total);\n        result[2] = (int) Math.floor(ratio3 * total);\n\n        int sum = result[0] + result[1] + result[2];\n        int diff = total - sum;\n\n        while (diff > 0) {\n            if (ratio1 >= ratio2 && ratio1 >= ratio3) {\n                result[0] += diff;\n            } else if (ratio2 >= ratio1 && ratio2 >= ratio3) {\n                result[1] += diff;\n            } else {\n                result[2] += diff;\n            }\n            diff--;\n        }\n\n        return result;\n    }\n}\n\n```"}
{"_id": 138, "response": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class StringPermutations {\n    public static void main(String[] args) {\n        String str = \"aaa\";\n        permuteAndPrint(str);\n    }\n\n    public static void permuteAndPrint(String str) {\n        Set<String> permutations = new HashSet<>();\n        permute(str.toCharArray(), 0, permutations);\n\n        for (String s : permutations) {\n            System.out.println(s);\n        }\n    }\n\n    public static void permute(char[] chars, int currentIndex, Set<String> permutations) {\n        if (currentIndex == chars.length - 1) {\n            permutations.add(new String(chars));\n        }\n\n        for (int i = currentIndex; i < chars.length; i++) {\n            swap(chars, currentIndex, i);\n            permute(chars, currentIndex + 1, permutations);\n            swap(chars, currentIndex, i); // backtrack\n        }\n    }\n\n    private static void swap(char[] array, int i, int j) {\n        char temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\n```"}
{"_id": 139, "response": "```java\n\n\npublic class Student {\n    private String name;\n    private double ordinary;\n    private double attendance;\n\n    public Student(String name, double ordinary, double attendance) {\n        this.name = name;\n        this.ordinary = ordinary;\n        this.attendance = attendance;\n    }\n\n    public boolean qualified() {\n        return ordinary >= 60 && attendance >= 0.6;\n    }\n\n    // getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public double getOrdinary() {\n        return ordinary;\n    }\n\n    public void setOrdinary(double ordinary) {\n        this.ordinary = ordinary;\n    }\n\n    public double getAttendance() {\n        return attendance;\n    }\n\n    public void setAttendance(double attendance) {\n        this.attendance = attendance;\n    }\n}\n\n```"}
{"_id": 140, "response": "```java\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(showQianFenWei(2));\n        System.out.println(showQianFenWei(100));\n        System.out.println(showQianFenWei(1000));\n        System.out.println(showQianFenWei(10000));\n        System.out.println(showQianFenWei(1000000));\n    }\n\n    public static String showQianFenWei(long x) {\n        String str = Long.toString(x);\n        String result = \"\";\n        int count = 0;\n        for (int i = str.length() - 1; i >= 0; i--) {\n            result = str.charAt(i) + result;\n            count++;\n            if (count % 3 == 0 && i != 0) {\n                result = \",\" + result;\n            }\n        }\n        return result;\n    }\n}\n\n```"}
{"_id": 141, "response": "```java\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class KeywordSearch {\n    public static int search(String filePath, String keyword) {\n        int count = 0;\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(filePath));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] words = line.split(\"\\\\W+\");\n                for (String word : words) {\n                    if (word.equalsIgnoreCase(keyword)) {\n                        count++;\n                    }\n                }\n            }\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String filePath = \"path_to_your_file\";\n        String keyword = \"your_keyword\";\n        int count = search(filePath, keyword);\n        System.out.println(\"The keyword '\" + keyword + \"' appears \" + count + \" times in the file.\");\n    }\n}\n\n```"}
{"_id": 142, "response": "```java\n\npublic class ArrayElementSelector {\n    public static int selectElement(int[] array) {\n        if (array == null || array.length == 0) {\n            return 0;\n        }\n\n        if (array.length == 1) {\n            return array[0];\n        }\n\n        int threshold = 51;\n        while (threshold > 1) {\n            if (array.length >= threshold) {\n                return array[threshold - 1];\n            }\n            threshold /= 2;\n        }\n\n        return array[0];\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};\n        System.out.println(\"Selected element: \" + selectElement(array));\n    }\n}\n\n```"}
{"_id": 143, "response": "```java\n\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter the order of the matrix:\");\n        int n = scanner.nextInt();\n        int[][] matrix = new int[n][n];\n        System.out.println(\"Enter the elements of the matrix:\");\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = scanner.nextInt();\n            }\n        }\n        scanner.close();\n        System.out.println(\"The sum of the elements excluding the anti-diagonal, last row and last column is: \" + calculateSum(matrix, n));\n    }\n\n    static int calculateSum(int[][] matrix, int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i != n - 1 && j != n - 1 && j != n - 1 - i) {\n                    sum += matrix[i][j];\n                }\n            }\n        }\n        return sum;\n    }\n}\n\n```"}
{"_id": 144, "response": "```java\n\nimport java.util.*;\n\nclass Alarm {\n    int id;\n    Set<Integer> weekdays;\n    int hour;\n    int minute;\n    int typeId;\n\n    public Alarm(int id, Set<Integer> weekdays, int hour, int minute, int typeId) {\n        this.id = id;\n        this.weekdays = weekdays;\n        this.hour = hour;\n        this.minute = minute;\n        this.typeId = typeId;\n    }\n}\n\nclass AlarmSystem {\n    Map<Integer, Alarm> alarms;\n\n    public AlarmSystem() {\n        this.alarms = new HashMap<>();\n    }\n\n    public boolean addAlarm(int id, Set<Integer> weekdays, int hour, int minute, int typeId) {\n        if (alarms.containsKey(id)) {\n            return false;\n        }\n        alarms.put(id, new Alarm(id, weekdays, hour, minute, typeId));\n        return true;\n    }\n\n    public boolean deleteAlarm(int id) {\n        if (!alarms.containsKey(id)) {\n            return false;\n        }\n        alarms.remove(id);\n        return true;\n    }\n\n    public List<Alarm> queryAlarm(int weekday, int hour, int startMinute, int endMinute) {\n        List<Alarm> result = new ArrayList<>();\n        for (Alarm alarm : alarms.values()) {\n            if (alarm.weekdays.contains(weekday) && alarm.hour == hour && alarm.minute >= startMinute && alarm.minute <= endMinute) {\n                result.add(alarm);\n            }\n        }\n        Collections.sort(result, new Comparator<Alarm>() {\n            @Override\n            public int compare(Alarm a1, Alarm a2) {\n                if (a1.minute != a2.minute) {\n                    return a1.minute - a2.minute;\n                }\n                if (a1.typeId != a2.typeId) {\n                    return a1.typeId - a2.typeId;\n                }\n                return a1.id - a2.id;\n            }\n        });\n        return result;\n    }\n}\n\n```"}
{"_id": 145, "response": "```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class SQLParser {\n    private String select;\n    private String from;\n    private String where;\n    private String orderBy;\n    private String limit;\n\n    public SQLParser(String sql) {\n        parse(sql);\n    }\n\n    private void parse(String sql) {\n        if (sql == null || sql.trim().isEmpty()) {\n            select = from = where = orderBy = limit = null;\n            return;\n        }\n\n        Pattern pattern = Pattern.compile(\"select\\\\s+(.*?)\\\\s+from\\\\s+(.*?)(?:\\\\s+where\\\\s+(.*?))?(?:\\\\s+order by\\\\s+(.*?))?(?:\\\\s+limit\\\\s+(.*?))?$\", Pattern.CASE_INSENSITIVE);\n        Matcher matcher = pattern.matcher(sql);\n        if (matcher.find()) {\n            select = matcher.group(1).trim();\n            from = matcher.group(2).trim();\n            where = matcher.group(3) != null ? matcher.group(3).trim() : null;\n            orderBy = matcher.group(4) != null ? matcher.group(4).trim() : null;\n            limit = matcher.group(5) != null ? matcher.group(5).trim() : null;\n        } else {\n            select = from = where = orderBy = limit = null;\n        }\n    }\n\n    // Getters for select, from, where, orderBy, and limit\n    // ...\n    String getSelect() {\n        return select;\n    }\n    String getFrom() {\n        return from;\n    }\n    String getWhere(){\n        return where;\n    }\n    String getOrderBy(){\n        return orderBy;\n    }\n    String getLimit(){\n        return limit;\n    }\n    public static void main(String[] args) {\n        SQLParser parser = new SQLParser(\"select name, age from users where age > 18 order by age limit 10\");\n        System.out.println(\"Select: \" + parser.getSelect());\n        System.out.println(\"From: \" + parser.getFrom());\n        System.out.println(\"Where: \" + parser.getWhere());\n        System.out.println(\"Order By: \" + parser.getOrderBy());\n        System.out.println(\"Limit: \" + parser.getLimit());\n    }\n\n\n\n\n}\n\n```"}
{"_id": 146, "response": "```java\n\nimport java.util.ArrayList;\n\npublic class SeqList {\n    ArrayList<Character> list;\n\n    public SeqList() {\n        this.list = new ArrayList<>();\n    }\n\n    public void createSeqList(char[] elements) {\n        for (char element : elements) {\n            this.list.add(element);\n        }\n    }\n\n    public void printSeqList() {\n        System.out.println(this.list);\n    }\n\n    public int getLength() {\n        return this.list.size();\n    }\n\n    public boolean isEmpty() {\n        return this.list.isEmpty();\n    }\n\n    public char getElement(int index) {\n        return this.list.get(index);\n    }\n\n    public int getPosition(char element) {\n        return this.list.indexOf(element);\n    }\n\n    public void insertElement(int index, char element) {\n        this.list.add(index, element);\n    }\n\n    public void deleteElement(int index) {\n        this.list.remove(index);\n    }\n\n    public void clearSeqList() {\n        this.list.clear();\n    }\n\n    public static void main(String[] args) {\n        SeqList L = new SeqList();\n        L.createSeqList(new char[]{'a', 'b', 'c', 'd', 'e'});\n        L.printSeqList();\n        System.out.println(\"Length: \" + L.getLength());\n        System.out.println(\"Is Empty: \" + L.isEmpty());\n        System.out.println(\"3rd Element: \" + L.getElement(2));\n        System.out.println(\"Position of 'c': \" + L.getPosition('c'));\n        L.insertElement(3, 'f');\n        L.printSeqList();\n        L.deleteElement(2);\n        L.printSeqList();\n        L.clearSeqList();\n        System.out.println(\"Is Empty: \" + L.isEmpty());\n    }\n}\n\n```"}
{"_id": 147, "response": "```java\n\npublic class Plant {\n    String name;\n    int health;\n    int attack;\n\n    public Plant(String name, int health, int attack) {\n        this.name = name;\n        this.health = health;\n        this.attack = attack;\n    }\n\n    public void attack(Zombie zombie) {\n        zombie.health -= this.attack;\n        zombie.checkDeath();\n    }\n\n    public void checkDeath() {\n        if (this.health <= 0) {\n            System.out.println(this.name + \" is dead.\");\n        } else {\n            System.out.println(this.name + \" has \" + this.health + \" health left.\");\n        }\n    }\n}\n\nclass Zombie {\n    String name;\n    int health;\n    int attack;\n\n    public Zombie(String name, int health, int attack) {\n        this.name = name;\n        this.health = health;\n        this.attack = attack;\n    }\n\n    public void attack(Plant plant) {\n        plant.health -= this.attack;\n        plant.checkDeath();\n    }\n\n    public void checkDeath() {\n        if (this.health <= 0) {\n            System.out.println(this.name + \" is dead.\");\n        } else {\n            System.out.println(this.name + \" has \" + this.health + \" health left.\");\n        }\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Plant peashooter = new Plant(\"Peashooter\", 100, 20);\n        Zombie coneheadZombie = new Zombie(\"Conehead Zombie\", 150, 30);\n\n        for (int i = 0; i < 10; i++) {\n            peashooter.attack(coneheadZombie);\n            if (coneheadZombie.health <= 0) {\n                break;\n            }\n\n            coneheadZombie.attack(peashooter);\n            if (peashooter.health <= 0) {\n                break;\n            }\n        }\n    }\n}\n\n```"}
{"_id": 148, "response": "```java\n\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Calendar;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class DateDifference {\n    private static final Map<String, Integer> CHINESE_NUMBERS = new HashMap<String, Integer>() {{\n        put(\"一\", 1);\n        put(\"二\", 2);\n        put(\"三\", 3);\n        put(\"四\", 4);\n        put(\"五\", 5);\n        put(\"六\", 6);\n        put(\"七\", 7);\n        put(\"八\", 8);\n        put(\"九\", 9);\n        put(\"十\", 10);\n        put(\"十一\", 11);\n        put(\"十二\", 12);\n    }};\n\n    public static int getDaysDifference(String chineseDate) {\n        LocalDate now = LocalDate.now();\n        int days = 0;\n\n        if (chineseDate.contains(\"今天\") || chineseDate.contains(\"今日\")) {\n            days = 1;\n        } else if (chineseDate.contains(\"昨天\") || chineseDate.contains(\"昨日\")) {\n            days = 2;\n        } else if (chineseDate.contains(\"近\")) {\n            String numberStr = chineseDate.replaceAll(\"[^0-9一二三四五六七八九十]\", \"\");\n            int number = CHINESE_NUMBERS.containsKey(numberStr) ? CHINESE_NUMBERS.get(numberStr) : Integer.parseInt(numberStr);\n\n            if (chineseDate.contains(\"周\")) {\n                days = number * 7;\n            } else if (chineseDate.contains(\"天\")) {\n                days = number;\n            } else if (chineseDate.contains(\"月\")) {\n                LocalDate pastDate = now.minusMonths(number);\n                days = (int) ChronoUnit.DAYS.between(pastDate, now);\n            }\n        }\n\n        return days;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getDaysDifference(\"今天\")); // 1\n        System.out.println(getDaysDifference(\"昨天\")); // 2\n        System.out.println(getDaysDifference(\"近一周\")); // 7\n        System.out.println(getDaysDifference(\"近7天\")); // 7\n        System.out.println(getDaysDifference(\"近一月\")); // depends on the current date\n    }\n}\n\n```"}
{"_id": 149, "response": "```java\n\npublic class PathReader {\n\n    public static String readPathTest(String path) {\n        // 检查路径是否为空或null\n        if (path == null || path.isEmpty()) {\n            return \"\";\n        }\n\n        // 查找最后一个'/'的位置\n        int lastSlashIndex = path.lastIndexOf('/');\n\n        // 从最后一个'/'之后提取文件名（包括扩展名）\n        String fileNameWithExtension = path.substring(lastSlashIndex + 1);\n\n        // 查找文件名中'.'的位置，用以去除扩展名\n        int dotIndex = fileNameWithExtension.indexOf('.');\n\n        // 如果没有扩展名，直接返回文件名\n        if (dotIndex == -1) {\n            return fileNameWithExtension;\n        }\n\n        // 返回没有扩展名的文件名\n        return fileNameWithExtension.substring(0, dotIndex);\n    }\n\n    // 可以在这里添加main方法来测试功能\n    public static void main(String[] args) {\n        String path = \"/courses/lecture/Lecture01.pdf\";\n        System.out.println(readPathTest(path)); // 应该输出 \"Lecture01\"\n    }\n}\n\n```"}
{"_id": 150, "response": "```java\n\n\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入IP地址：\");\n        String ip = scanner.nextLine();\n        System.out.println(\"方法一验证结果：\" + isRightIP(ip));\n        System.out.println(\"方法二验证结果：\" + isRightIPByRegex(ip));\n    }\n\n    // 方法一：使用字符串分割和整数解析\n    public static boolean isRightIP(String ip) {\n        if (ip == null || ip.length() == 0) {\n            return false;\n        }\n        String[] parts = ip.split(\"\\\\.\");\n        if (parts.length != 4) {\n            return false;\n        }\n        for (String part : parts) {\n            try {\n                int num = Integer.parseInt(part);\n                if (num < 0 || num > 255) {\n                    return false;\n                }\n            } catch (NumberFormatException e) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // 方法二：使用正则表达式\n    public static boolean isRightIPByRegex(String ip) {\n        if (ip == null || ip.length() == 0) {\n            return false;\n        }\n        String regex = \"^((25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)$\";\n        return Pattern.matches(regex, ip);\n    }\n}\n\n```"}
{"_id": 151, "response": "```java\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        String str = \"\\\"supported_mobiles\\\":[\\\"13001597927\\\",\\\"13001740938\\\",\\\"13001910099\\\"]\";\n        List<String> phoneNumbers = extractPhoneNumbers(str);\n        for (String phoneNumber : phoneNumbers) {\n            System.out.println(phoneNumber);\n        }\n    }\n\n    public static List<String> extractPhoneNumbers(String str) {\n        List<String> phoneNumbers = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"\\\"supported_mobiles\\\":\\\\[\\\"(.*?)\\\"\\\\]\");\n        Matcher matcher = pattern.matcher(str);\n        while (matcher.find()) {\n            String group = matcher.group(1);\n            String[] numbers = group.split(\"\\\",\\\"\");\n            for (String number : numbers) {\n                phoneNumbers.add(number);\n            }\n        }\n        return phoneNumbers;\n    }\n}\n\n```"}
{"_id": 152, "response": "```java\n\n\npublic class MatrixOperations {\n    public static boolean[][] meet(boolean[][] matrix1, boolean[][] matrix2) {\n        int m = matrix1.length;\n        int n = matrix1[0].length;\n        boolean[][] result = new boolean[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                result[i][j] = matrix1[i][j] && matrix2[i][j];\n            }\n        }\n        return result;\n    }\n\n    public static boolean[][] join(boolean[][] matrix1, boolean[][] matrix2) {\n        int m = matrix1.length;\n        int n = matrix1[0].length;\n        boolean[][] result = new boolean[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                result[i][j] = matrix1[i][j] || matrix2[i][j];\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        boolean[][] matrix1 = {{true, false}, {false, true}};\n        boolean[][] matrix2 = {{false, true}, {true, false}};\n        boolean[][] meetResult = meet(matrix1, matrix2);\n        boolean[][] joinResult = join(matrix1, matrix2);\n        System.out.println(\"Meet Result:\");\n        for (boolean[] row : meetResult) {\n            for (boolean value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n        System.out.println(\"Join Result:\");\n        for (boolean[] row : joinResult) {\n            for (boolean value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n\n```"}
{"_id": 153, "response": "```java\n\nimport java.util.Scanner;\n\nabstract class People {\n    protected double height;\n    protected double weight;\n\n    public People(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n    }\n\n    public double calculateBMI() {\n        return weight / (height * height);\n    }\n\n    public abstract String conclusion();\n}\n\nclass Man extends People {\n    public Man(double height, double weight) {\n        super(height, weight);\n    }\n\n    public String conclusion() {\n        double bmi = calculateBMI();\n        if (bmi < 20) {\n            return \"过轻\";\n        } else if (bmi < 25) {\n            return \"适中\";\n        } else if (bmi < 30) {\n            return \"过重\";\n        } else if (bmi < 35) {\n            return \"肥胖\";\n        } else {\n            return \"非常肥胖\";\n        }\n    }\n}\n\nclass Woman extends People {\n    public Woman(double height, double weight) {\n        super(height, weight);\n    }\n\n    public String conclusion() {\n        double bmi = calculateBMI();\n        if (bmi < 19) {\n            return \"过轻\";\n        } else if (bmi < 24) {\n            return \"适中\";\n        } else if (bmi < 29) {\n            return \"过重\";\n        } else if (bmi < 34) {\n            return \"肥胖\";\n        } else {\n            return \"非常肥胖\";\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入性别（男/女）：\");\n        String gender = scanner.next();\n        System.out.println(\"请输入身高（米）：\");\n        double height = scanner.nextDouble();\n        System.out.println(\"请输入体重（千克）：\");\n        double weight = scanner.nextDouble();\n\n        People people;\n        if (gender.equals(\"男\")) {\n            people = new Man(height, weight);\n        } else {\n            people = new Woman(height, weight);\n        }\n\n        System.out.println(\"BMI指数为：\" + people.calculateBMI());\n        System.out.println(\"结论为：\" + people.conclusion());\n    }\n}\n\n```"}
{"_id": 154, "response": "```java\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\n\npublic class Main {\n    public static void main(String[] args) {\n        String html = \"<div dir=\\\"ltr\\\" class=\\\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\\\">\\n\" +\n                \"\\t<span class=\\\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\\\">\\n\" +\n                \"\\t\\t<span class=\\\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\\\">Ihtesham Haider</span>\\n\" +\n                \"\\t</span>\\n\" +\n                \"</div>\";\n\n        Document doc = Jsoup.parse(html);\n        Element span = doc.select(\"span.css-901oao.css-16my406.r-poiln3.r-bcqeeo.r-qvutc0\").first();\n        String content = span.text();\n        System.out.println(content);\n    }\n}\n\n```"}
{"_id": 155, "response": "```java\n\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Main {\n    public static void main(String[] args) {\n        String fileName = \"Test.java\";\n        String email = \"test@example.com\";\n\n        if (isValidJavaFileName(fileName) && isValidEmail(email)) {\n            System.out.println(\"Java file name and email are valid.\");\n        } else {\n            System.out.println(\"Java file name or email is invalid.\");\n        }\n    }\n\n    public static boolean isValidJavaFileName(String fileName) {\n        // 文件名不能为空，且必须以.java结尾\n        return fileName != null && !fileName.isEmpty() && fileName.toLowerCase().endsWith(\".java\");\n    }\n\n    public static boolean isValidEmail(String email) {\n        String regex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(email);\n        return matcher.matches();\n    }\n}\n\n```"}
{"_id": 156, "response": "```java\n\nimport com.alibaba.fastjson2.JSON;\nimport com.alibaba.fastjson2.JSONArray;\nimport com.alibaba.fastjson2.JSONObject;\n\npublic class Main {\n    public static void main(String[] args) {\n        String jsonStr = \"{\\n\" +\n                \"\\t\\\"xAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"category\\\",\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t\\\"Mon\\\",\\n\" +\n                \"\\t\\t\\t\\\"Tue\\\",\\n\" +\n                \"\\t\\t\\t\\\"Wed\\\",\\n\" +\n                \"\\t\\t\\t\\\"Thu\\\",\\n\" +\n                \"\\t\\t\\t\\\"Fri\\\",\\n\" +\n                \"\\t\\t\\t\\\"Sat\\\",\\n\" +\n                \"\\t\\t\\t\\\"Sun\\\"\\n\" +\n                \"\\t\\t]\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"yAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"value\\\"\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"series\\\": [{\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t150,\\n\" +\n                \"\\t\\t\\t230,\\n\" +\n                \"\\t\\t\\t224,\\n\" +\n                \"\\t\\t\\t218,\\n\" +\n                \"\\t\\t\\t135,\\n\" +\n                \"\\t\\t\\t147,\\n\" +\n                \"\\t\\t\\t260\\n\" +\n                \"\\t\\t],\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"line\\\"\\n\" +\n                \"\\t}]\\n\" +\n                \"}\";\n\n        JSONObject jsonObject = JSON.parseObject(jsonStr);\n\n        // Get xAxis data\n        JSONObject xAxis = jsonObject.getJSONObject(\"xAxis\");\n        JSONArray xAxisData = xAxis.getJSONArray(\"data\");\n        for (int i = 0; i < xAxisData.size(); i++) {\n            System.out.println(xAxisData.getString(i));\n        }\n\n        // Get series data\n        JSONArray series = jsonObject.getJSONArray(\"series\");\n        for (int i = 0; i < series.size(); i++) {\n            JSONObject seriesData = series.getJSONObject(i);\n            JSONArray data = seriesData.getJSONArray(\"data\");\n            for (int j = 0; j < data.size(); j++) {\n                System.out.println(data.getInteger(j));\n            }\n        }\n    }\n}\n\n```"}
{"_id": 157, "response": "```java\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        String input = \"ANTIFRAUD&&black_email;ANTIFRAUD&&no_email;ANTIFRAUD&&rule_email;ANTIFRAUD&&infoCOde1&&TEST\";\n        Set<String> result = filterValues(input);\n        System.out.println(result);\n    }\n\n    public static Set<String> filterValues(String input) {\n        Set<String> enumValues = Arrays.stream(RiskRejectCategoryEnum.values())\n                .map(RiskRejectCategoryEnum::getName)\n                .collect(Collectors.toSet());\n\n        String[] parts = input.split(\";\");\n        Set<String> values = new HashSet<>();\n        for (String part : parts) {\n            String[] subParts = part.split(\"&&\");\n            String value = subParts[subParts.length - 1];\n            if (enumValues.contains(value)) {\n                values.add(value);\n            }\n        }\n        return values;\n    }\n}\n\nenum RiskRejectCategoryEnum {\n    black_email(\"black_email\", \"GREYLIST\",1 ,\"灰名单\"),\n    rule_email(\"rule_email\", \"NON_GREYLIST\", 2,\"非灰名单\"),\n    no_email(\"no_email\", \"NO_EMAIL\", 99,\"不需要发邮箱\");\n\n    private String name;\n    private String description;\n    private int priority;\n    private String chineseDescription;\n\n    RiskRejectCategoryEnum(String name, String description, int priority, String chineseDescription) {\n        this.name = name;\n        this.description = description;\n        this.priority = priority;\n        this.chineseDescription = chineseDescription;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\n```"}
{"_id": 158, "response": "```java\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        System.out.print(\"Enter a password: \");\n        String password = input.nextLine();\n\n        if (isValidPassword(password)) {\n            System.out.println(\"Valid Password\");\n        } else {\n            System.out.println(\"Invalid Password\");\n        }\n    }\n\n    public static boolean isValidPassword(String password) {\n        if (password.length() < 8) { \n            return false;\n        } else {   \n            int charCount = 0;\n            int numCount = 0;\n            for (int i = 0; i < password.length(); i++) {\n                char ch = password.charAt(i);\n                if (isNumeric(ch)) numCount++;\n                else if (isLetter(ch)) charCount++;\n                else return false;\n            }\n            return numCount >= 2;\n        }\n    }\n\n    public static boolean isLetter(char ch) {\n        ch = Character.toUpperCase(ch);\n        return (ch >= 'A' && ch <= 'Z');\n    }\n\n    public static boolean isNumeric(char ch) {\n        return (ch >= '0' && ch <= '9');\n    }\n}\n\n```"}
{"_id": 159, "response": "```java\nimport java.util.concurrent.atomic.AtomicInteger;\n\nclass Threeleton {\n    private static final int MAX_INSTANCE_COUNT = 3;\n    private static final Threeleton[] instances = new Threeleton[MAX_INSTANCE_COUNT];\n    private static final AtomicInteger count = new AtomicInteger(0);\n    private final int id;\n\n    static {\n        for (int i = 0; i < MAX_INSTANCE_COUNT; i++) {\n            instances[i] = new Threeleton(i);\n        }\n    }\n\n    private Threeleton(int id) {\n        this.id = id;\n    }\n\n    public static Threeleton getInstance() {\n        return instances[count.getAndIncrement() % MAX_INSTANCE_COUNT];\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n\n```"}
{"_id": 160, "response": "```java\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class FileEncoder {\n\n    public static void encodeFile(File encodingFile, File encodedFile) {\n        try (FileReader reader = new FileReader(encodingFile);\n             FileWriter writer = new FileWriter(encodedFile)) {\n            int c;\n            while ((c = reader.read()) != -1) {\n                char character = (char) c;\n                if (Character.isDigit(character)) {\n                    // 数字加密规则\n                    character = character == '9' ? '0' : (char) (character + 1);\n                } else if (Character.isLetter(character)) {\n                    // 字母加密规则\n                    if (character == 'z') {\n                        character = 'a';\n                    } else if (character == 'Z') {\n                        character = 'A';\n                    } else if ((character >= 'a' && character < 'z') || (character >= 'A' && character < 'Z')) {\n                        character = (char) (character + 1);\n                    }\n                }\n                // 非数字和字母的字符保持不变\n                writer.write(character);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        // 示例使用方法\n        File encodingFile = new File(\"path/to/your/input.txt\"); // 指定要加密的文件路径\n        File encodedFile = new File(\"path/to/your/output.txt\"); // 指定加密后文件的保存路径\n        encodeFile(encodingFile, encodedFile);\n    }\n}\n\n```"}
{"_id": 161, "response": "```java\nimport java.util.Map;\nimport java.util.TreeMap;\n\npublic class WorldCupService {\n\n    private final Map<String, String> worldCupChampions = new TreeMap<>();\n\n    public WorldCupService() {\n        initializeChampions();\n    }\n\n    private void initializeChampions() {\n        worldCupChampions.put(\"1930\", \"乌拉圭\");\n        worldCupChampions.put(\"1934\", \"意大利\");\n        worldCupChampions.put(\"1938\", \"意大利\");\n        worldCupChampions.put(\"1950\", \"乌拉圭\");\n        worldCupChampions.put(\"1954\", \"西德\");\n        worldCupChampions.put(\"1958\", \"巴西\");\n        worldCupChampions.put(\"1962\", \"巴西\");\n        worldCupChampions.put(\"1966\", \"英格兰\");\n        worldCupChampions.put(\"1970\", \"巴西\");\n        worldCupChampions.put(\"1974\", \"西德\");\n        worldCupChampions.put(\"1978\", \"阿根廷\");\n        worldCupChampions.put(\"1982\", \"意大利\");\n        worldCupChampions.put(\"1986\", \"阿根廷\");\n        worldCupChampions.put(\"1990\", \"西德\");\n        worldCupChampions.put(\"1994\", \"巴西\");\n        worldCupChampions.put(\"1998\", \"法国\");\n        worldCupChampions.put(\"2002\", \"巴西\");\n        worldCupChampions.put(\"2006\", \"意大利\");\n        worldCupChampions.put(\"2010\", \"西班牙\");\n        worldCupChampions.put(\"2014\", \"德国\");\n    }\n\n    public String getChampionByYear(String year) {\n        return worldCupChampions.getOrDefault(year, \"没有举办世界杯\");\n    }\n\n    public String getYearsWonByCountry(String country) {\n        StringBuilder years = new StringBuilder();\n        for (Map.Entry<String, String> entry : worldCupChampions.entrySet()) {\n            if (entry.getValue().equals(country)) {\n                years.append(entry.getKey()).append(\" \");\n            }\n        }\n        return years.length() > 0 ? years.toString().trim() : \"没有获得过世界杯\";\n    }\n}\n\n```"}
{"_id": 162, "response": "```java\n\npublic class Solution {\n    public int numDecodings(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        int n = s.length();\n        int[] dp = new int[n + 1];\n        dp[0] = 1;\n        dp[1] = s.charAt(0) != '0' ? 1 : 0;\n        for (int i = 2; i <= n; i++) {\n            int first = Integer.valueOf(s.substring(i - 1, i));\n            int second = Integer.valueOf(s.substring(i - 2, i));\n            if (first >= 1 && first <= 9) {\n                dp[i] += dp[i-1];\n            }\n            if (second >= 10 && second <= 26) {\n                dp[i] += dp[i-2];\n            }\n        }\n        return dp[n];\n    }\n}\n\n```"}
{"_id": 163, "response": "```java\nimport java.util.PriorityQueue;\n\npublic class KthLargestInMatrix {\n\n    public int findKthLargestValue(int n, int m, int k) {\n        // 验证输入\n        if (n <= 0 || m <= 0 || k <= 0 || k > n * m) {\n            return Integer.MIN_VALUE;\n        }\n\n        // 使用最小堆来存储最大的k个元素\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>(k);\n\n        // 遍历所有单元格\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                int value = i * j;\n\n                // 如果堆的大小小于k，直接添加\n                if (minHeap.size() < k) {\n                    minHeap.add(value);\n                } else if (value > minHeap.peek()) {\n                    // 如果当前值大于堆顶元素，则弹出堆顶，将当前值加入堆中\n                    minHeap.poll();\n                    minHeap.add(value);\n                }\n            }\n        }\n\n        // 堆顶元素即为第k大的元素\n        return minHeap.peek();\n    }\n}\n\n```"}
{"_id": 164, "response": "```java\n\npublic class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode(int x) { val = x; }\n}\n\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);\n    }\n\n    public boolean isValidBST(TreeNode node, long minVal, long maxVal) {\n        if (node == null) return true;\n        if (node.val >= maxVal || node.val <= minVal) return false;\n        return isValidBST(node.left, minVal, node.val) && isValidBST(node.right, node.val, maxVal);\n    }\n}\n\n```"}
{"_id": 165, "response": "```java\n\npublic class DayOfYearCalculator {\n\n    public static int dayOfYear(int year, int month, int day) {\n        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\n        // 检查闰年\n        if (isLeapYear(year)) {\n            daysInMonth[1] = 29; // 2月为29天\n        }\n\n        // 验证输入\n        if (month < 1 || month > 12 || day < 1 || day > daysInMonth[month - 1]) {\n            throw new IllegalArgumentException(\"Invalid date\");\n        }\n\n        int dayOfYear = day;\n        for (int i = 0; i < month - 1; i++) {\n            dayOfYear += daysInMonth[i];\n        }\n\n        return dayOfYear;\n    }\n\n    private static boolean isLeapYear(int year) {\n        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n    }\n}\n\n```"}
{"_id": 166, "response": "```java\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\n\npublic class RunningTracker {\n\n    public long calculateTotalDistance(LocalDate start, LocalDate end) {\n        long totalDistance = 0;\n        LocalDate date = start;\n\n        while (!date.isAfter(end)) {\n            // 如果是月初或周一，则跑2千米\n            if (date.getDayOfMonth() == 1 || date.getDayOfWeek() == java.time.DayOfWeek.MONDAY) {\n                totalDistance += 2;\n            } else {\n                totalDistance += 1;\n            }\n            date = date.plusDays(1);\n        }\n\n        return totalDistance;\n    }\n}\n\n```"}
{"_id": 167, "response": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class StringPermutations {\n\n    public List<String> permute(String s) {\n        Set<String> permutations = new HashSet<>();\n        permute(\"\", s, permutations);\n        List<String> sortedList = new ArrayList<>(permutations);\n        Collections.sort(sortedList);\n        return sortedList;\n    }\n\n    private void permute(String prefix, String s, Set<String> permutations) {\n        int n = s.length();\n        if (n == 0) {\n            permutations.add(prefix);\n        } else {\n            for (int i = 0; i < n; i++) {\n                permute(prefix + s.charAt(i), s.substring(0, i) + s.substring(i + 1, n), permutations);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        StringPermutations sp = new StringPermutations();\n        List<String> result = sp.permute(\"AAB\");\n        result.forEach(System.out::println);\n        System.out.println(\"Total permutations: \" + result.size());\n    }\n}\n\n```"}
{"_id": 168, "response": "```java\n\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int num = scanner.nextInt();\n        scanner.nextLine();\n        Map<Integer, Set<Integer>> holdMap = new HashMap<>();\n        Map<Integer, Set<Integer>> waitMap = new HashMap<>();\n        for (int i = 0; i < num; i++) {\n            String line = scanner.nextLine();\n            String[] parts = line.split(\"\\\\s+\");\n            int pid = Integer.parseInt(parts[0]);\n            Set<Integer> holdSet = new HashSet<>();\n            Set<Integer> waitSet = new HashSet<>();\n            for (String s : parts[1].substring(1, parts[1].length() - 1).split(\",\")) {\n                if (!s.isEmpty()) {\n                    holdSet.add(Integer.parseInt(s));\n                }\n            }\n            for (String s : parts[2].substring(1, parts[2].length() - 1).split(\",\")) {\n                if (!s.isEmpty()) {\n                    waitSet.add(Integer.parseInt(s));\n                }\n            }\n            holdMap.put(pid, holdSet);\n            waitMap.put(pid, waitSet);\n        }\n        List<Integer> deadlocks = findDeadlocks(holdMap, waitMap);\n        Collections.sort(deadlocks);\n        System.out.println(deadlocks);\n    }\n\n    static List<Integer> findDeadlocks(Map<Integer, Set<Integer>> holdMap, Map<Integer, Set<Integer>> waitMap) {\n        List<Integer> deadlocks = new ArrayList<>();\n        for (int pid : waitMap.keySet()) {\n            Set<Integer> waitSet = waitMap.get(pid);\n            for (int resource : waitSet) {\n                if (isResourceHeldByOthers(resource, pid, holdMap)) {\n                    deadlocks.add(pid);\n                    break;\n                }\n            }\n        }\n        return deadlocks;\n    }\n\n    private static boolean isResourceHeldByOthers(int resource, int pid, Map<Integer, Set<Integer>> holdMap) {\n        for (int otherPid : holdMap.keySet()) {\n            if (otherPid != pid && holdMap.get(otherPid).contains(resource)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n```"}
{"_id": 169, "response": "```java\n\npublic class Square {\n    private double sideLength;\n\n    public Square(double sideLength) {\n        this.sideLength = sideLength;\n    }\n\n    public double getPerimeter() {\n        return 4 * sideLength;\n    }\n\n    public double getArea() {\n        return sideLength * sideLength;\n    }\n}\n\n```"}
{"_id": 170, "response": "```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Queue<Integer> queue = new LinkedList<>(Arrays.asList(3, 2, 1, 4, 5));\n        System.out.println(maxOperations(queue));\n    }\n\n    public static int maxOperations(Queue<Integer> queue) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(queue);\n        int operations = 0;\n        while (!queue.isEmpty()) {\n            int num = queue.poll();\n            if (num == pq.peek()) {\n                pq.poll();\n            } else {\n                queue.offer(num);\n            }\n            operations++;\n        }\n        return operations;\n    }\n}\n\n```"}
{"_id": 171, "response": "```java\n\n\npublic class HugeInteger {\n\n    private String value;\n\n    // Constructor that accepts long\n    public HugeInteger(long value) {\n        this.value = Long.toString(value);\n    }\n\n    // Constructor that accepts String\n    public HugeInteger(String value) {\n        if (value.length() > 100) {\n            throw new IllegalArgumentException(\"The length of the string should not exceed 100 digits.\");\n        }\n        this.value = value;\n    }\n\n    // Getter method\n    public String getValue() {\n        return this.value;\n    }\n}\n\n```"}
{"_id": 172, "response": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class NumberFormatter {\n\n    public static List<String> formatNumbers(List<Integer> numbers) {\n        return numbers.stream()\n                .map(number -> String.format(\"%02d\", number))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 10, 12);\n        List<String> formattedNumbers = formatNumbers(numbers);\n        System.out.println(formattedNumbers);\n    }\n}\n\n```"}
{"_id": 173, "response": "```java\n\n\npublic class Fraction {\n    private int numerator;   // 分子\n    private int denominator; // 分母\n\n    // 构造器\n    public Fraction(int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new IllegalArgumentException(\"Denominator cannot be zero.\");\n        }\n        this.numerator = numerator;\n        this.denominator = denominator;\n        simplify();\n    }\n\n    // 化简分数\n    private void simplify() {\n        int gcd = gcd(Math.abs(numerator), Math.abs(denominator));\n        numerator /= gcd;\n        denominator /= gcd;\n    }\n\n    // 计算最大公约数\n    private int gcd(int a, int b) {\n        return b == 0 ? a : gcd(b, a % b);\n    }\n\n    // 加法\n    public Fraction add(Fraction other) {\n        int newNumerator = this.numerator * other.denominator + other.numerator * this.denominator;\n        int newDenominator = this.denominator * other.denominator;\n        return new Fraction(newNumerator, newDenominator);\n    }\n\n    // 减法\n    public Fraction subtract(Fraction other) {\n        int newNumerator = this.numerator * other.denominator - other.numerator * this.denominator;\n        int newDenominator = this.denominator * other.denominator;\n        return new Fraction(newNumerator, newDenominator);\n    }\n\n    // 乘法\n    public Fraction multiply(Fraction other) {\n        return new Fraction(this.numerator * other.numerator, this.denominator * other.denominator);\n    }\n\n    // 除法\n    public Fraction divide(Fraction other) {\n        return new Fraction(this.numerator * other.denominator, this.denominator * other.numerator);\n    }\n\n    // 转换为字符串\n    @Override\n    public String toString() {\n        return numerator + \"/\" + denominator;\n    }\n\n    // Getter方法\n    public int getNumerator() {\n        return numerator;\n    }\n\n    public int getDenominator() {\n        return denominator;\n    }\n}\n\n```"}
{"_id": 174, "response": "```java\n\npublic class Main {\n    public static boolean validWordAbbreviation(String word, String abbr) {\n        int i = 0, j = 0;\n        while (i < word.length() && j < abbr.length()) {\n            if (word.charAt(i) == abbr.charAt(j)) {\n                ++i;\n                ++j;\n                continue;\n            }\n            if (abbr.charAt(j) <= '0' || abbr.charAt(j) > '9') {\n                return false;\n            }\n            int start = j;\n            while (j < abbr.length() && abbr.charAt(j) >= '0' && abbr.charAt(j) <= '9') {\n                ++j;\n            }\n            int num = Integer.valueOf(abbr.substring(start, j));\n            i += num;\n        }\n        return i == word.length() && j == abbr.length();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(validWordAbbreviation(\"word\", \"1ord\")); // true\n        System.out.println(validWordAbbreviation(\"word\", \"4\")); // true\n        System.out.println(validWordAbbreviation(\"word\", \"2r1\")); // true\n        System.out.println(validWordAbbreviation(\"word\", \"w1r1\")); // true\n        System.out.println(validWordAbbreviation(\"word\", \"word\")); // true\n        System.out.println(validWordAbbreviation(\"word\", \"1o2\")); // false\n        System.out.println(validWordAbbreviation(\"word\", \"wo3\")); // false\n    }\n}\n\n```"}
{"_id": 175, "response": "```java\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextInt()) {\n            int start = scanner.nextInt();\n            int end = scanner.nextInt();\n            System.out.println(sum(start, end));\n        }\n        scanner.close();\n    }\n\n    public static int sum(int start, int end) {\n        if (start > end) {\n            return 0;\n        } else if (start == end) {\n            return start;\n        } else {\n            return start + sum(start + 1, end);\n        }\n    }\n}\n\n```"}
{"_id": 176, "response": "```java\n\nclass Triangle {\n    private double side;\n\n    public Triangle(double side) {\n        this.side = side;\n    }\n\n    public double calculatePerimeter() {\n        return 3 * side;\n    }\n}\n\nclass Ladder {\n    private double top;\n    private double bottom;\n    private double height;\n\n    public Ladder(double top, double bottom, double height) {\n        this.top = top;\n        this.bottom = bottom;\n        this.height = height;\n    }\n\n    public double calculateArea() {\n        return (top + bottom) * height / 2;\n    }\n}\n\nclass Circle {\n    private double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    public double calculateArea() {\n        return Math.PI * Math.pow(radius, 2);\n    }\n\n    public double calculateCircumference() {\n        return 2 * Math.PI * radius;\n    }\n}\n\npublic class Compute {\n    public static void main(String[] args) {\n        Triangle triangle = new Triangle(5);\n        System.out.println(\"Triangle Perimeter: \" + triangle.calculatePerimeter());\n\n        Ladder ladder = new Ladder(5, 10, 7);\n        System.out.println(\"Ladder Area: \" + ladder.calculateArea());\n\n        Circle circle = new Circle(5);\n        System.out.println(\"Circle Area: \" + circle.calculateArea());\n        System.out.println(\"Circle Circumference: \" + circle.calculateCircumference());\n    }\n}\n\n```"}
{"_id": 177, "response": "```java\n\npublic class IncrementDecrement {\n    public int increment(int x) {\n        return ++x; // 前缀递增\n    }\n\n    public int decrement(int y) {\n        return y--; // 后缀递减，返回的是递减前的值\n    }\n}\n\n```"}
{"_id": 178, "response": "```java\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] a = {1, 2, 4};\n        int[] b = {2, 4, 6, 8};\n        int[] sum = sumArray(a, b);\n        for (int i : sum) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static int[] sumArray(int[] a, int[] b) {\n        int[] sum;\n        if (a.length > b.length) {\n            sum = new int[a.length];\n            for (int i = 0; i < a.length; i++) {\n                if (i < b.length) {\n                    sum[i] = a[i] + b[i];\n                } else {\n                    sum[i] = a[i];\n                }\n            }\n        } else {\n            sum = new int[b.length];\n            for (int i = 0; i < b.length; i++) {\n                if (i < a.length) {\n                    sum[i] = a[i] + b[i];\n                } else {\n                    sum[i] = b[i];\n                }\n            }\n        }\n        return sum;\n    }\n}\n\n```"}
{"_id": 179, "response": "```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Main {\n    public static void main(String[] args) {\n        String input = \"Hello <a>World</a>!\";\n        System.out.println(wrapNonATagContent(input));\n    }\n\n    public static String wrapNonATagContent(String input) {\n        String[] parts = input.split(\"(?=<a>)|(?<=</a>)\");\n        StringBuilder result = new StringBuilder();\n        Pattern pattern = Pattern.compile(\"<a>.*</a>\");\n\n        for (String part : parts) {\n            Matcher matcher = pattern.matcher(part);\n            if (!matcher.matches()) {\n                result.append(\"<b>\").append(part).append(\"</b>\");\n            } else {\n                result.append(part);\n            }\n        }\n\n        return result.toString();\n    }\n}\n\n```"}
{"_id": 180, "response": "```java\n\npublic class BloodDonationEligibility {\n\n    public boolean isEligibleForDonation(int age, String gender, double weight) {\n        // 检查年龄是否在18到55岁之间\n        if (age < 18 || age > 55) {\n            return false;\n        }\n\n        // 根据性别检查体重\n        if (\"male\".equalsIgnoreCase(gender) && weight < 50) {\n            return false;\n        } else if (\"female\".equalsIgnoreCase(gender) && weight < 45) {\n            return false;\n        }\n\n        // 如果通过上述所有检查，则符合献血条件\n        return true;\n    }\n}\n\n```"}
{"_id": 181, "response": "```java\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] words = {\"apple\", \"banana\", \"cherry\", \"date\", \"egg\", \"fig\", \"grape\"};\n        int left = 1;\n        int right = 5;\n        System.out.println(countVowelStrings(words, left, right));\n    }\n\n    public static int countVowelStrings(String[] words, int left, int right) {\n        int count = 0;\n        for (int i = left; i <= right; i++) {\n            if (isVowelString(words[i])) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static boolean isVowelString(String word) {\n        char firstChar = word.charAt(0);\n        char lastChar = word.charAt(word.length() - 1);\n        return isVowel(firstChar) && isVowel(lastChar);\n    }\n\n    private static boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n\n```"}
{"_id": 182, "response": "```java\n\npublic class MaxValue {\n    // Method to find maximum in three integers\n    public int max(int num1, int num2, int num3) {\n        return Math.max(num1, Math.max(num2, num3));\n    }\n\n    // Method to find maximum in three doubles\n    public double max(double num1, double num2, double num3) {\n        return Math.max(num1, Math.max(num2, num3));\n    }\n\n    // Method to find maximum in three numbers (any type)\n    public double max(Number num1, Number num2, Number num3) {\n        return Math.max(num1.doubleValue(), Math.max(num2.doubleValue(), num3.doubleValue()));\n    }\n}\n\n```"}
{"_id": 183, "response": "```java\n\npublic class StringUtils {\n\n    public static String alternateCase(String input) {\n        StringBuilder sb = new StringBuilder(input.length());\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            if (i % 2 == 0) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}\n\n```"}
{"_id": 184, "response": "```java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class CommentRemover {\n    public static void removeCommentsFromFile(String inputFilePath, String outputFilePath) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(inputFilePath));\n             BufferedWriter writer = new BufferedWriter(new FileWriter(outputFilePath))) {\n\n            String line;\n            StringBuilder codeBuilder = new StringBuilder();\n            boolean isCommentBlock = false;\n\n            while ((line = reader.readLine()) != null) {\n                line = line.trim();\n\n                // 处理多行注释块\n                if (isCommentBlock) {\n                    if (line.contains(\"*/\")) {\n                        line = line.substring(line.indexOf(\"*/\") + 2);\n                        isCommentBlock = false;\n                    } else {\n                        continue;\n                    }\n                }\n\n                // 处理单行注释\n                if (line.startsWith(\"//\")) {\n                    line = \"\";\n                } else if (line.startsWith(\"/*\")) {\n                    // 处理多行注释块的起始行\n                    if (line.contains(\"*/\")) {\n                        line = line.substring(line.indexOf(\"*/\") + 2);\n                    } else {\n                        isCommentBlock = true;\n                        continue;\n                    }\n                }\n\n                codeBuilder.append(line);\n                codeBuilder.append(System.lineSeparator());\n            }\n\n            writer.write(codeBuilder.toString());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        String inputFilePath = \"Example.java\";\n        String outputFilePath = \"CleanExample.java\";\n\n        removeCommentsFromFile(inputFilePath, outputFilePath);\n    }\n}\n```"}
{"_id": 185, "response": "```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\n\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\n\npublic class ImageClassifier {\n    public static void classifyImages(String imageFolder, int threshold1, int threshold2){\n        // 分类后的文件夹路径\n        String outputFolder1 = imageFolder + \"/folder_1\";\n        String outputFolder2 = imageFolder + \"/folder_2\";\n        String outputFolder3 = imageFolder + \"/folder_3\";\n\n        // 获取图像文件夹中的所有文件\n        File[] imageFiles = new File(imageFolder).listFiles();\n        if (imageFiles == null) {\n            System.out.println(\"图像文件夹为空或无法访问。\");\n            return;\n        }\n\n        // 遍历图像文件夹中的所有文件\n        for (File imageFile : imageFiles) {\n            if (imageFile.getName().endsWith(\".jpg\") || imageFile.getName().endsWith(\".png\")) {\n                try {\n                    // 读取图像\n                    BufferedImage image = ImageIO.read(imageFile);\n\n                    // 获取图像的长宽\n                    int width = image.getWidth();\n                    int height = image.getHeight();\n\n                    // 根据阈值分类\n                    String outputFolder;\n                    if (width < threshold1 || height < threshold1) {\n                        outputFolder = outputFolder1;\n                    } else if (width < threshold2 || height < threshold2) {\n                        outputFolder = outputFolder2;\n                    } else {\n                        outputFolder = outputFolder3;\n                    }\n\n                    // 确保输出文件夹存在\n                    new File(outputFolder).mkdirs();\n\n                    // 将图像移动到相应的输出文件夹中\n                    Path outputPath = new File(outputFolder, imageFile.getName()).toPath();\n                    Files.copy(imageFile.toPath(), outputPath, StandardCopyOption.REPLACE_EXISTING);\n                } catch (IOException e) {\n                    System.out.println(\"处理图像文件时出错: \" + e.getMessage());\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        // 图像文件夹路径\n        String imageFolder = \"images\";\n\n        // 阈值\n        int threshold1 = 100;\n        int threshold2 = 200;\n\n        classifyImages(imageFolder, threshold1, threshold2);\n    }\n}\n```"}
{"_id": 186, "response": "```java\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Distance {\n\n    // 欧几里得距离\n    public static double euclideanDistance(double[] point1, double[] point2) {\n        double sum = 0;\n        for (int i = 0; i < point1.length; i++) {\n            sum += Math.pow(point1[i] - point2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    // 曼哈顿距离\n    public static double manhattanDistance(double[] point1, double[] point2) {\n        double sum = 0;\n        for (int i = 0; i < point1.length; i++) {\n            sum += Math.abs(point1[i] - point2[i]);\n        }\n        return sum;\n    }\n\n    // 切比雪夫距离\n    public static double chebyshevDistance(double[] point1, double[] point2) {\n        double max = 0;\n        for (int i = 0; i < point1.length; i++) {\n            max = Math.max(max, Math.abs(point1[i] - point2[i]));\n        }\n        return max;\n    }\n\n    // 闵可夫斯基距离\n    public static double minkowskiDistance(double[] point1, double[] point2, double p) {\n        double sum = 0;\n        for (int i = 0; i < point1.length; i++) {\n            sum += Math.pow(Math.abs(point1[i] - point2[i]), p);\n        }\n        return Math.pow(sum, 1 / p);\n    }\n\n    // 余弦相似度\n    public static double cosineSimilarity(double[] vector1, double[] vector2) {\n        double dotProduct = 0;\n        double normVector1 = 0;\n        double normVector2 = 0;\n\n        for (int i = 0; i < vector1.length; i++) {\n            dotProduct += vector1[i] * vector2[i];\n            normVector1 += Math.pow(vector1[i], 2);\n            normVector2 += Math.pow(vector2[i], 2);\n        }\n\n        return dotProduct / (Math.sqrt(normVector1) * Math.sqrt(normVector2));\n    }\n\n    // 汉明距离\n    public static int hammingDistance(String string1, String string2) {\n        int distance = 0;\n        for (int i = 0; i < string1.length(); i++) {\n            if (string1.charAt(i) != string2.charAt(i)) {\n                distance++;\n            }\n        }\n        return distance;\n    }\n\n    // Jaccard相似度\n    public static double jaccardSimilarity(Set<Integer> set1, Set<Integer> set2) {\n        Set<Integer> intersection = new HashSet<>(set1);\n        intersection.retainAll(set2);\n\n        Set<Integer> union = new HashSet<>(set1);\n        union.addAll(set2);\n\n        return (double) intersection.size() / union.size();\n    }\n\n    public static void main(String[] args) {\n        // 手动编写数据\n        double[] pointA = {1, 2, 3};\n        double[] pointB = {4, 5, 6};\n\n        double[] vectorX = {1, 2, 3};\n        double[] vectorY = {4, 5, 6};\n\n        String stringP = \"1010101\";\n        String stringQ = \"1001001\";\n\n        Set<Integer> setAlpha = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n        Set<Integer> setBeta = new HashSet<>(Arrays.asList(4, 5, 6, 7, 8));\n\n        // 调用函数并输出结果\n        System.out.println(\"Euclidean Distance: \" + euclideanDistance(pointA, pointB));\n        System.out.println(\"Manhattan Distance: \" + manhattanDistance(pointA, pointB));\n        System.out.println(\"Chebyshev Distance: \" + chebyshevDistance(pointA, pointB));\n        System.out.println(\"Minkowski Distance (p=2): \" + minkowskiDistance(pointA, pointB, 2));\n        System.out.println(\"Cosine Similarity: \" + cosineSimilarity(vectorX, vectorY));\n        System.out.println(\"Hamming Distance: \" + hammingDistance(stringP, stringQ));\n        System.out.println(\"Jaccard Similarity: \" + jaccardSimilarity(setAlpha, setBeta));\n    }\n}\n\n```"}
{"_id": 187, "response": "```java\nimport org.w3c.dom.*;\nimport org.xml.sax.SAXException;\n\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class LabelConverter {\n    public static double calculateIoU(int[] box1, int[] box2) {\n        int x1 = box1[0];\n        int y1 = box1[1];\n        int x2 = box1[2];\n        int y2 = box1[3];\n        int x3 = box2[0];\n        int y3 = box2[1];\n        int x4 = box2[2];\n        int y4 = box2[3];\n\n        // 计算相交矩形的左上角和右下角坐标\n        int inter_x1 = Math.max(x1, x3);\n        int inter_y1 = Math.max(y1, y3);\n        int inter_x2 = Math.min(x2, x4);\n        int inter_y2 = Math.min(y2, y4);\n\n        // 计算相交矩形的面积\n        int inter_area = Math.max(0, inter_x2 - inter_x1 + 1) * Math.max(0, inter_y2 - inter_y1 + 1);\n\n        // 计算并集面积和IoU\n        int box1_area = (x2 - x1 + 1) * (y2 - y1 + 1);\n        int box2_area = (x4 - x3 + 1) * (y4 - y3 + 1);\n        int union_area = box1_area + box2_area - inter_area;\n        double iou = (double) inter_area / union_area;\n\n        return iou;\n    }\n\n    public static void convertLabels(String labelFile, int[] targetRegion) throws ParserConfigurationException, IOException, SAXException, TransformerException {\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        Document doc = factory.newDocumentBuilder().parse(new File(labelFile));\n\n        NodeList objectList = doc.getElementsByTagName(\"object\");\n\n        for (int i = 0; i < objectList.getLength(); i++) {\n            Element objectElem = (Element) objectList.item(i);\n            Element bboxElem = (Element) objectElem.getElementsByTagName(\"bndbox\").item(0);\n\n            int xmin = Integer.parseInt(bboxElem.getElementsByTagName(\"xmin\").item(0).getTextContent());\n            int ymin = Integer.parseInt(bboxElem.getElementsByTagName(\"ymin\").item(0).getTextContent());\n            int xmax = Integer.parseInt(bboxElem.getElementsByTagName(\"xmax\").item(0).getTextContent());\n            int ymax = Integer.parseInt(bboxElem.getElementsByTagName(\"ymax\").item(0).getTextContent());\n\n            // 计算当前边界框与目标区域的IoU\n            double iou = calculateIoU(targetRegion, new int[]{xmin, ymin, xmax, ymax});\n\n            // 如果IoU大于0.2，则将类别设置为0\n            if (iou > 0.2) {\n                Element nameElem = (Element) objectElem.getElementsByTagName(\"name\").item(0);\n                nameElem.setTextContent(\"0\");\n            }\n        }\n\n        // 保存更新后的XML文件\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        Transformer transformer = transformerFactory.newTransformer();\n        transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n        DOMSource source = new DOMSource(doc);\n        StreamResult result = new StreamResult(new File(labelFile));\n        transformer.transform(source, result);\n    }\n\n    public static void main(String[] args) {\n        int[] targetRegion = {950, 786, 1400, 1052};\n        String labelFile = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\work\\\\1225\\\\annotations\\\\A37-145-BSD-231221-A_485.xml\";\n\n        try {\n            convertLabels(labelFile, targetRegion);\n            System.out.println(\"Label conversion completed successfully.\");\n        } catch (ParserConfigurationException | IOException | SAXException | TransformerException e) {\n            System.out.println(\"An error occurred during label conversion: \" + e.getMessage());\n        }\n    }\n}\n```"}
{"_id": 188, "response": "```java\nimport java.util.HashSet;\n\nclass User {\n    private String name;\n    private char gender;\n    private String idNumber;\n\n    // Constructor\n    public User(String name, char gender, String idNumber) {\n        this.name = name;\n        this.gender = gender;\n        this.idNumber = idNumber;\n    }\n\n    // Getter and setter methods\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public char getGender() {\n        return gender;\n    }\n\n    public void setGender(char gender) {\n        this.gender = gender;\n    }\n\n    public String getIdNumber() {\n        return idNumber;\n    }\n\n    public void setIdNumber(String idNumber) {\n        this.idNumber = idNumber;\n    }\n\n    // toString method\n    @Override\n    public String toString() {\n        return String.format(\"Name:%s\\nSex:%c\\nID:%s\", name, gender, idNumber);\n    }\n}\n\nclass UserManager {\n    private HashSet<String> registeredIds = new HashSet<>();\n\n    public String addUser(String name, String gender, String idNumber) {\n        // Validate arguments\n        if (!name.matches(\"[a-zA-Z_]+\")) {\n            return \"Name illegal\";\n        }\n\n        if (!gender.matches(\"[MFO]\")) {\n            return \"Sex illegal\";\n        }\n\n        if (!idNumber.matches(\"[0-9]{12}\")) {\n            return \"ID number illegal\";\n        }\n\n        // Extract and validate parts of the ID number\n        int part1 = Integer.parseInt(idNumber.substring(0, 4));\n        int part2 = Integer.parseInt(idNumber.substring(4, 8));\n        int part3 = Integer.parseInt(idNumber.substring(8, 12));\n\n        if (part1 < 1 || part1 > 1237 || part2 < 20 || part2 > 460 || part3 / 10 < 0 || part3 / 10 > 100) {\n            return \"ID number illegal\";\n        }\n\n        // Check if the last digit of ID number matches the gender\n        int lastDigit = part3 % 10;\n        if ((gender.equals(\"M\") && lastDigit != 1) || (gender.equals(\"F\") && lastDigit != 0) || (gender.equals(\"O\") && lastDigit != 2)) {\n            return \"ID number illegal\";\n        }\n\n        // Check if ID number already registered\n        if (registeredIds.contains(idNumber)) {\n            return \"ID number exist\";\n        }\n\n        // All checks passed, add user\n        User newUser = new User(name, gender.charAt(0), idNumber);\n        registeredIds.add(idNumber);\n\n        // Return formatted user information\n        return newUser.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        UserManager userManager = new UserManager();\n\n        // Example usage\n        System.out.println(userManager.addUser(\"LaoWang\", \"M\", \"003005001010\")); // ID number illegal\n        System.out.println(userManager.addUser(\"LaoWang\", \"M\", \"002301220991\")); // Name:LaoWang\\nSex:M\\nID:002301220991\n        System.out.println(userManager.addUser(\"HaiWang\", \"M\", \"002301220991\")); // ID number exist\n    }\n}\n\n```"}
{"_id": 189, "response": "```java\nimport java.io.IOException;\nimport java.nio.file.FileAlreadyExistsException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class CopyFile {\n    public static void copyAndMoveFile(String sourcePath, String destinationDirectory) {\n        // 获取源文件的文件名\n        Path sourceFilePath = Paths.get(sourcePath);\n        String fileName = sourceFilePath.getFileName().toString();\n\n        // 构建目标路径\n        Path destinationPath = Paths.get(destinationDirectory, fileName);\n\n        try {\n            // 检查源文件是否存在\n            if (Files.exists(sourceFilePath)) {\n                // 复制文件\n                Files.copy(sourceFilePath, destinationPath);\n            } else {\n                System.out.println(\"File not exist.\");\n            }\n        } catch (FileAlreadyExistsException e) {\n            System.out.println(e.getMessage());\n        } catch (IOException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        // 例子\n        String sourceFilePath = \"C:\\\\Users\\\\jieman\\\\Desktop\\\\json\\\\aaaa.py\";\n        String destinationDirectory = \"C:\\\\Users\\\\jieman\\\\Desktop\\\\MFGRN\";\n\n        copyAndMoveFile(sourceFilePath, destinationDirectory);\n    }\n}\n```"}
{"_id": 190, "response": "```java\nimport java.util.ArrayDeque;\nimport java.util.Deque;\n\nclass LongestPath {\n    public int lengthLongestPath(String input) {\n        int n = input.length();\n        int pos = 0;\n        int ans = 0;\n        Deque<Integer> stack = new ArrayDeque<Integer>();\n        while (pos < n) {\n            /* 检测当前文件的深度 */\n            int depth = 1;\n            while (pos < n && input.charAt(pos) == '\\t') {\n                pos++;\n                depth++;\n            }\n            /* 统计当前文件名的长度 */\n            boolean isFile = false;\n            int len = 0;\n            while (pos < n && input.charAt(pos) != '\\n') {\n                if (input.charAt(pos) == '.') {\n                    isFile = true;\n                }\n                len++;\n                pos++;\n            }\n            /* 跳过当前的换行符 */\n            pos++;\n            while (stack.size() >= depth) {\n                stack.pop();\n            }\n            if (!stack.isEmpty()) {\n                len += stack.peek() + 1;\n            }\n            if (isFile) {\n                ans = Math.max(ans, len);\n            } else {\n                stack.push(len);\n            }\n        }\n        return ans;\n    }\n}\n```"}
{"_id": 191, "response": "```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class ValidPassword {\n    public static boolean isValidPassword(String password) {\n        String passwordRegex = \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\\\S+$).{8,}$\";\n        Pattern pattern = Pattern.compile(passwordRegex);\n        Matcher matcher = pattern.matcher(password);\n        return matcher.matches();\n    }\n\n    public static void main(String[] args) {\n        String password = \"Example@123\";\n        System.out.println(\"Is the password valid? \" + isValidPassword(password));\n    }\n}\n```"}
{"_id": 192, "response": "```java\n/*\n创建一个名为LinearRegressionLoss的java类，编写三个静态方法用于计算线性回归中常用的三种损失函数均方误差，平均绝对误差和Huber损失，并在main方法中手动生成数据，调用这三个方法计算相应的损失，并输出相应的计算结果。\n*/\npublic class LinearRegressionLoss {\n\n    // Mean Squared Error (MSE)\n    public static double calculateMSE(double[] actual, double[] predicted) {\n        if (actual.length != predicted.length) {\n            throw new IllegalArgumentException(\"Input arrays must have the same length\");\n        }\n\n        double sumSquaredError = 0.0;\n\n        for (int i = 0; i < actual.length; i++) {\n            double error = actual[i] - predicted[i];\n            sumSquaredError += Math.pow(error, 2);\n        }\n\n        return sumSquaredError / actual.length;\n    }\n\n    // Mean Absolute Error (MAE)\n    public static double calculateMAE(double[] actual, double[] predicted) {\n        if (actual.length != predicted.length) {\n            throw new IllegalArgumentException(\"Input arrays must have the same length\");\n        }\n\n        double sumAbsoluteError = 0.0;\n\n        for (int i = 0; i < actual.length; i++) {\n            double error = Math.abs(actual[i] - predicted[i]);\n            sumAbsoluteError += error;\n        }\n\n        return sumAbsoluteError / actual.length;\n    }\n\n    // Huber Loss\n    public static double calculateHuberLoss(double[] actual, double[] predicted, double delta) {\n        if (actual.length != predicted.length) {\n            throw new IllegalArgumentException(\"Input arrays must have the same length\");\n        }\n\n        double sumHuberLoss = 0.0;\n\n        for (int i = 0; i < actual.length; i++) {\n            double error = Math.abs(actual[i] - predicted[i]);\n            if (error <= delta) {\n                sumHuberLoss += 0.5 * Math.pow(error, 2);\n            } else {\n                sumHuberLoss += delta * (error - 0.5 * delta);\n            }\n        }\n\n        return sumHuberLoss / actual.length;\n    }\n\n    public static void main(String[] args) {\n        // Sample data\n        double[] actual = {3.0, 5.0, 7.0, 9.0, 11.0};\n        double[] predicted = {2.5, 5.5, 7.5, 8.5, 10.5};\n\n        // Calculate MSE\n        double mse = calculateMSE(actual, predicted);\n        System.out.println(\"Mean Squared Error (MSE): \" + mse);\n\n        // Calculate MAE\n        double mae = calculateMAE(actual, predicted);\n        System.out.println(\"Mean Absolute Error (MAE): \" + mae);\n\n        // Calculate Huber Loss with delta = 1.0\n        double delta = 1.0;\n        double huberLoss = calculateHuberLoss(actual, predicted, delta);\n        System.out.println(\"Huber Loss (delta = \" + delta + \"): \" + huberLoss);\n    }\n}\n\n\n\n\n\n\n```"}
{"_id": 193, "response": "```java\n/*\n对于java中time包的考察\n编写一个Java程序来计算两个日期之间的间隔。给定两个字符串格式的日期（\"2023-03-15\"和\"2023-04-14\"），计算它们之间的完整天数差。程序应能处理不同年份和闰年。\n*/\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.temporal.ChronoUnit;\n\npublic class DaysBetweenDates {\n\n    public static long calculateDaysBetweenDates(String date1, String date2) {\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n        LocalDate startDate = LocalDate.parse(date1, formatter);\n        LocalDate endDate = LocalDate.parse(date2, formatter);\n\n        return ChronoUnit.DAYS.between(startDate, endDate);\n    }\n\n    public static void main(String[] args) {\n        String date1 = \"2023-03-15\";\n        String date2 = \"2023-04-14\";\n\n        long days = calculateDaysBetweenDates(date1, date2);\n        System.out.println(\"Days between dates: \" + days);\n    }\n}\n\n```"}
{"_id": 194, "response": "```java\n/*\n创建一个名为 GameItem 的类，包含属性：道具名称、类型、数量。分别是String, String, int类型。\n创建一个名为 Inventory 的类，用于管理游戏道具。它应该能够添加道具、删除道具、查找道具，列出道具。\n函数名分别为：addItem(GameItem item)，removeItem(String itemName)，findItem(String itemName)，listItems()\n在main函数中测试GameItem和Inventory类，比如先新建两个gameitem并添加到inventory里面，然后listItems()，然后去寻找其中一个item，使用findItem函数。随后移除一个gameitem，然后再次listItems()。\n*/\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass GameItem {\n    private String name;\n    private String type;\n    private int quantity;\n\n    public GameItem(String name, String type, int quantity) {\n        this.name = name;\n        this.type = type;\n        this.quantity = quantity;\n    }\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n\n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n\n    @Override\n    public String toString() {\n        return \"GameItem{\" +\n                \"name='\" + name + '\\'' +\n                \", type='\" + type + '\\'' +\n                \", quantity=\" + quantity +\n                '}';\n    }\n}\n\nclass Inventory {\n    List<GameItem> items;\n\n    public Inventory() {\n        this.items = new ArrayList<>();\n    }\n\n    public void addItem(GameItem item) {\n        this.items.add(item);\n    }\n\n    public void removeItem(String itemName) {\n        this.items.removeIf(item -> item.getName().equals(itemName));\n    }\n\n    public GameItem findItem(String itemName) {\n        return this.items.stream()\n                .filter(item -> item.getName().equals(itemName))\n                .findFirst()\n                .orElse(null);\n    }\n\n    public void listItems() {\n        for (GameItem item : items) {\n            System.out.println(item);\n        }\n    }\n}\n\npublic class q10 {\n    public static void main(String[] args) {\n        Inventory inventory = new Inventory();\n        inventory.addItem(new GameItem(\"Sword\", \"Weapon\", 1));\n        inventory.addItem(new GameItem(\"Potion\", \"Health\", 5));\n\n        System.out.println(\"Inventory after adding items:\");\n        inventory.listItems();\n\n        GameItem foundItem = inventory.findItem(\"Potion\");\n        if (foundItem != null) {\n            System.out.println(\"Found item: \" + foundItem);\n        }\n\n        inventory.removeItem(\"Sword\");\n        System.out.println(\"Inventory after removing the sword:\");\n        inventory.listItems();\n    }\n}\n\n\n```"}
{"_id": 195, "response": "```java\n\npublic class MaxLCMGCD {\n\n    // 计算最大公约数（GCD）\n    public static int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n    // 计算最小公倍数（LCM）\n    public static long lcm(int a, int b) {\n        return (long) a / gcd(a, b) * b;\n    }\n\n    // 找出最大的 lcm(a, b) - gcd(a, b)\n    public static long maxLCMMinusGCD(int n) {\n        if (n == 1) return 0;\n        int a = n;\n        int b = n - 1;\n        return lcm(a, b) - gcd(a, b);\n    }\n\n    public static void main(String[] args) {\n        int n = 10; // 示例输入\n        System.out.println(\"Maximum of lcm(a, b) - gcd(a, b) is: \" + maxLCMMinusGCD(n));\n    }\n}\n\n```"}
{"_id": 196, "response": "```java\n/*\n模拟报文的发送端和接收端，在接收到发送端的传输报文后，进行哈夫曼编码压缩，形成编码后报文并发送出去，然后再接收端进行解码，还原内容并打印显示出报文内容\n*/\nimport java.util.*;\n\npublic class Huffman {\n    //内部类 二叉树节点\n    private static class TreeNode {\n        public TreeNode() { }\n        public TreeNode(Character ch, int val, int freq, TreeNode left, TreeNode right) {\n            this.ch = ch;\n            this.val = val;\n            this.freq = freq;\n            this.left = left;\n            this.right = right;\n        }\n        Character ch;\n        int val;\n        int freq;\n        TreeNode left;\n        TreeNode right;\n    }\n    static String encodeStr = \"\";\n    static Map<Character,String> encodeMap = null;\n\n    public static void main(String[] args) {\n        Scanner scan=new Scanner(System.in);\n        String s = scan.nextLine();\n        System.out.println(\"要发送的消息为：\"+s);\n\n        //开始发送内容\n        send(s);\n\n        System.out.println(\"编码表：\");\n        for(Map.Entry<Character,String> e:encodeMap.entrySet()){\n            System.out.println(e.getKey()+\":\"+e.getValue());\n        }\n        System.out.println(\"编码后：\"+encodeStr);\n\n        //接收方解码\n        String decodeStr = recv();\n        System.out.println(\"接收方解码后:\"+decodeStr);\n    }\n    public static  void send (String s){\n        Object[] encodeRes = encode(s);\n        encodeStr = (String)encodeRes[0];\n        encodeMap = (Map<Character, String>)encodeRes[1];\n    }\n    public static String recv(){\n        return decode(encodeStr,encodeMap);\n    }\n\n    //编码方法，返回Object[]，大小为2,Objec[0]为编码后的字符串，Object[1]为编码对应的码表\n    public static Object[] encode(String s){\n        Object[]res= new Object[2];\n        Map<Character,String> encodeMap = new HashMap<Character, String>();\n        TreeNode tree = constructTree(s);\n        findPath(tree, encodeMap, new StringBuilder());\n        findPath(tree, encodeMap, new StringBuilder());\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<s.length();i++){\n            String tmp = encodeMap.get(s.charAt(i));\n            sb.append(tmp);\n        }\n        res[0]=sb.toString();\n        res[1] = encodeMap;\n        return res;\n\n    }\n\n    /*\n     * 根据字符串建立二叉树\n     * @param s：要编码的源字符串\n     */\n    private static TreeNode constructTree(String s) {\n        if (s == null || s.equals(\"\")) {\n            return null;\n        }\n        //计算每个字母的词频，放到Map中\n        Map<Character, Integer> dataMap = new HashMap<Character, Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            Character c = s.charAt(i);\n            if (dataMap.containsKey(c)) {\n                int count = dataMap.get(c);\n                dataMap.put(c, count + 1);\n            } else {\n                dataMap.put(c, 1);\n            }\n        }\n        //遍历dataMap,初始化二叉树节点，并将所有初始化后的节点放到nodeList中，并进行排序\n        LinkedList<TreeNode> nodeList = new LinkedList<TreeNode>();\n        for (Map.Entry<Character, Integer> entry : dataMap.entrySet()) {\n            Character ch = entry.getKey();\n            int freq = entry.getValue();\n            int val = 0;\n            TreeNode tmp = new TreeNode(ch,val,freq,null,null);\n            nodeList.add(tmp);\n        }\n        //对存放节点的链表进行排序，方便后续进行组合\n        Collections.sort(nodeList, new Comparator<TreeNode>() {\n            public int compare(TreeNode t1, TreeNode t2) {\n                return t1.freq-t2.freq;\n            }\n        });\n\n        //size==1,代表字符串只包含一种类型的字母\n        if(nodeList.size()==1){\n            TreeNode t = nodeList.get(0);\n            return new TreeNode(null,0,nodeList.get(0).freq,t,null);\n        }\n\n        //利用排序好的节点建立二叉树，root为初始化根节点\n        TreeNode root = null;\n        while(nodeList.size()>0){\n            //因为nodeList在前面已经排好序，所以直接取出前两个节点，他们的和肯定为最小\n            TreeNode t1 = nodeList.removeFirst();\n            TreeNode t2 = nodeList.removeFirst();\n            //左子树的val赋值为0，右子树的val赋值为1\n            t1.val = 0;\n            t2.val = 1;\n            //将取出的两个节点进行合并\n            if(nodeList.size()==0){\n                //此时代表所有节点合并完毕，返回结果\n                root = new TreeNode(null,0,t1.freq+t2.freq,t1,t2);\n            }else {\n                //此时代表还有可以合并的节点\n                TreeNode tmp = new TreeNode(null,0,t1.freq+t2.freq,t1,t2);\n\n                //t1、t2合并后，需要将得到的新节点加入到原链表中，继续与其他节点合并，\n                //此时需要保证原链表的有序性，需要进行排序\n                if(tmp.freq>nodeList.getLast().freq){\n                    nodeList.addLast(tmp);\n                }else {\n                    for(int i=0;i<nodeList.size();i++){\n                        int tmpFreq = tmp.freq;\n                        if(tmpFreq<= nodeList.get(i).freq){\n                            nodeList.add(i,tmp);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        //返回建立好的二叉树根节点\n        return root;\n    }\n\n    //对已经建立好的二叉树进行遍历，得到每个字符的编码\n    private static void findPath(TreeNode root, Map<Character,String> res, StringBuilder path) {\n        if (root == null){\n            return;\n        }\n        if (root.left == null && root.right == null) {\n            path.append(root.val);\n            res.put(root.ch,path.substring(1));\n            path.deleteCharAt(path.length() - 1);\n            return;\n        }\n        path.append(root.val);\n        if (root.left != null) findPath(root.left, res, path);\n        if (root.right != null) findPath(root.right, res, path);\n        path.deleteCharAt(path.length() - 1);\n    }\n\n    //对字符串进行解码，解码时需要编码码表\n    public static String decode(String encodeStr,Map<Character,String> encodeMap){\n        StringBuilder decodeStr = new StringBuilder();\n        while(encodeStr.length()>0){\n            for(Map.Entry<Character,String> e: encodeMap.entrySet()){\n                String charEncodeStr = e.getValue();\n                if(encodeStr.startsWith(charEncodeStr)){\n                    decodeStr.append(e.getKey());\n                    encodeStr = encodeStr.substring(charEncodeStr.length());\n                    break;\n                }\n            }\n        }\n        return decodeStr.toString();\n    }\n\n}\n\n\n```"}
{"_id": 197, "response": "```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class ValidEmail {\n    public static boolean isValidEmail(String email) {\n        String emailRegex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\n        Pattern pattern = Pattern.compile(emailRegex);\n        Matcher matcher = pattern.matcher(email);\n        return matcher.matches();\n    }\n\n    public static void main(String[] args) {\n        String email = \"example@example.com\";\n        System.out.println(\"Is the email valid? \" + isValidEmail(email));\n    }\n}\n\n\n```"}
{"_id": 198, "response": "```java\n/*\n异常检测的问题：考察对Exception的重写。\n创建一个简单的银行账户类 BankAccount，其中包含一个处理取款操作的方法。这个方法应该能够检测和抛出异常，比如当账户余额不足时。\n\n创建一个名为BankAccount的类，包含属性：账户余额。\n在BankAccount类中，实现一个withdraw方法，该方法接受一个取款金额参数。\n如果取款金额大于账户余额，方法应抛出一个自定义的异常 InsufficientFundsException。\n在 main 函数中，创建一个 BankAccount 对象，先往里面存500，然后取600，看看是否会调用到实现好的InsufficientFundsException并打印其报错信息。\n*/\nclass InsufficientFundsException extends Exception {\n    public InsufficientFundsException(String message) {\n        super(message);\n    }\n}\n\nclass BankAccount {\n    private double balance;\n\n    public BankAccount(double balance) {\n        this.balance = balance;\n    }\n\n    public void withdraw(double amount) throws InsufficientFundsException {\n        if (amount > balance) {\n            throw new InsufficientFundsException(\"Insufficient funds for withdrawal\");\n        }\n        balance -= amount;\n        System.out.println(\"Withdrawal successful. Remaining balance: \" + balance);\n    }\n}\n\npublic class q13 {\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount(500.0);\n\n        try {\n            account.withdraw(600.0);\n        } catch (InsufficientFundsException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n```"}
{"_id": 199, "response": "```java\n/*\n请使用StringBuilder和StringBuffer，创建一个简单的Markdown解析器，它能够将特定的Markdown语法转换为HTML。你的任务是处理以下Markdown特性：\n\n# 开头的行转换为 <h1> 标签。\n## 开头的行转换为 <h2> 标签。\n* 开头的行（后跟空格）转换为 <li> 标签（列表项）。\n文本行（不符合上述情况）转换为 <p> 标签。\n注意，Markdown语法规定，每个标记（如#，##，*）后必须紧跟一个空格。\n\n输入：\n# Header 1\nThis is a paragraph.\n## Header 2\n* List item 1\n* List item 2\n\n输出：\n<h1>Header 1</h1>\n<p>This is a paragraph.</p>\n<h2>Header 2</h2>\n<ul>\n<li>List item 1</li>\n<li>List item 2</li>\n</ul>\n*/\nimport java.util.StringTokenizer;\n\npublic class MarkdownToHTML {\n    public static String parseMarkdown(String markdown) {\n        StringBuilder html = new StringBuilder();\n        StringTokenizer tokenizer = new StringTokenizer(markdown, \"\\n\");\n        boolean processingList = false;\n\n        while (tokenizer.hasMoreTokens()) {\n            String line = tokenizer.nextToken();\n\n            if (line.startsWith(\"# \")) {\n                if (processingList) {\n                    html.append(\"</ul>\\n\");\n                    processingList = false;\n                }\n                html.append(\"<h1>\").append(line.substring(2)).append(\"</h1>\\n\");\n            }\n            else if (line.startsWith(\"## \")) {\n                if (processingList) {\n                    html.append(\"</ul>\\n\");\n                    processingList = false;\n                }\n                html.append(\"<h2>\").append(line.substring(3)).append(\"</h2>\\n\");\n            }\n            else if (line.startsWith(\"* \")) {\n                if (!processingList) {\n                    html.append(\"<ul>\\n\");\n                    processingList = true;\n                }\n                html.append(\"<li>\").append(line.substring(2)).append(\"</li>\\n\");\n            }\n            else {\n                if (processingList) {\n                    html.append(\"</ul>\\n\");\n                    processingList = false;\n                }\n                html.append(\"<p>\").append(line).append(\"</p>\\n\");\n            }\n        }\n\n        // Close the ul tag at the end of the document if necessary\n        if (processingList) {\n            html.append(\"</ul>\\n\");\n            processingList = false;\n        }\n\n        return html.toString();\n    }\n\n    public static void main(String[] args) {\n        String markdown = \"# Header 1\\nThis is a paragraph.\\n## Header 2\\n* List item 1\\n* List item 2\";\n        String html = parseMarkdown(markdown);\n        System.out.println(html);\n    }\n}\n```"}
{"_id": 200, "response": "```java\npublic class MyString {\n    private String value;\n\n    public MyString(String value) {\n        this.value = value;\n    }\n\n    public String trim() {\n        return value.trim();\n    }\n\n    public String[] split(String separator, int N) {\n        // 检查N的值，如果N=-1，则不限制切分次数\n        if (N == -1) {\n            return value.split(separator);\n        } else {\n            return value.split(separator, N + 1);\n        }\n    }\n\n    // 为了支持String类的其他所有操作，可以提供一个方法获取内部的String\n    public String getValue() {\n        return value;\n    }\n\n    // 示例：其他String类的方法代理实现，例如length()\n    public int length() {\n        return value.length();\n    }\n\n}\n\n// 使用示例\nclass TestMyString {\n    public static void main(String[] args) {\n        MyString s = new MyString(\"  hello, ann, how are you doing?  \");\n        System.out.println(\"Trimmed string: '\" + s.trim() + \"'\");\n\n        MyString s2 = new MyString(\"hello, ann, how are you doing?\");\n        String[] splitUnlimited = s2.split(\",\", -1);\n        System.out.println(\"Split without limit:\");\n        for (String str : splitUnlimited) {\n            System.out.println(\"'\" + str.trim() + \"'\");\n        }\n\n        String[] splitOnce = s2.split(\",\", 1);\n        System.out.println(\"Split once:\");\n        for (String str : splitOnce) {\n            System.out.println(\"'\" + str.trim() + \"'\");\n        }\n    }\n}\n```"}
