{"_id": 131, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nClassroom Exercise: Design a static method that accepts an array, each member of which is a single-digit integer (between 8 and 9), and this method can return a string containing these numbers in the form of a phone number. For example:\n createPhoneNumber ( new int []{1,2,3,4,5,6,7,8,9,0})//=> returns \"(123) 456-7890\"\nNote: Don't forget the space after the right parenthesis!\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testCreatePhoneNumber1() {\n        assertEquals(\"(123) 456-7890\", PhoneNumberCreator.createPhoneNumber(new int[]{1,2,3,4,5,6,7,8,9,0}));\n    }\n}", "problem": "Classroom Exercise: Design a static method that accepts an array, each member of which is a single-digit integer (between 8 and 9), and this method can return a string containing these numbers in the form of a phone number. For example:\n createPhoneNumber ( new int []{1,2,3,4,5,6,7,8,9,0})//=> returns \"(123) 456-7890\"\nNote: Don't forget the space after the right parenthesis!", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass PhoneNumberCreatorTest {\n    @Test\n    void testCreatePhoneNumber2() {\n        assertEquals(\"(987) 654-3210\", PhoneNumberCreator.createPhoneNumber(new int[]{9,8,7,6,5,4,3,2,1,0}));\n    }\n\n    @Test\n    void testCreatePhoneNumber3() {\n        assertEquals(\"(111) 111-1111\", PhoneNumberCreator.createPhoneNumber(new int[]{1,1,1,1,1,1,1,1,1,1}));\n    }\n\n    @Test\n    void testCreatePhoneNumber4() {\n        assertEquals(\"(999) 999-9999\", PhoneNumberCreator.createPhoneNumber(new int[]{9,9,9,9,9,9,9,9,9,9}));\n    }\n\n    @Test\n    void testCreatePhoneNumber5() {\n        assertEquals(\"(123) 456-7890\", PhoneNumberCreator.createPhoneNumber(new int[]{1,2,3,4,5,6,7,8,9,0}));\n    }\n\n    @Test\n    void testCreatePhoneNumber6() {\n        assertEquals(\"(000) 000-0000\", PhoneNumberCreator.createPhoneNumber(new int[]{0,0,0,0,0,0,0,0,0,0}));\n    }\n\n    //boundary cases\n    @Test\n    void testCreatePhoneNumber7() {\n        assertEquals(\"(123) 456-7890\", PhoneNumberCreator.createPhoneNumber(new int[]{1,2,3,4,5,6,7,8,9,0}));\n    }\n\n    @Test\n    void testCreatePhoneNumber8() {\n        assertEquals(\"(000) 000-0000\", PhoneNumberCreator.createPhoneNumber(new int[]{0,0,0,0,0,0,0,0,0,0}));\n    }\n\n    @Test\n    void testCreatePhoneNumber9() {\n        assertEquals(\"(999) 999-9999\", PhoneNumberCreator.createPhoneNumber(new int[]{9,9,9,9,9,9,9,9,9,9}));\n    }\n\n    @Test\n    void testCreatePhoneNumber10() {\n        assertEquals(\"(123) 456-7890\", PhoneNumberCreator.createPhoneNumber(new int[]{1,2,3,4,5,6,7,8,9,0}));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\npublic class PhoneNumberCreator {\n    public static String createPhoneNumber(int[] numbers) {\n        StringBuilder phoneNumber = new StringBuilder(\"(\");\n        for (int i = 0; i < numbers.length; i++) {\n            if (i == 3) {\n                phoneNumber.append(\") \");\n            } else if (i == 6) {\n                phoneNumber.append(\"-\");\n            }\n            phoneNumber.append(numbers[i]);\n        }\n        return phoneNumber.toString();\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 132, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nQuestion: One of the features of our company's product is that doctors and patients can send messages to each other. Now we need to calculate the back and forth conversation between a certain doctor and a certain patient. The definition of back and forth is that one party sends a message, and the other party needs to reply to count as one back and forth. For example: Assume that the message sent by the doctor is represented by 'a', and the message sent by the patient is represented by 'b'. According to the definition, 'ab' counts as one back and forth, 'abb', 'aba', 'aab', 'aabb' also count as one back and forth, 'abab', 'abba', 'abbba' count as two back and forth.\nExpectation: Implement a complete method in Java, the input is the conversation list of a certain doctor and a certain patient (structure is self-defined), the output is the number of back and forth conversations; the code should be clear in thought, rigorous in logic, and have boundary value judgment.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testCountConversationTurns1() {\n        List<Conversation> conversations = Arrays.asList(\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\")\n        );\n        assertEquals(3, ConversationCounter.countConversationTurns(conversations, \"doctor\", \"patient\"));\n    }\n}", "problem": "Question: One of the features of our company's product is that doctors and patients can send messages to each other. Now we need to calculate the back and forth conversation between a certain doctor and a certain patient. The definition of back and forth is that one party sends a message, and the other party needs to reply to count as one back and forth. For example: Assume that the message sent by the doctor is represented by 'a', and the message sent by the patient is represented by 'b'. According to the definition, 'ab' counts as one back and forth, 'abb', 'aba', 'aab', 'aabb' also count as one back and forth, 'abab', 'abba', 'abbba' count as two back and forth.\nExpectation: Implement a complete method in Java, the input is the conversation list of a certain doctor and a certain patient (structure is self-defined), the output is the number of back and forth conversations; the code should be clear in thought, rigorous in logic, and have boundary value judgment.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass ConversationTest {\n    @Test\n    void testCountConversationTurns2() {\n        List<Conversation> conversations = Arrays.asList(\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\")\n        );\n        assertEquals(5, ConversationCounter.countConversationTurns(conversations, \"doctor\", \"patient\"));\n    }\n\n    @Test\n    void testCountConversationTurns3() {\n        List<Conversation> conversations = Arrays.asList(\n                new Conversation(\"doctor\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\")\n        );\n        assertEquals(1, ConversationCounter.countConversationTurns(conversations, \"doctor\", \"patient\"));\n    }\n\n    @Test\n    void testCountConversationTurns4() {\n        List<Conversation> conversations = Arrays.asList(\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"doctor\")\n        );\n        assertEquals(6, ConversationCounter.countConversationTurns(conversations, \"doctor\", \"patient\"));\n    }\n\n    @Test\n    void testCountConversationTurns5() {\n        List<Conversation> conversations = Arrays.asList(\n                new Conversation(\"doctor\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"doctor\")\n        );\n        assertEquals(0, ConversationCounter.countConversationTurns(conversations, \"doctor\", \"patient\"));\n    }\n\n    @Test\n    void testCountConversationTurns6() {\n        List<Conversation> conversations = Arrays.asList(\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\")\n        );\n        assertEquals(0, ConversationCounter.countConversationTurns(conversations, \"doctor\", \"patient\"));\n    }\n\n    // boundary cases\n    @Test\n    void testCountConversationTurns7() {\n        List<Conversation> conversations = Arrays.asList(\n                new Conversation(\"doctor\")\n        );\n        assertEquals(0, ConversationCounter.countConversationTurns(conversations, \"doctor\", \"patient\"));\n    }\n\n    @Test\n    void testCountConversationTurns8() {\n        List<Conversation> conversations = Arrays.asList(\n                new Conversation(\"patient\")\n        );\n        assertEquals(0, ConversationCounter.countConversationTurns(conversations, \"doctor\", \"patient\"));\n    }\n\n    @Test\n    void testCountConversationTurns9() {\n        List<Conversation> conversations = Arrays.asList();\n        assertEquals(0, ConversationCounter.countConversationTurns(conversations, \"doctor\", \"patient\"));\n    }\n\n    @Test\n    void testCountConversationTurns10() {\n        List<Conversation> conversations = null;\n        assertEquals(0, ConversationCounter.countConversationTurns(conversations, \"doctor\", \"patient\"));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class Conversation {\n    private String sender; // 发送者\n\n    public Conversation(String sender) {\n        this.sender = sender;\n    }\n\n    public String getSender() {\n        return sender;\n    }\n}\n\npublic class ConversationCounter {\n    public static int countConversationTurns(List<Conversation> conversations, String doctor, String patient) {\n        if (conversations == null || conversations.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        String lastSender = conversations.get(0).getSender();\n        for (Conversation conversation : conversations) {\n            String currentSender = conversation.getSender();\n            if (!currentSender.equals(lastSender)) {\n                count++;\n                lastSender = currentSender;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        List<Conversation> conversations = Arrays.asList(\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\")\n        );\n\n        System.out.println(countConversationTurns(conversations, \"doctor\", \"patient\")); // 输出：3\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 133, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nI want to extract the first letter or English string that appears after the two characters \"order\" from this string, \"All closed pending payment transaction successful order number: 100e863a2b86402a881b62abee3e337e transaction successful customer account number: 13422344170 product name: Agent Butler ¥200.00\". Please implement it with Java's regular expression.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n\n    @Test\n    void testBasic() {\n        assertEquals(\"e\", Main.findFirstAlphabeticStringAfterOrder(\"订单号: e123456\"));\n    }\n}", "problem": "I want to extract the first letter or English string that appears after the two characters \"order\" from this string, \"All closed pending payment transaction successful order number: 100e863a2b86402a881b62abee3e337e transaction successful customer account number: 13422344170 product name: Agent Butler ¥200.00\". Please implement it with Java's regular expression.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass MainTest {\n    @Test\n    void testNoOrderKeyword() {\n        assertNull(Main.findFirstAlphabeticStringAfterOrder(\"没有订单关键字\"));\n    }\n\n    @Test\n    void testOrderWithoutAlphabeticString() {\n        assertNull(Main.findFirstAlphabeticStringAfterOrder(\"订单号: 123456\"));\n    }\n\n    @Test\n    void testEmptyString() {\n        assertNull(Main.findFirstAlphabeticStringAfterOrder(\"\"));\n    }\n\n    @Test\n    void testOnlyOrder() {\n        assertNull(Main.findFirstAlphabeticStringAfterOrder(\"订单\"));\n    }\n\n    @Test\n    void testMultipleAlphabeticStrings() {\n        assertEquals(\"abc\", Main.findFirstAlphabeticStringAfterOrder(\"订单号: abc123def456\"));\n    }\n\n    @Test\n    void testLongString() {\n        assertEquals(\"longString\", Main.findFirstAlphabeticStringAfterOrder(\"订单号: 1234567890longString\"));\n    }\n\n    @Test\n    void testSpecialCharacters() {\n        assertEquals(\"test\", Main.findFirstAlphabeticStringAfterOrder(\"订单号: !@#$%test^&*()\"));\n    }\n\n    @Test\n    void testAllAlphabeticString() {\n        assertEquals(\"AllAlphabetic\", Main.findFirstAlphabeticStringAfterOrder(\"订单AllAlphabetic\"));\n    }\n\n    @Test\n    void testMixedCharacters() {\n        assertEquals(\"Mixed\", Main.findFirstAlphabeticStringAfterOrder(\"订单123!@#Mixed%^&*\"));\n    }\n}\n", "setup_code": "", "reference_solution": "```java\n\nimport java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n\npublic class Main {\n    public static void main(String[] args) {\n        String text = \"全部已关闭待支付交易成功订单号: 100e863a2b86402a881b62abee3e337e交易成功客户账号: 13422344170产品名称:代服管家￥200.00\";\n        String result = findFirstAlphabeticStringAfterOrder(text);\n\n        if (result != null) {\n            System.out.println(\"找到的字符串: \" + result);\n        } else {\n            System.out.println(\"没有找到匹配的字符串\");\n        }\n    }\n\n    public static String findFirstAlphabeticStringAfterOrder(String text) {\n        String regex = \"订单.*?([a-zA-Z]+)\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(text);\n\n        if (matcher.find()) {\n            return matcher.group(1);\n        } else {\n            return null;\n        }\n    }\n}\n\n```", "classification": "Algorithm and Data Structure"}
{"_id": 134, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\n1. In the UserManager class, user management services are provided through ArrayList.\n\n2. Define an ArrayList property 'users' in the UserManager class.\n\n3. Define the following methods in the UserManager class to operate on the users in 'users' (refer to the call method of the UserManager class in the main method for writing):\n\n   (1) Add user method 'addUser', to add a user information to 'users'.\n   \n   (2) Delete user method 'deleteUser', to delete a user information from 'users'.\n   \n   (3) Check if a user exists method 'isExist', to determine whether the user exists in 'users'.\n   \n   (4) Display all user information method 'display': directly output user object information.\n\n3. Run the program directly to display the following results.\n\nThe output result is:\n\nname is: alice\n\nname is: john\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testAddUser() {\n        UserManager userManager = new UserManager();\n        User alice = new User(\"alice\");\n        userManager.addUser(alice);\n        assertTrue(userManager.isExist(alice));\n    }\n}", "problem": "1. In the UserManager class, user management services are provided through ArrayList.\n\n2. Define an ArrayList property 'users' in the UserManager class.\n\n3. Define the following methods in the UserManager class to operate on the users in 'users' (refer to the call method of the UserManager class in the main method for writing):\n\n   (1) Add user method 'addUser', to add a user information to 'users'.\n   \n   (2) Delete user method 'deleteUser', to delete a user information from 'users'.\n   \n   (3) Check if a user exists method 'isExist', to determine whether the user exists in 'users'.\n   \n   (4) Display all user information method 'display': directly output user object information.\n\n3. Run the program directly to display the following results.\n\nThe output result is:\n\nname is: alice\n\nname is: john", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\n\nclass MainTest {\n    @Test\n    void testDeleteUser() {\n        UserManager userManager = new UserManager();\n        User alice = new User(\"alice\");\n        userManager.addUser(alice);\n        userManager.deleteUser(alice);\n        assertFalse(userManager.isExist(alice));\n    }\n\n    @Test\n    void testIsExist() {\n        UserManager userManager = new UserManager();\n        User alice = new User(\"alice\");\n        userManager.addUser(alice);\n        assertTrue(userManager.isExist(alice));\n    }\n\n    @Test\n    void testIsNotExist() {\n        UserManager userManager = new UserManager();\n        User alice = new User(\"alice\");\n        assertFalse(userManager.isExist(alice));\n    }\n\n    @Test\n    void testAddMultipleUsers() {\n        UserManager userManager = new UserManager();\n        User alice = new User(\"alice\");\n        User bob = new User(\"bob\");\n        userManager.addUser(alice);\n        userManager.addUser(bob);\n        assertTrue(userManager.isExist(alice));\n        assertTrue(userManager.isExist(bob));\n    }\n\n    @Test\n    void testDeleteNonExistentUser() {\n        UserManager userManager = new UserManager();\n        User alice = new User(\"alice\");\n        userManager.deleteUser(alice);\n        assertFalse(userManager.isExist(alice));\n    }\n\n    @Test\n    void testAddUserBoundary() {\n        UserManager userManager = new UserManager();\n        User user = new User(\"\");\n        userManager.addUser(user);\n        assertTrue(userManager.isExist(user));\n    }\n\n    @Test\n    void testDeleteUserBoundary() {\n        UserManager userManager = new UserManager();\n        User user = new User(\"\");\n        userManager.addUser(user);\n        userManager.deleteUser(user);\n        assertFalse(userManager.isExist(user));\n    }\n\n    @Test\n    void testIsExistBoundary() {\n        UserManager userManager = new UserManager();\n        User user = new User(\"\");\n        assertFalse(userManager.isExist(user));\n    }\n\n    @Test\n    void testAddMultipleUsersBoundary() {\n        UserManager userManager = new UserManager();\n        for (int i = 0; i < 1000; i++) {\n            User user = new User(\"user\" + i);\n            userManager.addUser(user);\n            assertTrue(userManager.isExist(user));\n        }\n    }\n}", "setup_code": "", "reference_solution": "```java\n\nimport java.util.ArrayList;\n\nclass User {\n    private String name;\n\n    public User(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public String toString() {\n        return \"name is:\" + name;\n    }\n}\n\nclass UserManager {\n    private ArrayList<User> users;\n\n    public UserManager() {\n        users = new ArrayList<>();\n    }\n\n    public void addUser(User user) {\n        users.add(user);\n    }\n\n    public void deleteUser(User user) {\n        users.remove(user);\n    }\n\n    public boolean isExist(User user) {\n        return users.contains(user);\n    }\n\n    public void display() {\n        for (User user : users) {\n            System.out.println(user);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        UserManager userManager = new UserManager();\n        User alice = new User(\"alice\");\n        User john = new User(\"john\");\n        userManager.addUser(alice);\n        userManager.addUser(john);\n        userManager.display();\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 135, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nPlease design a Student class according to the following requirements.\n\nThe requirements are as follows:\n\n\n1) The Student class has five attributes, namely name, userID, math score, Chinese score, and English score.\n\n\n2) Use the concept of encapsulation to privatize all attributes, and provide public access methods to the outside world. It should at least include methods for entering student information, calculating total scores and average scores, and judging the input score values in appropriate methods, only allowing the entry of legal and valid scores (0~100). (Note: The methods for setting and getting each attribute, as well as the constructor, can be defined according to your own class design)\n3) In the main() method, create an instance of Student, and display the relevant information (name, userID, and scores) of the student (you). Please help me write a code.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n@Test\nvoid testStudent1() {\n    Student student = new Student(\"John Doe\", \"123456\", 85.5, 90.0, 88.0);\n    assertEquals(\"John Doe\", student.getName());\n    assertEquals(\"123456\", student.getUserID());\n    assertEquals(85.5, student.getMath());\n    assertEquals(90.0, student.getChinese());\n    assertEquals(88.0, student.getEnglish());\n    assertEquals(263.5, student.getTotalScore());\n    assertEquals(87.83, student.getAverageScore(), 0.01);\n}\n}", "problem": "Please design a Student class according to the following requirements.\n\nThe requirements are as follows:\n\n\n1) The Student class has five attributes, namely name, userID, math score, Chinese score, and English score.\n\n\n2) Use the concept of encapsulation to privatize all attributes, and provide public access methods to the outside world. It should at least include methods for entering student information, calculating total scores and average scores, and judging the input score values in appropriate methods, only allowing the entry of legal and valid scores (0~100). (Note: The methods for setting and getting each attribute, as well as the constructor, can be defined according to your own class design)\n3) In the main() method, create an instance of Student, and display the relevant information (name, userID, and scores) of the student (you). Please help me write a code.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass StudentTest {\n@Test\nvoid testStudent2() {\n    Student student = new Student(\"Jane Doe\", \"654321\", 100.0, 100.0, 100.0);\n    assertEquals(\"Jane Doe\", student.getName());\n    assertEquals(\"654321\", student.getUserID());\n    assertEquals(100.0, student.getMath());\n    assertEquals(100.0, student.getChinese());\n    assertEquals(100.0, student.getEnglish());\n    assertEquals(300.0, student.getTotalScore());\n    assertEquals(100.0, student.getAverageScore());\n}\n\n@Test\nvoid testStudent3() {\n    Student student = new Student(\"Alice\", \"789012\", 0.0, 0.0, 0.0);\n    assertEquals(\"Alice\", student.getName());\n    assertEquals(\"789012\", student.getUserID());\n    assertEquals(0.0, student.getMath());\n    assertEquals(0.0, student.getChinese());\n    assertEquals(0.0, student.getEnglish());\n    assertEquals(0.0, student.getTotalScore());\n    assertEquals(0.0, student.getAverageScore());\n}\n\n@Test\nvoid testStudent4() {\n    Student student = new Student(\"Bob\", \"210987\", 50.0, 50.0, 50.0);\n    assertEquals(\"Bob\", student.getName());\n    assertEquals(\"210987\", student.getUserID());\n    assertEquals(50.0, student.getMath());\n    assertEquals(50.0, student.getChinese());\n    assertEquals(50.0, student.getEnglish());\n    assertEquals(150.0, student.getTotalScore());\n    assertEquals(50.0, student.getAverageScore());\n}\n\n@Test\nvoid testStudent5() {\n    Student student = new Student(\"Charlie\", \"345678\", 75.5, 80.0, 70.0);\n    assertEquals(\"Charlie\", student.getName());\n    assertEquals(\"345678\", student.getUserID());\n    assertEquals(75.5, student.getMath());\n    assertEquals(80.0, student.getChinese());\n    assertEquals(70.0, student.getEnglish());\n    assertEquals(225.5, student.getTotalScore());\n    assertEquals(75.17, student.getAverageScore(), 0.01);\n}\n\n@Test\nvoid testStudent6() {\n    Student student = new Student(\"David\", \"876543\", 60.0, 70.0, 80.0);\n    assertEquals(\"David\", student.getName());\n    assertEquals(\"876543\", student.getUserID());\n    assertEquals(60.0, student.getMath());\n    assertEquals(70.0, student.getChinese());\n    assertEquals(80.0, student.getEnglish());\n    assertEquals(210.0, student.getTotalScore());\n    assertEquals(70.0, student.getAverageScore());\n}\n\n@Test\nvoid testStudent7() {\n    Student student = new Student(\"Eve\", \"109876\", 101.0, 90.0, 80.0);\n    assertEquals(\"Eve\", student.getName());\n    assertEquals(\"109876\", student.getUserID());\n    assertEquals(0.0, student.getMath());\n    assertEquals(90.0, student.getChinese());\n    assertEquals(80.0, student.getEnglish());\n}\n\n@Test\nvoid testStudent8() {\n    Student student = new Student(\"Frank\", \"543210\", 90.0, -10.0, 80.0);\n    assertEquals(\"Frank\", student.getName());\n    assertEquals(\"543210\", student.getUserID());\n    assertEquals(90.0, student.getMath());\n    assertEquals(0.0, student.getChinese());\n    assertEquals(80.0, student.getEnglish());\n}\n\n@Test\nvoid testStudent9() {\n    Student student = new Student(\"Grace\", \"678901\", 90.0, 100.0, 110.0);\n    assertEquals(\"Grace\", student.getName());\n    assertEquals(\"678901\", student.getUserID());\n    assertEquals(90.0, student.getMath());\n    assertEquals(100.0, student.getChinese());\n    assertEquals(0.0, student.getEnglish());\n}\n\n@Test\nvoid testStudent10() {\n    Student student = new Student(\"Hank\", \"234567\", 90.0, 100.0, 80.0);\n    student.setMath(110.0);\n    assertEquals(\"Hank\", student.getName());\n    assertEquals(\"234567\", student.getUserID());\n    assertEquals(90.0, student.getMath());\n    assertEquals(100.0, student.getChinese());\n    assertEquals(80.0, student.getEnglish());\n}\n}", "setup_code": "", "reference_solution": "```java\n\npublic class Student {\n    private String name;\n    private String userID;\n    private double math;\n    private double chinese;\n    private double english;\n\n    public Student(String name, String userID, double math, double chinese, double english) {\n        this.name = name;\n        this.userID = userID;\n        setMath(math);\n        setChinese(chinese);\n        setEnglish(english);\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getUserID() {\n        return userID;\n    }\n\n    public double getMath() {\n        return math;\n    }\n\n    public void setMath(double math) {\n        if(math >= 0 && math <= 100) {\n            this.math = math;\n        } else {\n            System.out.println(\"Invalid math score. It should be between 0 and 100.\");\n        }\n    }\n\n    public double getChinese() {\n        return chinese;\n    }\n\n    public void setChinese(double chinese) {\n        if(chinese >= 0 && chinese <= 100) {\n            this.chinese = chinese;\n        } else {\n            System.out.println(\"Invalid chinese score. It should be between 0 and 100.\");\n        }\n    }\n\n    public double getEnglish() {\n        return english;\n    }\n\n    public void setEnglish(double english) {\n        if(english >= 0 && english <= 100) {\n            this.english = english;\n        } else {\n            System.out.println(\"Invalid english score. It should be between 0 and 100.\");\n        }\n    }\n\n    public double getTotalScore() {\n        return math + chinese + english;\n    }\n\n    public double getAverageScore() {\n        return getTotalScore() / 3;\n    }\n\n    public static void main(String[] args) {\n        Student student = new Student(\"John Doe\", \"123456\", 85.5, 90.0, 88.0);\n        System.out.println(\"Name: \" + student.getName());\n        System.out.println(\"UserID: \" + student.getUserID());\n        System.out.println(\"Math Score: \" + student.getMath());\n        System.out.println(\"Chinese Score: \" + student.getChinese());\n        System.out.println(\"English Score: \" + student.getEnglish());\n        System.out.println(\"Total Score: \" + student.getTotalScore());\n        System.out.println(\"Average Score: \" + student.getAverageScore());\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 136, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nDescription:\nToDoList is a user task list application. Users can view, add, and delete task items through this program. ToDoList contains a fixed number of task entries, a total of 10. When there are less than 10 tasks, it displays blank.\n\nRequirements:\n1. Create a class Task to represent a task item. Task includes two attributes: name and deadline.\n2. Create a class Model to represent the 10 task list data (i.e., 10 Tasks) in ToDoList.\n3. Create a class Controller to control the execution of other codes, including viewing, adding, and deleting task items.\n4. Create a main method to test the three functions of viewing, adding, and deleting in sequence.\n\nWrite in Java.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testAddTask() {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n        controller.addTask(\"Task 1\", new Date());\n        assertEquals(\"Task 1\", model.tasks.get(0).name);\n    }\n}", "problem": "Description:\nToDoList is a user task list application. Users can view, add, and delete task items through this program. ToDoList contains a fixed number of task entries, a total of 10. When there are less than 10 tasks, it displays blank.\n\nRequirements:\n1. Create a class Task to represent a task item. Task includes two attributes: name and deadline.\n2. Create a class Model to represent the 10 task list data (i.e., 10 Tasks) in ToDoList.\n3. Create a class Controller to control the execution of other codes, including viewing, adding, and deleting task items.\n4. Create a main method to test the three functions of viewing, adding, and deleting in sequence.\n\nWrite in Java.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.*;\n\nclass MainTest {\n    @Test\n    void testAddMultipleTasks() {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n        controller.addTask(\"Task 1\", new Date());\n        controller.addTask(\"Task 2\", new Date());\n        assertEquals(\"Task 1\", model.tasks.get(0).name);\n        assertEquals(\"Task 2\", model.tasks.get(1).name);\n    }\n\n    @Test\n    void testDeleteTask() {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n        controller.addTask(\"Task 1\", new Date());\n        controller.deleteTask(\"Task 1\");\n        assertNull(model.tasks.get(0));\n    }\n\n    @Test\n    void testDeleteNonExistentTask() {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n        controller.deleteTask(\"Task 1\");\n        assertNull(model.tasks.get(0));\n    }\n\n    @Test\n    void testAddAndDeleteTask() {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n        controller.addTask(\"Task 1\", new Date());\n        controller.deleteTask(\"Task 1\");\n        controller.addTask(\"Task 2\", new Date());\n        assertEquals(\"Task 2\", model.tasks.get(0).name);\n    }\n\n    @Test\n    void testAddMoreThanTenTasks() {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n        for (int i = 0; i < 11; i++) {\n            controller.addTask(\"Task \" + i, new Date());\n        }\n        assertEquals(\"Task 9\", model.tasks.get(9).name);\n    }\n\n    @Test\n    void testDeleteTaskFromFullList() {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n        for (int i = 0; i < 10; i++) {\n            controller.addTask(\"Task \" + i, new Date());\n        }\n        controller.deleteTask(\"Task 5\");\n        assertEquals(\"Task 6\", model.tasks.get(5).name);\n    }\n\n    @Test\n    void testDeleteAllTasks() {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n        for (int i = 0; i < 10; i++) {\n            controller.addTask(\"Task \" + i, new Date());\n        }\n        for (int i = 0; i < 10; i++) {\n            controller.deleteTask(\"Task \" + i);\n        }\n        assertTrue(model.tasks.isEmpty());\n    }\n\n    @Test\n    void testAddTaskWithSameName() {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n        controller.addTask(\"Task 1\", new Date());\n        controller.addTask(\"Task 1\", new Date());\n        assertEquals(\"Task 1\", model.tasks.get(0).name);\n        assertEquals(\"Task 1\", model.tasks.get(1).name);\n    }\n\n    @Test\n    void testDeleteTaskWithSameName() {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n        controller.addTask(\"Task 1\", new Date());\n        controller.addTask(\"Task 1\", new Date());\n        controller.deleteTask(\"Task 1\");\n        assertNull(model.tasks.get(0));\n        assertNull(model.tasks.get(1));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\nimport java.util.*;\n\nclass Task {\n    String name;\n    Date deadline;\n\n    public Task(String name, Date deadline) {\n        this.name = name;\n        this.deadline = deadline;\n    }\n\n    @Override\n    public String toString() {\n        return \"Task{\" +\n                \"name='\" + name + '\\'' +\n                \", deadline=\" + deadline +\n                '}';\n    }\n}\n\nclass Model {\n    List<Task> tasks;\n\n    public Model() {\n        this.tasks = new ArrayList<>(Collections.nCopies(10, null));\n    }\n\n    public void addTask(Task task) {\n        for (int i = 0; i < tasks.size(); i++) {\n            if (tasks.get(i) == null) {\n                tasks.set(i, task);\n                break;\n            }\n        }\n    }\n\n    public void deleteTask(String taskName) {\n        tasks.removeIf(task -> task != null && task.name.equals(taskName));\n    }\n\n    public void viewTasks() {\n        for (Task task : tasks) {\n            System.out.println(task);\n        }\n    }\n}\n\nclass Controller {\n    Model model;\n\n    public Controller(Model model) {\n        this.model = model;\n    }\n\n    public void addTask(String name, Date deadline) {\n        model.addTask(new Task(name, deadline));\n    }\n\n    public void deleteTask(String name) {\n        model.deleteTask(name);\n    }\n\n    public void viewTasks() {\n        model.viewTasks();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n\n        // Test view tasks\n        controller.viewTasks();\n\n        // Test add tasks\n        controller.addTask(\"Task 1\", new Date());\n        controller.addTask(\"Task 2\", new Date());\n\n        // Test view tasks\n        controller.viewTasks();\n\n        // Test delete tasks\n        controller.deleteTask(\"Task 1\");\n\n        // Test view tasks\n        controller.viewTasks();\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 137, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a java method that achieves the following functions:\n1. The input values are three proportion values and one total value. The sum of the three proportion values is approximately 1, and each proportion value has two decimal places.\n2. Inside the method, calculate the product of the three proportion values and the total value separately. The product is an integer. After calculation, check whether the sum of the three product values is equal to the input total value. If not, continue to distribute the values according to the size of the proportion values until the sum of the three product values is equal to the total value. Finally, output these three product values.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testCalculateProportion1() {\n        assertArrayEquals(new int[]{30, 40, 30}, Main.calculateProportion(0.3, 0.4, 0.3, 100));\n    }\n}", "problem": "Write a java method that achieves the following functions:\n1. The input values are three proportion values and one total value. The sum of the three proportion values is approximately 1, and each proportion value has two decimal places.\n2. Inside the method, calculate the product of the three proportion values and the total value separately. The product is an integer. After calculation, check whether the sum of the three product values is equal to the input total value. If not, continue to distribute the values according to the size of the proportion values until the sum of the three product values is equal to the total value. Finally, output these three product values.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass MainTest {\n    @Test\n    void testCalculateProportion2() {\n        assertArrayEquals(new int[]{50, 25, 25}, Main.calculateProportion(0.5, 0.25, 0.25, 100));\n    }\n\n    @Test\n    void testCalculateProportion3() {\n        assertArrayEquals(new int[]{33, 33, 34}, Main.calculateProportion(0.33, 0.33, 0.34, 100));\n    }\n\n    @Test\n    void testCalculateProportion4() {\n        assertArrayEquals(new int[]{20, 30, 50}, Main.calculateProportion(0.2, 0.3, 0.5, 100));\n    }\n\n    @Test\n    void testCalculateProportion5() {\n        assertArrayEquals(new int[]{10, 45, 45}, Main.calculateProportion(0.1, 0.45, 0.45, 100));\n    }\n\n    @Test\n    void testCalculateProportion6() {\n        assertArrayEquals(new int[]{40, 30, 30}, Main.calculateProportion(0.4, 0.3, 0.3, 100));\n    }\n\n    @Test\n    void testCalculateProportion7() {\n        assertArrayEquals(new int[]{0, 0, 1}, Main.calculateProportion(0.0, 0.0, 1.0, 1));\n    }\n\n    @Test\n    void testCalculateProportion8() {\n        assertArrayEquals(new int[]{1, 0, 0}, Main.calculateProportion(1.0, 0.0, 0.0, 1));\n    }\n\n    @Test\n    void testCalculateProportion9() {\n        assertArrayEquals(new int[]{0, 1, 0}, Main.calculateProportion(0.0, 1.0, 0.0, 1));\n    }\n\n    @Test\n    void testCalculateProportion10() {\n        assertArrayEquals(new int[]{0, 0, 0}, Main.calculateProportion(0.0, 0.0, 0.0, 0));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] result = calculateProportion(0.3, 0.4, 0.3, 100);\n        for (int i : result) {\n            System.out.println(i);\n        }\n    }\n\n    public static int[] calculateProportion(double ratio1, double ratio2, double ratio3, int total) {\n        int[] result = new int[3];\n        result[0] = (int) Math.floor(ratio1 * total);\n        result[1] = (int) Math.floor(ratio2 * total);\n        result[2] = (int) Math.floor(ratio3 * total);\n\n        int sum = result[0] + result[1] + result[2];\n        int diff = total - sum;\n\n        while (diff > 0) {\n            if (ratio1 >= ratio2 && ratio1 >= ratio3) {\n                result[0] += diff;\n            } else if (ratio2 >= ratio1 && ratio2 >= ratio3) {\n                result[1] += diff;\n            } else {\n                result[2] += diff;\n            }\n            diff--;\n        }\n\n        return result;\n    }\n}\n\n```", "classification": "Algorithm and Data Structure"}
{"_id": 138, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nEnter a string and print all permutations of the characters in the string.\n\nFor example, if you enter the string abc, then output all the strings that can be arranged from the characters a, b, and c\n\nabc, acb, bac, bca, cab and cba. Write it out in Java.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n\n    @Test\n    void testBasic() {\n        assertEquals(Set.of(\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"), generatePermutations(\"abc\"));\n    }\n}", "problem": "Enter a string and print all permutations of the characters in the string.\n\nFor example, if you enter the string abc, then output all the strings that can be arranged from the characters a, b, and c\n\nabc, acb, bac, bca, cab and cba. Write it out in Java.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nclass StringPermutationsTest {\n    @Test\n    void testEmptyString() {\n        assertTrue(generatePermutations(\"\").isEmpty());\n    }\n\n    @Test\n    void testSingleCharacter() {\n        assertEquals(Set.of(\"a\"), generatePermutations(\"a\"));\n    }\n\n    @Test\n    void testTwoCharacters() {\n        assertEquals(Set.of(\"ab\", \"ba\"), generatePermutations(\"ab\"));\n    }\n\n    @Test\n    void testDuplicateCharacters() {\n        assertEquals(Set.of(\"aba\", \"aab\", \"baa\"), generatePermutations(\"aba\"));\n    }\n\n    @Test\n    void testLongString() {\n        assertEquals(24, generatePermutations(\"abcd\").size()); // 4! = 24\n    }\n\n    @Test\n    void testAllSameCharacters() {\n        assertEquals(Set.of(\"aaa\"), generatePermutations(\"aaa\"));\n    }\n\n    @Test\n    void testSpecialCharacters() {\n        assertEquals(Set.of(\"a*b\", \"ab*\", \"*ab\", \"*ba\", \"ba*\", \"b*a\"), generatePermutations(\"a*b\"));\n    }\n\n    @Test\n    void testNonASCIICharacters() {\n        assertEquals(Set.of(\"你好吗\", \"你吗好\", \"好你吗\", \"好吗你\", \"吗好你\", \"吗你好\"), generatePermutations(\"你好吗\"));\n    }\n\n    private Set<String> generatePermutations(String str) {\n        Set<String> permutations = new HashSet<>();\n        StringPermutations.permute(str.toCharArray(), 0, permutations);\n        return permutations;\n    }\n}\n", "setup_code": "", "reference_solution": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class StringPermutations {\n    public static void main(String[] args) {\n        String str = \"aaa\";\n        permuteAndPrint(str);\n    }\n\n    public static void permuteAndPrint(String str) {\n        Set<String> permutations = new HashSet<>();\n        permute(str.toCharArray(), 0, permutations);\n\n        for (String s : permutations) {\n            System.out.println(s);\n        }\n    }\n\n    public static void permute(char[] chars, int currentIndex, Set<String> permutations) {\n        if (currentIndex == chars.length - 1) {\n            permutations.add(new String(chars));\n        }\n\n        for (int i = currentIndex; i < chars.length; i++) {\n            swap(chars, currentIndex, i);\n            permute(chars, currentIndex + 1, permutations);\n            swap(chars, currentIndex, i); // backtrack\n        }\n    }\n\n    private static void swap(char[] array, int i, int j) {\n        char temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 139, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\n1. Design a program, define a class representing \"student\": Student: The attributes in the class are: a) name: String type, representing the student's name; b) ordinary: double type, representing the student's usual score; c) attendance: double type, representing the student's attendance rate. The methods in the class are: a) boolean qualified(): Calculate and return the student's exam eligibility based on the usual score and attendance rate. If the usual score ≥ 60 and the attendance rate ≥60%, return true, otherwise return false.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testQualified1() {\n        Student student = new Student(\"John\", 70, 0.7);\n        assertTrue(student.qualified());\n    }\n}", "problem": "1. Design a program, define a class representing \"student\": Student: The attributes in the class are: a) name: String type, representing the student's name; b) ordinary: double type, representing the student's usual score; c) attendance: double type, representing the student's attendance rate. The methods in the class are: a) boolean qualified(): Calculate and return the student's exam eligibility based on the usual score and attendance rate. If the usual score ≥ 60 and the attendance rate ≥60%, return true, otherwise return false.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass StudentTest {\n    @Test\n    void testQualified2() {\n        Student student = new Student(\"Jane\", 50, 0.7);\n        assertFalse(student.qualified());\n    }\n\n    @Test\n    void testQualified3() {\n        Student student = new Student(\"Bob\", 70, 0.5);\n        assertFalse(student.qualified());\n    }\n\n    @Test\n    void testQualified4() {\n        Student student = new Student(\"Alice\", 60, 0.6);\n        assertTrue(student.qualified());\n    }\n\n    @Test\n    void testQualified5() {\n        Student student = new Student(\"Tom\", 59.9, 0.6);\n        assertFalse(student.qualified());\n    }\n\n    @Test\n    void testQualified6() {\n        Student student = new Student(\"Jerry\", 60, 0.599);\n        assertFalse(student.qualified());\n    }\n\n    @Test\n    void testQualified7() {\n        Student student = new Student(\"Max\", 100, 1);\n        assertTrue(student.qualified());\n    }\n\n    @Test\n    void testQualified8() {\n        Student student = new Student(\"Lily\", 0, 0);\n        assertFalse(student.qualified());\n    }\n\n    @Test\n    void testQualified9() {\n        Student student = new Student(\"Sam\", 60, 1);\n        assertTrue(student.qualified());\n    }\n\n    @Test\n    void testQualified10() {\n        Student student = new Student(\"Emma\", 100, 0.6);\n        assertTrue(student.qualified());\n    }\n}", "setup_code": "", "reference_solution": "```java\n\n\npublic class Student {\n    private String name;\n    private double ordinary;\n    private double attendance;\n\n    public Student(String name, double ordinary, double attendance) {\n        this.name = name;\n        this.ordinary = ordinary;\n        this.attendance = attendance;\n    }\n\n    public boolean qualified() {\n        return ordinary >= 60 && attendance >= 0.6;\n    }\n\n    // getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public double getOrdinary() {\n        return ordinary;\n    }\n\n    public void setOrdinary(double ordinary) {\n        this.ordinary = ordinary;\n    }\n\n    public double getAttendance() {\n        return attendance;\n    }\n\n    public void setAttendance(double attendance) {\n        this.attendance = attendance;\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 140, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a method named showQianFenWei(long x), which is used to display x in thousands place notation. That is, starting from the lowest digit, a comma is added every three digits, for example:\n\nx=2, the result is: 2\n\nx=100, the result is 100\n\nx=1000, the result is 1,000\n\nx=10000, the result is 10,000\n\nx=1000000, the result is 1,000,000\n\nx does not exceed 15 digits.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testShowQianFenWei() {\n        assertEquals(\"2\", Main.showQianFenWei(2));\n        assertEquals(\"100\", Main.showQianFenWei(100));\n        assertEquals(\"1,000\", Main.showQianFenWei(1000));\n        assertEquals(\"10,000\", Main.showQianFenWei(10000));\n    }\n}", "problem": "Write a method named showQianFenWei(long x), which is used to display x in thousands place notation. That is, starting from the lowest digit, a comma is added every three digits, for example:\n\nx=2, the result is: 2\n\nx=100, the result is 100\n\nx=1000, the result is 1,000\n\nx=10000, the result is 10,000\n\nx=1000000, the result is 1,000,000\n\nx does not exceed 15 digits.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass MainTest {\n    @Test\n    void testShowQianFenWei2() {\n        assertEquals(\"1,000,000\", Main.showQianFenWei(1000000));\n        assertEquals(\"123,456,789\", Main.showQianFenWei(123456789));\n        assertEquals(\"1,234,567,890\", Main.showQianFenWei(1234567890));\n        assertEquals(\"12,345,678,901\", Main.showQianFenWei(12345678901L));\n        assertEquals(\"123,456,789,012\", Main.showQianFenWei(123456789012L));\n        assertEquals(\"1,234,567,890,123\", Main.showQianFenWei(1234567890123L));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(showQianFenWei(2));\n        System.out.println(showQianFenWei(100));\n        System.out.println(showQianFenWei(1000));\n        System.out.println(showQianFenWei(10000));\n        System.out.println(showQianFenWei(1000000));\n    }\n\n    public static String showQianFenWei(long x) {\n        String str = Long.toString(x);\n        String result = \"\";\n        int count = 0;\n        for (int i = str.length() - 1; i >= 0; i--) {\n            result = str.charAt(i) + result;\n            count++;\n            if (count % 3 == 0 && i != 0) {\n                result = \",\" + result;\n            }\n        }\n        return result;\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 141, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nCreate a search method to count the total occurrences of a keyword in a given natural language text file. The keyword is an English word, such as \"go\". The words in the file that match the keyword are not case-sensitive, for example, GO, Go, gO, go are all counted as one occurrence. At the same time, the keyword may contain uppercase or lowercase letters. However, the word needs to be a complete match, that is to say, a word like google does not count as an occurrence of go. In addition, a string like What’s is considered to have the word what, but not is, and only \"what\" will be used as the search keyword, not \"what's\". Three-year-old contains the words three, year, and old. In summary, a word refers to consecutive uppercase/lowercase letters, and the first and last characters of the word (if they exist) must not be uppercase/lowercase letters. Implement this in Java.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testSearch1() {\n        assertEquals(4, KeywordSearch.search(\"testFile1.txt\", \"go\"));\n    }\n}", "problem": "Create a search method to count the total occurrences of a keyword in a given natural language text file. The keyword is an English word, such as \"go\". The words in the file that match the keyword are not case-sensitive, for example, GO, Go, gO, go are all counted as one occurrence. At the same time, the keyword may contain uppercase or lowercase letters. However, the word needs to be a complete match, that is to say, a word like google does not count as an occurrence of go. In addition, a string like What’s is considered to have the word what, but not is, and only \"what\" will be used as the search keyword, not \"what's\". Three-year-old contains the words three, year, and old. In summary, a word refers to consecutive uppercase/lowercase letters, and the first and last characters of the word (if they exist) must not be uppercase/lowercase letters. Implement this in Java.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass KeywordSearchTest {\n    @Test\n    void testSearch2() {\n        assertEquals(0, KeywordSearch.search(\"testFile2.txt\", \"go\"));\n    }\n\n    @Test\n    void testSearch3() {\n        assertEquals(1, KeywordSearch.search(\"testFile3.txt\", \"what\"));\n    }\n\n    @Test\n    void testSearch4() {\n        assertEquals(3, KeywordSearch.search(\"testFile4.txt\", \"year\"));\n    }\n\n    @Test\n    void testSearch5() {\n        assertEquals(1, KeywordSearch.search(\"testFile5.txt\", \"google\"));\n    }\n\n\n    @Test\n    void testSearch7() {\n        assertEquals(0, KeywordSearch.search(\"testFile7.txt\", \"\"));\n    }\n\n    @Test\n    void testSearch8() {\n        assertEquals(0, KeywordSearch.search(\"testFile8.txt\", \" \"));\n    }\n\n}", "setup_code": "", "reference_solution": "```java\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class KeywordSearch {\n    public static int search(String filePath, String keyword) {\n        int count = 0;\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(filePath));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] words = line.split(\"\\\\W+\");\n                for (String word : words) {\n                    if (word.equalsIgnoreCase(keyword)) {\n                        count++;\n                    }\n                }\n            }\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String filePath = \"path_to_your_file\";\n        String keyword = \"your_keyword\";\n        int count = search(filePath, keyword);\n        System.out.println(\"The keyword '\" + keyword + \"' appears \" + count + \" times in the file.\");\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 142, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nFor an integer array, if the array is empty, return zero; if its length is 1, return the first element. If the length of the integer array is greater than or equal to 51, return its 51st element; otherwise, if its length is greater than or equal to the integer part of 51/2, return the element at the position of the integer part of 51/2; otherwise, if its length is greater than or equal to the integer part of 51/4, return the element at the position of the integer part of 51/4; otherwise, if its length is greater than or equal to the integer part of 51/8, return the element at the position of the integer part of 51/8... and so on, compare and return the element that meets the requirements. Example: input array 1 to 25 output 25 Implemented in Java language.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testGetElement1() {\n        int[] array = new int[25];\n        for (int i = 0; i < 25; i++) {\n            array[i] = i + 1;\n        }\n        assertEquals(25, ArrayElementSelector.selectElement(array));\n    }\n}", "problem": "For an integer array, if the array is empty, return zero; if its length is 1, return the first element. If the length of the integer array is greater than or equal to 51, return its 51st element; otherwise, if its length is greater than or equal to the integer part of 51/2, return the element at the position of the integer part of 51/2; otherwise, if its length is greater than or equal to the integer part of 51/4, return the element at the position of the integer part of 51/4; otherwise, if its length is greater than or equal to the integer part of 51/8, return the element at the position of the integer part of 51/8... and so on, compare and return the element that meets the requirements. Example: input array 1 to 25 output 25 Implemented in Java language.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass MainTest {\n    @Test\n    void testGetElement2() {\n        int[] array = new int[51];\n        for (int i = 0; i < 51; i++) {\n            array[i] = i + 1;\n        }\n        assertEquals(51, ArrayElementSelector.selectElement(array));\n    }\n\n    @Test\n    void testGetElement3() {\n        int[] array = new int[1];\n        array[0] = 10;\n        assertEquals(10, ArrayElementSelector.selectElement(array));\n    }\n\n    @Test\n    void testGetElement4() {\n        int[] array = new int[0];\n        assertEquals(0, ArrayElementSelector.selectElement(array));\n    }\n\n    @Test\n    void testGetElement5() {\n        int[] array = new int[26];\n        for (int i = 0; i < 26; i++) {\n            array[i] = i + 1;\n        }\n        assertEquals(25, ArrayElementSelector.selectElement(array));\n    }\n\n    @Test\n    void testGetElement6() {\n        int[] array = new int[13];\n        for (int i = 0; i < 13; i++) {\n            array[i] = i + 1;\n        }\n        assertEquals(12, ArrayElementSelector.selectElement(array));\n    }\n\n    @Test\n    void testGetElement7() {\n        int[] array = new int[100];\n        for (int i = 0; i < 100; i++) {\n            array[i] = i + 1;\n        }\n        assertEquals(51, ArrayElementSelector.selectElement(array));\n    }\n\n    @Test\n    void testGetElement8() {\n        int[] array = new int[2];\n        array[0] = 10;\n        array[1] = 20;\n        assertEquals(10, ArrayElementSelector.selectElement(array));\n    }\n\n    @Test\n    void testGetElement9() {\n        int[] array = new int[3];\n        array[0] = 10;\n        array[1] = 20;\n        array[2] = 30;\n        assertEquals(30, ArrayElementSelector.selectElement(array));\n    }\n\n    @Test\n    void testGetElement10() {\n        int[] array = new int[6];\n        for (int i = 0; i < 6; i++) {\n            array[i] = i + 1;\n        }\n        assertEquals(6, ArrayElementSelector.selectElement(array));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\npublic class ArrayElementSelector {\n    public static int selectElement(int[] array) {\n        if (array == null || array.length == 0) {\n            return 0;\n        }\n\n        if (array.length == 1) {\n            return array[0];\n        }\n\n        int threshold = 51;\n        while (threshold > 1) {\n            if (array.length >= threshold) {\n                return array[threshold - 1];\n            }\n            threshold /= 2;\n        }\n\n        return array[0];\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};\n        System.out.println(\"Selected element: \" + selectElement(array));\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 143, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nRead in an n-order square matrix a, calculate the sum of all elements except for the secondary diagonal, the last column, and the last row.\nExplanation: The secondary diagonal is the line from the top right to the bottom left of the matrix, for example\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1\nsum=35   (2+3+4+5+6+7+8=35)\nWrite a simple program in Java.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testCalculateSum1() {\n        int[][] matrix = {{2, 3, 4, 1}, {5, 6, 1, 1}, {7, 1, 8, 1}, {1, 1, 1, 1}};\n        assertEquals(35, Main.calculateSum(matrix, 4));\n    }\n}", "problem": "Read in an n-order square matrix a, calculate the sum of all elements except for the secondary diagonal, the last column, and the last row.\nExplanation: The secondary diagonal is the line from the top right to the bottom left of the matrix, for example\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1\nsum=35   (2+3+4+5+6+7+8=35)\nWrite a simple program in Java.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Scanner;\n\nclass MainTest {\n    @Test\n    void testCalculateSum2() {\n        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        assertEquals(7, Main.calculateSum(matrix, 3));\n    }\n\n    @Test\n    void testCalculateSum3() {\n        int[][] matrix = {{1}};\n        assertEquals(0, Main.calculateSum(matrix, 1));\n    }\n\n    @Test\n    void testCalculateSum4() {\n        int[][] matrix = {{1, 2}, {3, 4}};\n        assertEquals(1, Main.calculateSum(matrix, 2));\n    }\n\n    @Test\n    void testCalculateSum5() {\n        int[][] matrix = {{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}, {16, 17, 18, 19, 20}, {21, 22, 23, 24, 25}};\n        assertEquals(121, Main.calculateSum(matrix, 5));\n    }\n\n    @Test\n    void testCalculateSum6() {\n        int[][] matrix = {{-1, -2, -3}, {-4, -5, -6}, {-7, -8, -9}};\n        assertEquals(-7, Main.calculateSum(matrix, 3));\n    }\n\n    // boundary cases\n    @Test\n    void testCalculateSum7() {\n        int[][] matrix = new int[100][100];\n        for (int i = 0; i < 100; i++) {\n            for (int j = 0; j < 100; j++) {\n                matrix[i][j] = 1;\n            }\n        }\n        assertEquals(9703, Main.calculateSum(matrix, 100));\n    }\n\n    @Test\n    void testCalculateSum8() {\n        int[][] matrix = new int[1000][1000];\n        for (int i = 0; i < 1000; i++) {\n            for (int j = 0; j < 1000; j++) {\n                matrix[i][j] = 1;\n            }\n        }\n        assertEquals(997003, Main.calculateSum(matrix, 1000));\n    }\n\n    @Test\n    void testCalculateSum9() {\n        int[][] matrix = new int[1][1];\n        matrix[0][0] = Integer.MAX_VALUE;\n        assertEquals(0, Main.calculateSum(matrix, 1));\n    }\n\n    @Test\n    void testCalculateSum10() {\n        int[][] matrix = new int[2][2];\n        matrix[0][0] = Integer.MAX_VALUE;\n        matrix[0][1] = Integer.MAX_VALUE;\n        matrix[1][0] = Integer.MAX_VALUE;\n        matrix[1][1] = Integer.MAX_VALUE;\n        assertEquals(Integer.MAX_VALUE, Main.calculateSum(matrix, 2));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter the order of the matrix:\");\n        int n = scanner.nextInt();\n        int[][] matrix = new int[n][n];\n        System.out.println(\"Enter the elements of the matrix:\");\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = scanner.nextInt();\n            }\n        }\n        scanner.close();\n        System.out.println(\"The sum of the elements excluding the anti-diagonal, last row and last column is: \" + calculateSum(matrix, n));\n    }\n\n    static int calculateSum(int[][] matrix, int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i != n - 1 && j != n - 1 && j != n - 1 - i) {\n                    sum += matrix[i][j];\n                }\n            }\n        }\n        return sum;\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 144, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nImplement an alarm clock system, AlarmSystem, in Java. Simply put, it involves implementing three methods:\n\naddAlarm: Add an alarm, including properties id, weekday[], hour, minute, and typeId. The weekdays represent the days of the week when the alarm will ring, with possible values from 1-7. typeId represents the type of alarm, with possible values of 0, 1, 2. If an alarm with the same id has been added before, it will not be added again. Returns false, otherwise returns true.\n\ndeleteAlarm: Delete an alarm based on its id. If there is no alarm with this id, it returns false, otherwise it returns true after deletion.\n\nqueryAlarm: Given weekday, hour, startminute, endminute, query the alarms that will ring on this day (weekday), during this hour (hour), and between startminute and endminute. If there are multiple alarms, they should be sorted primarily by the time they ring. If the ringing times are the same, they should be sorted by the type of alarm in ascending order. If the types of alarms are also the same, they should be sorted by id in ascending order.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n@Test\npublic void testAddAlarm() {\n    AlarmSystem alarmSystem = new AlarmSystem();\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n    assertTrue(alarmSystem.addAlarm(1, weekdays, 7, 30, 0));\n    assertFalse(alarmSystem.addAlarm(1, weekdays, 7, 30, 0));\n}\n}", "problem": "Implement an alarm clock system, AlarmSystem, in Java. Simply put, it involves implementing three methods:\n\naddAlarm: Add an alarm, including properties id, weekday[], hour, minute, and typeId. The weekdays represent the days of the week when the alarm will ring, with possible values from 1-7. typeId represents the type of alarm, with possible values of 0, 1, 2. If an alarm with the same id has been added before, it will not be added again. Returns false, otherwise returns true.\n\ndeleteAlarm: Delete an alarm based on its id. If there is no alarm with this id, it returns false, otherwise it returns true after deletion.\n\nqueryAlarm: Given weekday, hour, startminute, endminute, query the alarms that will ring on this day (weekday), during this hour (hour), and between startminute and endminute. If there are multiple alarms, they should be sorted primarily by the time they ring. If the ringing times are the same, they should be sorted by the type of alarm in ascending order. If the types of alarms are also the same, they should be sorted by id in ascending order.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.*;\n\nclass AlarmTest {\n@Test\npublic void testDeleteAlarm() {\n    AlarmSystem alarmSystem = new AlarmSystem();\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n    alarmSystem.addAlarm(1, weekdays, 7, 30, 0);\n    assertTrue(alarmSystem.deleteAlarm(1));\n    assertFalse(alarmSystem.deleteAlarm(1));\n}\n\n@Test\npublic void testQueryAlarm() {\n    AlarmSystem alarmSystem = new AlarmSystem();\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n    alarmSystem.addAlarm(1, weekdays, 7, 30, 0);\n    alarmSystem.addAlarm(2, weekdays, 7, 35, 1);\n    alarmSystem.addAlarm(3, weekdays, 7, 35, 0);\n    List<Alarm> result = alarmSystem.queryAlarm(1, 7, 30, 40);\n    assertEquals(3, result.size());\n    assertEquals(1, result.get(0).id);\n    assertEquals(3, result.get(1).id);\n    assertEquals(2, result.get(2).id);\n}\n\n@Test\npublic void testAddAlarmWithDifferentType() {\n    AlarmSystem alarmSystem = new AlarmSystem();\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n    assertTrue(alarmSystem.addAlarm(1, weekdays, 7, 30, 0));\n    assertTrue(alarmSystem.addAlarm(2, weekdays, 7, 30, 1));\n    assertTrue(alarmSystem.addAlarm(3, weekdays, 7, 30, 2));\n}\n\n@Test\npublic void testDeleteAlarmWithDifferentType() {\n    AlarmSystem alarmSystem = new AlarmSystem();\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n    alarmSystem.addAlarm(1, weekdays, 7, 30, 0);\n    alarmSystem.addAlarm(2, weekdays, 7, 30, 1);\n    alarmSystem.addAlarm(3, weekdays, 7, 30, 2);\n    assertTrue(alarmSystem.deleteAlarm(1));\n    assertTrue(alarmSystem.deleteAlarm(2));\n    assertTrue(alarmSystem.deleteAlarm(3));\n}\n\n@Test\npublic void testQueryAlarmWithDifferentType() {\n    AlarmSystem alarmSystem = new AlarmSystem();\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n    alarmSystem.addAlarm(1, weekdays, 7, 30, 0);\n    alarmSystem.addAlarm(2, weekdays, 7, 30, 1);\n    alarmSystem.addAlarm(3, weekdays, 7, 30, 2);\n    List<Alarm> result = alarmSystem.queryAlarm(1, 7, 30, 40);\n    assertEquals(3, result.size());\n    assertEquals(1, result.get(0).id);\n    assertEquals(2, result.get(1).id);\n    assertEquals(3, result.get(2).id);\n}\n\n@Test\npublic void testAddAlarmWithMaxId() {\n    AlarmSystem alarmSystem = new AlarmSystem();\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n    assertTrue(alarmSystem.addAlarm(Integer.MAX_VALUE, weekdays, 7, 30, 0));\n}\n\n@Test\npublic void testDeleteAlarmWithMaxId() {\n    AlarmSystem alarmSystem = new AlarmSystem();\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n    alarmSystem.addAlarm(Integer.MAX_VALUE, weekdays, 7, 30, 0);\n    assertTrue(alarmSystem.deleteAlarm(Integer.MAX_VALUE));\n    assertFalse(alarmSystem.deleteAlarm(Integer.MAX_VALUE));\n}\n\n@Test\npublic void testQueryAlarmWithMaxId() {\n    AlarmSystem alarmSystem = new AlarmSystem();\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n    alarmSystem.addAlarm(Integer.MAX_VALUE, weekdays, 7, 30, 0);\n    List<Alarm> result = alarmSystem.queryAlarm(1, 7, 30, 40);\n    assertEquals(1, result.size());\n    assertEquals(Integer.MAX_VALUE, result.get(0).id);\n}\n\n@Test\npublic void testAddAlarmWithMaxWeekday() {\n    AlarmSystem alarmSystem = new AlarmSystem();\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(7));\n    assertTrue(alarmSystem.addAlarm(1, weekdays, 7, 30, 0));\n}\n}", "setup_code": "", "reference_solution": "```java\n\nimport java.util.*;\n\nclass Alarm {\n    int id;\n    Set<Integer> weekdays;\n    int hour;\n    int minute;\n    int typeId;\n\n    public Alarm(int id, Set<Integer> weekdays, int hour, int minute, int typeId) {\n        this.id = id;\n        this.weekdays = weekdays;\n        this.hour = hour;\n        this.minute = minute;\n        this.typeId = typeId;\n    }\n}\n\nclass AlarmSystem {\n    Map<Integer, Alarm> alarms;\n\n    public AlarmSystem() {\n        this.alarms = new HashMap<>();\n    }\n\n    public boolean addAlarm(int id, Set<Integer> weekdays, int hour, int minute, int typeId) {\n        if (alarms.containsKey(id)) {\n            return false;\n        }\n        alarms.put(id, new Alarm(id, weekdays, hour, minute, typeId));\n        return true;\n    }\n\n    public boolean deleteAlarm(int id) {\n        if (!alarms.containsKey(id)) {\n            return false;\n        }\n        alarms.remove(id);\n        return true;\n    }\n\n    public List<Alarm> queryAlarm(int weekday, int hour, int startMinute, int endMinute) {\n        List<Alarm> result = new ArrayList<>();\n        for (Alarm alarm : alarms.values()) {\n            if (alarm.weekdays.contains(weekday) && alarm.hour == hour && alarm.minute >= startMinute && alarm.minute <= endMinute) {\n                result.add(alarm);\n            }\n        }\n        Collections.sort(result, new Comparator<Alarm>() {\n            @Override\n            public int compare(Alarm a1, Alarm a2) {\n                if (a1.minute != a2.minute) {\n                    return a1.minute - a2.minute;\n                }\n                if (a1.typeId != a2.typeId) {\n                    return a1.typeId - a2.typeId;\n                }\n                return a1.id - a2.id;\n            }\n        });\n        return result;\n    }\n}\n\n```", "classification": "Database Technology"}
{"_id": 145, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nRequirements:\n1. Implement the parsing of conditional queries such as select xx from xx [where xx = xx [order by xx] [limit xx]]. The part in brackets indicates that it is optional, please provide the java code implementation.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n\n    @Test\n    public void testSelectFrom() {\n        SQLParser parser = new SQLParser(\"select name from users\");\n        assertEquals(\"name\", parser.getSelect());\n        assertEquals(\"users\", parser.getFrom());\n        assertNull(parser.getWhere());\n        assertNull(parser.getOrderBy());\n        assertNull(parser.getLimit());\n    }\n}", "problem": "Requirements:\n1. Implement the parsing of conditional queries such as select xx from xx [where xx = xx [order by xx] [limit xx]]. The part in brackets indicates that it is optional, please provide the java code implementation.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass SQLParserTest {\n    @Test\n    public void testSelectFromWhere() {\n        SQLParser parser = new SQLParser(\"select id from items where name = 'item'\");\n        assertEquals(\"id\", parser.getSelect());\n        assertEquals(\"items\", parser.getFrom());\n        assertEquals(\"name = 'item'\", parser.getWhere());\n        assertNull(parser.getOrderBy());\n        assertNull(parser.getLimit());\n    }\n\n    @Test\n    public void testFullQuery() {\n        SQLParser parser = new SQLParser(\"select id, name from products where price > 10 order by name limit 5\");\n        assertEquals(\"id, name\", parser.getSelect());\n        assertEquals(\"products\", parser.getFrom());\n        assertEquals(\"price > 10\", parser.getWhere());\n        assertEquals(\"name\", parser.getOrderBy());\n        assertEquals(\"5\", parser.getLimit());\n    }\n\n    @Test\n    public void testSelectFromOrderBy() {\n        SQLParser parser = new SQLParser(\"select name from users order by age\");\n        assertEquals(\"name\", parser.getSelect());\n        assertEquals(\"users\", parser.getFrom());\n        assertNull(parser.getWhere());\n        assertEquals(\"age\", parser.getOrderBy());\n        assertNull(parser.getLimit());\n    }\n\n    @Test\n    public void testSelectFromLimit() {\n        SQLParser parser = new SQLParser(\"select name from users limit 10\");\n        assertEquals(\"name\", parser.getSelect());\n        assertEquals(\"users\", parser.getFrom());\n        assertNull(parser.getWhere());\n        assertNull(parser.getOrderBy());\n        assertEquals(\"10\", parser.getLimit());\n    }\n\n    @Test\n    public void testSelectFromWhereOrderBy() {\n        SQLParser parser = new SQLParser(\"select name from users where age > 20 order by name\");\n        assertEquals(\"name\", parser.getSelect());\n        assertEquals(\"users\", parser.getFrom());\n        assertEquals(\"age > 20\", parser.getWhere());\n        assertEquals(\"name\", parser.getOrderBy());\n        assertNull(parser.getLimit());\n    }\n\n    @Test\n    public void testSelectFromWhereLimit() {\n        SQLParser parser = new SQLParser(\"select name from users where age > 20 limit 5\");\n        assertEquals(\"name\", parser.getSelect());\n        assertEquals(\"users\", parser.getFrom());\n        assertEquals(\"age > 20\", parser.getWhere());\n        assertNull(parser.getOrderBy());\n        assertEquals(\"5\", parser.getLimit());\n    }\n\n    @Test\n    public void testSelectFromOrderByLimit() {\n        SQLParser parser = new SQLParser(\"select name from users order by age limit 5\");\n        assertEquals(\"name\", parser.getSelect());\n        assertEquals(\"users\", parser.getFrom());\n        assertNull(parser.getWhere());\n        assertEquals(\"age\", parser.getOrderBy());\n        assertEquals(\"5\", parser.getLimit());\n    }\n\n    @Test\n    public void testEmptySQL() {\n        SQLParser parser = new SQLParser(\"\");\n        assertNull(parser.getSelect());\n        assertNull(parser.getFrom());\n        assertNull(parser.getWhere());\n        assertNull(parser.getOrderBy());\n        assertNull(parser.getLimit());\n    }\n\n    @Test\n    public void testInvalidSQL() {\n        SQLParser parser = new SQLParser(\"invalid sql\");\n        assertNull(parser.getSelect());\n        assertNull(parser.getFrom());\n        assertNull(parser.getWhere());\n        assertNull(parser.getOrderBy());\n        assertNull(parser.getLimit());\n    }\n}\n", "setup_code": "", "reference_solution": "```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class SQLParser {\n    private String select;\n    private String from;\n    private String where;\n    private String orderBy;\n    private String limit;\n\n    public SQLParser(String sql) {\n        parse(sql);\n    }\n\n    private void parse(String sql) {\n        if (sql == null || sql.trim().isEmpty()) {\n            select = from = where = orderBy = limit = null;\n            return;\n        }\n\n        Pattern pattern = Pattern.compile(\"select\\\\s+(.*?)\\\\s+from\\\\s+(.*?)(?:\\\\s+where\\\\s+(.*?))?(?:\\\\s+order by\\\\s+(.*?))?(?:\\\\s+limit\\\\s+(.*?))?$\", Pattern.CASE_INSENSITIVE);\n        Matcher matcher = pattern.matcher(sql);\n        if (matcher.find()) {\n            select = matcher.group(1).trim();\n            from = matcher.group(2).trim();\n            where = matcher.group(3) != null ? matcher.group(3).trim() : null;\n            orderBy = matcher.group(4) != null ? matcher.group(4).trim() : null;\n            limit = matcher.group(5) != null ? matcher.group(5).trim() : null;\n        } else {\n            select = from = where = orderBy = limit = null;\n        }\n    }\n\n    // Getters for select, from, where, orderBy, and limit\n    // ...\n    String getSelect() {\n        return select;\n    }\n    String getFrom() {\n        return from;\n    }\n    String getWhere(){\n        return where;\n    }\n    String getOrderBy(){\n        return orderBy;\n    }\n    String getLimit(){\n        return limit;\n    }\n    public static void main(String[] args) {\n        SQLParser parser = new SQLParser(\"select name, age from users where age > 18 order by age limit 10\");\n        System.out.println(\"Select: \" + parser.getSelect());\n        System.out.println(\"From: \" + parser.getFrom());\n        System.out.println(\"Where: \" + parser.getWhere());\n        System.out.println(\"Order By: \" + parser.getOrderBy());\n        System.out.println(\"Limit: \" + parser.getLimit());\n    }\n\n\n\n\n}\n\n```", "classification": "Software Engineering"}
{"_id": 146, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nJAVA Sequential List\nWrite a program to implement various basic operations and overall list-building algorithms of a sequential list (assuming the element type of the sequential list is ElemType which is char), and design a program based on this to complete the following functions:\n(1) Initialize the sequential list L;\n(2) Create the sequential list L;\n(3) Output the sequential list L;\n(4) Output the length of the sequential list L;\n(5) Determine whether the sequential list L is empty;\n(6) Output the third element of the sequential list L;\n(7) Output the position of a certain element;\n(8) Insert element f at the position of the fourth element;\n(9) Output the sequential list L;\n(10) Delete the third element of the sequential list L;\n(11) Output the sequential list L;\n(12) Release the sequential list L.\n2 Single Linked List\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testSeqList() {\n        SeqList L = new SeqList();\n        L.createSeqList(new char[]{'a', 'b', 'c', 'd', 'e'});\n        assertEquals(new ArrayList<Character>(){{add('a'); add('b'); add('c'); add('d'); add('e');}}, L.list);\n        assertEquals(5, L.getLength());\n        assertFalse(L.isEmpty());\n        assertEquals('c', L.getElement(2));\n        assertEquals(2, L.getPosition('c'));\n        L.insertElement(3, 'f');\n        assertEquals(new ArrayList<Character>(){{add('a'); add('b'); add('c'); add('f'); add('d'); add('e');}}, L.list);\n        L.deleteElement(2);\n        assertEquals(new ArrayList<Character>(){{add('a'); add('b'); add('f'); add('d'); add('e');}}, L.list);\n        L.clearSeqList();\n        assertTrue(L.isEmpty());\n    }\n}", "problem": "JAVA Sequential List\nWrite a program to implement various basic operations and overall list-building algorithms of a sequential list (assuming the element type of the sequential list is ElemType which is char), and design a program based on this to complete the following functions:\n(1) Initialize the sequential list L;\n(2) Create the sequential list L;\n(3) Output the sequential list L;\n(4) Output the length of the sequential list L;\n(5) Determine whether the sequential list L is empty;\n(6) Output the third element of the sequential list L;\n(7) Output the position of a certain element;\n(8) Insert element f at the position of the fourth element;\n(9) Output the sequential list L;\n(10) Delete the third element of the sequential list L;\n(11) Output the sequential list L;\n(12) Release the sequential list L.\n2 Single Linked List", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\n\nclass SeqListTest {\n    @Test\n    void testSeqListWithEmptyList() {\n        SeqList L = new SeqList();\n        assertTrue(L.isEmpty());\n        assertEquals(0, L.getLength());\n    }\n\n    @Test\n    void testSeqListWithOneElement() {\n        SeqList L = new SeqList();\n        L.createSeqList(new char[]{'a'});\n        assertEquals(new ArrayList<Character>(){{add('a');}}, L.list);\n        assertEquals(1, L.getLength());\n        assertFalse(L.isEmpty());\n        assertEquals('a', L.getElement(0));\n        assertEquals(0, L.getPosition('a'));\n    }\n\n    @Test\n    void testSeqListWithTwoElements() {\n        SeqList L = new SeqList();\n        L.createSeqList(new char[]{'a', 'b'});\n        assertEquals(new ArrayList<Character>(){{add('a'); add('b');}}, L.list);\n        assertEquals(2, L.getLength());\n        assertFalse(L.isEmpty());\n        assertEquals('b', L.getElement(1));\n        assertEquals(1, L.getPosition('b'));\n    }\n\n    @Test\n    void testSeqListWithInsertAtFirstPosition() {\n        SeqList L = new SeqList();\n        L.createSeqList(new char[]{'a', 'b', 'c'});\n        L.insertElement(0, 'd');\n        assertEquals(new ArrayList<Character>(){{add('d'); add('a'); add('b'); add('c');}}, L.list);\n    }\n\n    @Test\n    void testSeqListWithInsertAtLastPosition() {\n        SeqList L = new SeqList();\n        L.createSeqList(new char[]{'a', 'b', 'c'});\n        L.insertElement(3, 'd');\n        assertEquals(new ArrayList<Character>(){{add('a'); add('b'); add('c'); add('d');}}, L.list);\n    }\n\n    @Test\n    void testSeqListWithDeleteAtFirstPosition() {\n        SeqList L = new SeqList();\n        L.createSeqList(new char[]{'a', 'b', 'c'});\n        L.deleteElement(0);\n        assertEquals(new ArrayList<Character>(){{add('b'); add('c');}}, L.list);\n    }\n\n    @Test\n    void testSeqListWithDeleteAtLastPosition() {\n        SeqList L = new SeqList();\n        L.createSeqList(new char[]{'a', 'b', 'c'});\n        L.deleteElement(2);\n        assertEquals(new ArrayList<Character>(){{add('a'); add('b');}}, L.list);\n    }\n\n    @Test\n    void testSeqListWithNonexistentElement() {\n        SeqList L = new SeqList();\n        L.createSeqList(new char[]{'a', 'b', 'c'});\n        assertEquals(-1, L.getPosition('d'));\n    }\n\n    @Test\n    void testSeqListWithDuplicateElements() {\n        SeqList L = new SeqList();\n        L.createSeqList(new char[]{'a', 'b', 'a'});\n        assertEquals(0, L.getPosition('a'));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\nimport java.util.ArrayList;\n\npublic class SeqList {\n    ArrayList<Character> list;\n\n    public SeqList() {\n        this.list = new ArrayList<>();\n    }\n\n    public void createSeqList(char[] elements) {\n        for (char element : elements) {\n            this.list.add(element);\n        }\n    }\n\n    public void printSeqList() {\n        System.out.println(this.list);\n    }\n\n    public int getLength() {\n        return this.list.size();\n    }\n\n    public boolean isEmpty() {\n        return this.list.isEmpty();\n    }\n\n    public char getElement(int index) {\n        return this.list.get(index);\n    }\n\n    public int getPosition(char element) {\n        return this.list.indexOf(element);\n    }\n\n    public void insertElement(int index, char element) {\n        this.list.add(index, element);\n    }\n\n    public void deleteElement(int index) {\n        this.list.remove(index);\n    }\n\n    public void clearSeqList() {\n        this.list.clear();\n    }\n\n    public static void main(String[] args) {\n        SeqList L = new SeqList();\n        L.createSeqList(new char[]{'a', 'b', 'c', 'd', 'e'});\n        L.printSeqList();\n        System.out.println(\"Length: \" + L.getLength());\n        System.out.println(\"Is Empty: \" + L.isEmpty());\n        System.out.println(\"3rd Element: \" + L.getElement(2));\n        System.out.println(\"Position of 'c': \" + L.getPosition('c'));\n        L.insertElement(3, 'f');\n        L.printSeqList();\n        L.deleteElement(2);\n        L.printSeqList();\n        L.clearSeqList();\n        System.out.println(\"Is Empty: \" + L.isEmpty());\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 147, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nFirst, two classes are defined, namely the Plant class and the Zombie class. They both have attributes: name, health value, attack power; and methods: attack and death.\n\nThe attack method of the Plant class will cause attack damage to the enemy zombie; the attack method of the Zombie class will cause attack damage to the enemy plant. When the health value is less than or equal to 0, the death method will be triggered. The death method will output relevant information, such as whether it has died or how much health is left.\n\nNext, a Peashooter and a Conehead Zombie are created, representing the plant and the zombie respectively. Then a for loop is used to simulate the process of battle. In the loop, the plant attacks the zombie first, then the zombie attacks the plant. After each attack, the death method is called to confirm whether one side has died. When one side's health value is less than or equal to 0, the battle ends.\n\nFinally, the corresponding battle results are output.\n\nImplemented in JAVA, give me the code you implemented.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n\n    @Test\n    void testPlantConstructor() {\n        assertEquals(\"Peashooter\", peashooter.name);\n        assertEquals(100, peashooter.health);\n        assertEquals(20, peashooter.attack);\n    }\n}", "problem": "First, two classes are defined, namely the Plant class and the Zombie class. They both have attributes: name, health value, attack power; and methods: attack and death.\n\nThe attack method of the Plant class will cause attack damage to the enemy zombie; the attack method of the Zombie class will cause attack damage to the enemy plant. When the health value is less than or equal to 0, the death method will be triggered. The death method will output relevant information, such as whether it has died or how much health is left.\n\nNext, a Peashooter and a Conehead Zombie are created, representing the plant and the zombie respectively. Then a for loop is used to simulate the process of battle. In the loop, the plant attacks the zombie first, then the zombie attacks the plant. After each attack, the death method is called to confirm whether one side has died. When one side's health value is less than or equal to 0, the battle ends.\n\nFinally, the corresponding battle results are output.\n\nImplemented in JAVA, give me the code you implemented.", "testcases": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass PlantZombieTest {\n    private Plant peashooter;\n    private Zombie coneheadZombie;\n\n    @BeforeEach\n    void setUp() {\n        peashooter = new Plant(\"Peashooter\", 100, 20);\n        coneheadZombie = new Zombie(\"Conehead Zombie\", 150, 30);\n    }\n    @Test\n    void testZombieConstructor() {\n        assertEquals(\"Conehead Zombie\", coneheadZombie.name);\n        assertEquals(150, coneheadZombie.health);\n        assertEquals(30, coneheadZombie.attack);\n    }\n\n    @Test\n    void testPlantAttackReducesZombieHealth() {\n        peashooter.attack(coneheadZombie);\n        assertEquals(130, coneheadZombie.health);\n    }\n\n    @Test\n    void testZombieAttackReducesPlantHealth() {\n        coneheadZombie.attack(peashooter);\n        assertEquals(70, peashooter.health);\n    }\n\n    @Test\n    void testPlantDeath() {\n        peashooter.health = 0;\n        peashooter.checkDeath();\n        assertEquals(0, peashooter.health);\n    }\n\n    @Test\n    void testZombieDeath() {\n        coneheadZombie.health = 0;\n        coneheadZombie.checkDeath();\n        assertEquals(0, coneheadZombie.health);\n    }\n\n    @Test\n    void testPlantDeathAfterMultipleZombieAttacks() {\n        while (peashooter.health > 0) {\n            coneheadZombie.attack(peashooter);\n        }\n        assertTrue(peashooter.health <= 0);\n    }\n\n    @Test\n    void testZombieDeathAfterMultiplePlantAttacks() {\n        while (coneheadZombie.health > 0) {\n            peashooter.attack(coneheadZombie);\n        }\n        assertTrue(coneheadZombie.health <= 0);\n    }\n\n    @Test\n    void testPlantSurvivesAfterZombieAttack() {\n        coneheadZombie.attack(peashooter);\n        assertTrue(peashooter.health > 0);\n    }\n\n    @Test\n    void testZombieSurvivesAfterPlantAttack() {\n        peashooter.attack(coneheadZombie);\n        assertTrue(coneheadZombie.health > 0);\n    }\n}\n", "setup_code": "", "reference_solution": "```java\n\npublic class Plant {\n    String name;\n    int health;\n    int attack;\n\n    public Plant(String name, int health, int attack) {\n        this.name = name;\n        this.health = health;\n        this.attack = attack;\n    }\n\n    public void attack(Zombie zombie) {\n        zombie.health -= this.attack;\n        zombie.checkDeath();\n    }\n\n    public void checkDeath() {\n        if (this.health <= 0) {\n            System.out.println(this.name + \" is dead.\");\n        } else {\n            System.out.println(this.name + \" has \" + this.health + \" health left.\");\n        }\n    }\n}\n\nclass Zombie {\n    String name;\n    int health;\n    int attack;\n\n    public Zombie(String name, int health, int attack) {\n        this.name = name;\n        this.health = health;\n        this.attack = attack;\n    }\n\n    public void attack(Plant plant) {\n        plant.health -= this.attack;\n        plant.checkDeath();\n    }\n\n    public void checkDeath() {\n        if (this.health <= 0) {\n            System.out.println(this.name + \" is dead.\");\n        } else {\n            System.out.println(this.name + \" has \" + this.health + \" health left.\");\n        }\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Plant peashooter = new Plant(\"Peashooter\", 100, 20);\n        Zombie coneheadZombie = new Zombie(\"Conehead Zombie\", 150, 30);\n\n        for (int i = 0; i < 10; i++) {\n            peashooter.attack(coneheadZombie);\n            if (coneheadZombie.health <= 0) {\n                break;\n            }\n\n            coneheadZombie.attack(peashooter);\n            if (peashooter.health <= 0) {\n                break;\n            }\n        }\n    }\n}\n\n```", "classification": "Algorithm and Data Structure"}
{"_id": 148, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a method in Java, the input is in Chinese, and the output is the number of days from now to 23:59:59 today. For example: today, today, yesterday, yesterday (recent/this) recent x weeks (recent/this) recent x days (recent/this) recent X months are converted to 1 1 2 2 x*7 x total number of days in x months. Here x may be the Chinese character for one or the Arabic numeral 1, the maximum value of x is 12.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testGetDaysDifference_today() {\n        assertEquals(1, DateDifference.getDaysDifference(\"今天\"));\n    }\n}", "problem": "Write a method in Java, the input is in Chinese, and the output is the number of days from now to 23:59:59 today. For example: today, today, yesterday, yesterday (recent/this) recent x weeks (recent/this) recent x days (recent/this) recent X months are converted to 1 1 2 2 x*7 x total number of days in x months. Here x may be the Chinese character for one or the Arabic numeral 1, the maximum value of x is 12.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Calendar;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass DateDifferenceTest {\n    @Test\n    void testGetDaysDifference_today2() {\n        assertEquals(1, DateDifference.getDaysDifference(\"今日\"));\n    }\n\n    @Test\n    void testGetDaysDifference_yesterday() {\n        assertEquals(2, DateDifference.getDaysDifference(\"昨天\"));\n    }\n\n    @Test\n    void testGetDaysDifference_yesterday2() {\n        assertEquals(2, DateDifference.getDaysDifference(\"昨日\"));\n    }\n\n    @Test\n    void testGetDaysDifference_week() {\n        assertEquals(7, DateDifference.getDaysDifference(\"近一周\"));\n    }\n\n    @Test\n    void testGetDaysDifference_days() {\n        assertEquals(7, DateDifference.getDaysDifference(\"近7天\"));\n    }\n\n    @Test\n    void testGetDaysDifference_month() {\n        LocalDate now = LocalDate.now();\n        LocalDate pastDate = now.minusMonths(1);\n        int days = (int) ChronoUnit.DAYS.between(pastDate, now);\n        assertEquals(days, DateDifference.getDaysDifference(\"近一月\"));\n    }\n\n    @Test\n    void testGetDaysDifference_maxWeek() {\n        assertEquals(84, DateDifference.getDaysDifference(\"近十二周\"));\n    }\n\n    @Test\n    void testGetDaysDifference_maxDays() {\n        assertEquals(12, DateDifference.getDaysDifference(\"近十二天\"));\n    }\n\n    @Test\n    void testGetDaysDifference_maxMonth() {\n        LocalDate now = LocalDate.now();\n        LocalDate pastDate = now.minusMonths(12);\n        int days = (int) ChronoUnit.DAYS.between(pastDate, now);\n        assertEquals(days, DateDifference.getDaysDifference(\"近十二月\"));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Calendar;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class DateDifference {\n    private static final Map<String, Integer> CHINESE_NUMBERS = new HashMap<String, Integer>() {{\n        put(\"一\", 1);\n        put(\"二\", 2);\n        put(\"三\", 3);\n        put(\"四\", 4);\n        put(\"五\", 5);\n        put(\"六\", 6);\n        put(\"七\", 7);\n        put(\"八\", 8);\n        put(\"九\", 9);\n        put(\"十\", 10);\n        put(\"十一\", 11);\n        put(\"十二\", 12);\n    }};\n\n    public static int getDaysDifference(String chineseDate) {\n        LocalDate now = LocalDate.now();\n        int days = 0;\n\n        if (chineseDate.contains(\"今天\") || chineseDate.contains(\"今日\")) {\n            days = 1;\n        } else if (chineseDate.contains(\"昨天\") || chineseDate.contains(\"昨日\")) {\n            days = 2;\n        } else if (chineseDate.contains(\"近\")) {\n            String numberStr = chineseDate.replaceAll(\"[^0-9一二三四五六七八九十]\", \"\");\n            int number = CHINESE_NUMBERS.containsKey(numberStr) ? CHINESE_NUMBERS.get(numberStr) : Integer.parseInt(numberStr);\n\n            if (chineseDate.contains(\"周\")) {\n                days = number * 7;\n            } else if (chineseDate.contains(\"天\")) {\n                days = number;\n            } else if (chineseDate.contains(\"月\")) {\n                LocalDate pastDate = now.minusMonths(number);\n                days = (int) ChronoUnit.DAYS.between(pastDate, now);\n            }\n        }\n\n        return days;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getDaysDifference(\"今天\")); // 1\n        System.out.println(getDaysDifference(\"昨天\")); // 2\n        System.out.println(getDaysDifference(\"近一周\")); // 7\n        System.out.println(getDaysDifference(\"近7天\")); // 7\n        System.out.println(getDaysDifference(\"近一月\")); // depends on the current date\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 149, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a private static String readPathTest(String path) method, which extracts the file name from the given path. The path hierarchy is separated by `/`.\nFor example, if you input /courses/lecture/Lecture01.pdf, it should return: Lecture01.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testReadPathTest1() {\n        assertEquals(\"Lecture01\", PathReader.readPathTest(\"/courses/lecture/Lecture01.pdf\"));\n    }\n}", "problem": "Write a private static String readPathTest(String path) method, which extracts the file name from the given path. The path hierarchy is separated by `/`.\nFor example, if you input /courses/lecture/Lecture01.pdf, it should return: Lecture01.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\nclass PathReaderTest {\n    @Test\n    void testReadPathTest2() {\n        assertEquals(\"index\", PathReader.readPathTest(\"/www/index.html\"));\n    }\n\n    @Test\n    void testReadPathTest3() {\n        assertEquals(\"test\", PathReader.readPathTest(\"/test.txt\"));\n    }\n\n    @Test\n    void testReadPathTest4() {\n        assertEquals(\"file\", PathReader.readPathTest(\"/dir/subdir/file.jpg\"));\n    }\n\n    @Test\n    void testReadPathTest5() {\n        assertEquals(\"document\", PathReader.readPathTest(\"/folder/document.docx\"));\n    }\n\n    @Test\n    void testReadPathTest6() {\n        assertEquals(\"image\", PathReader.readPathTest(\"/path/to/image.png\"));\n    }\n\n    @Test\n    void testReadPathTest7() {\n        assertEquals(\"file\", PathReader.readPathTest(\"/file\"));\n    }\n\n    @Test\n    void testReadPathTest8() {\n        assertEquals(\"\", PathReader.readPathTest(\"/\"));\n    }\n\n    @Test\n    void testReadPathTest9() {\n        assertEquals(\"file\", PathReader.readPathTest(\"file.txt\"));\n    }\n\n    @Test\n    void testReadPathTest10() {\n        assertEquals(\"\", PathReader.readPathTest(\"\"));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\npublic class PathReader {\n\n    public static String readPathTest(String path) {\n        // 检查路径是否为空或null\n        if (path == null || path.isEmpty()) {\n            return \"\";\n        }\n\n        // 查找最后一个'/'的位置\n        int lastSlashIndex = path.lastIndexOf('/');\n\n        // 从最后一个'/'之后提取文件名（包括扩展名）\n        String fileNameWithExtension = path.substring(lastSlashIndex + 1);\n\n        // 查找文件名中'.'的位置，用以去除扩展名\n        int dotIndex = fileNameWithExtension.indexOf('.');\n\n        // 如果没有扩展名，直接返回文件名\n        if (dotIndex == -1) {\n            return fileNameWithExtension;\n        }\n\n        // 返回没有扩展名的文件名\n        return fileNameWithExtension.substring(0, dotIndex);\n    }\n\n    // 可以在这里添加main方法来测试功能\n    public static void main(String[] args) {\n        String path = \"/courses/lecture/Lecture01.pdf\";\n        System.out.println(readPathTest(path)); // 应该输出 \"Lecture01\"\n    }\n}\n\n```", "classification": "Operation System"}
{"_id": 150, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a main class in Java, including 2 methods. In the main method, read a string from the keyboard and call the isRightIP(String ip) method to test whether the input string is a valid IP. If correct, output true, if incorrect, output false. The method to verify the IP address can be defined as public boolean isRightIP(String ip), where the parameter ip is the IP address to be verified. The IP address consists of 4 parts, formatted as x.x.x.x; where each x is an integer between 0~255, each part is separated by \".\", for example, 192.168.1.1. Please provide at least two methods to solve this problem, one of which must use regular expressions.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testIsRightIP() {\n        assertTrue(Main.isRightIP(\"192.168.1.1\"));\n        assertFalse(Main.isRightIP(\"192.168.1.256\"));\n        assertFalse(Main.isRightIP(\"192.168.1.-1\"));\n        assertFalse(Main.isRightIPByRegex(\"192.168.1.256\"));\n        assertFalse(Main.isRightIPByRegex(\"192.168.1.1.1\"));\n        assertFalse(Main.isRightIPByRegex(\"192.168.1\"));\n    }\n}", "problem": "Write a main class in Java, including 2 methods. In the main method, read a string from the keyboard and call the isRightIP(String ip) method to test whether the input string is a valid IP. If correct, output true, if incorrect, output false. The method to verify the IP address can be defined as public boolean isRightIP(String ip), where the parameter ip is the IP address to be verified. The IP address consists of 4 parts, formatted as x.x.x.x; where each x is an integer between 0~255, each part is separated by \".\", for example, 192.168.1.1. Please provide at least two methods to solve this problem, one of which must use regular expressions.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\nclass MainTest {\n    @Test\n    void testIsRightIPByRegex() {\n        assertTrue(Main.isRightIPByRegex(\"192.168.1.1\"));\n        assertFalse(Main.isRightIP(\"192.168.1.1.1\"));\n        assertFalse(Main.isRightIP(\"192.168.1\"));\n        assertFalse(Main.isRightIP(\"192.168.1.a\"));\n        assertFalse(Main.isRightIPByRegex(\"192.168.1.a\"));\n        assertFalse(Main.isRightIPByRegex(\"192.168.1.-1\"));\n    }\n\n    @Test\n    void testIsRightIPBoundary() {\n        assertTrue(Main.isRightIP(\"0.0.0.0\"));\n        assertTrue(Main.isRightIP(\"255.255.255.255\"));\n        assertFalse(Main.isRightIP(\"256.256.256.256\"));\n        assertFalse(Main.isRightIP(\"\"));\n    }\n\n    @Test\n    void testIsRightIPByRegexBoundary() {\n        assertTrue(Main.isRightIPByRegex(\"0.0.0.0\"));\n        assertTrue(Main.isRightIPByRegex(\"255.255.255.255\"));\n        assertFalse(Main.isRightIPByRegex(\"256.256.256.256\"));\n        assertFalse(Main.isRightIPByRegex(\"\"));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\n\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入IP地址：\");\n        String ip = scanner.nextLine();\n        System.out.println(\"方法一验证结果：\" + isRightIP(ip));\n        System.out.println(\"方法二验证结果：\" + isRightIPByRegex(ip));\n    }\n\n    // 方法一：使用字符串分割和整数解析\n    public static boolean isRightIP(String ip) {\n        if (ip == null || ip.length() == 0) {\n            return false;\n        }\n        String[] parts = ip.split(\"\\\\.\");\n        if (parts.length != 4) {\n            return false;\n        }\n        for (String part : parts) {\n            try {\n                int num = Integer.parseInt(part);\n                if (num < 0 || num > 255) {\n                    return false;\n                }\n            } catch (NumberFormatException e) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // 方法二：使用正则表达式\n    public static boolean isRightIPByRegex(String ip) {\n        if (ip == null || ip.length() == 0) {\n            return false;\n        }\n        String regex = \"^((25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)$\";\n        return Pattern.matches(regex, ip);\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 151, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nImplement the following function in Java:\nFind all the following content from the string:\n\"supported_mobiles\":[\"13001597927\",\"13001740938\",\"13001910099\"]\nThe content in the brackets in this string may be empty, if not empty, it must contain mobile phone numbers.\nPlease export all the mobile phone numbers in the string.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testExtractPhoneNumbers1() {\n        String str = \"\\\"supported_mobiles\\\":[\\\"13001597927\\\",\\\"13001740938\\\",\\\"13001910099\\\"]\";\n        List<String> expected = new ArrayList<>();\n        expected.add(\"13001597927\");\n        expected.add(\"13001740938\");\n        expected.add(\"13001910099\");\n        assertEquals(expected, Main.extractPhoneNumbers(str));\n    }\n}", "problem": "Implement the following function in Java:\nFind all the following content from the string:\n\"supported_mobiles\":[\"13001597927\",\"13001740938\",\"13001910099\"]\nThe content in the brackets in this string may be empty, if not empty, it must contain mobile phone numbers.\nPlease export all the mobile phone numbers in the string.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass MainTest {\n    @Test\n    void testExtractPhoneNumbers2() {\n        String str = \"\\\"supported_mobiles\\\":[]\";\n        List<String> expected = new ArrayList<>();\n        assertEquals(expected, Main.extractPhoneNumbers(str));\n    }\n\n    @Test\n    void testExtractPhoneNumbers3() {\n        String str = \"\\\"supported_mobiles\\\":[\\\"13001597927\\\"]\";\n        List<String> expected = new ArrayList<>();\n        expected.add(\"13001597927\");\n        assertEquals(expected, Main.extractPhoneNumbers(str));\n    }\n\n    @Test\n    void testExtractPhoneNumbers4() {\n        String str = \"\\\"supported_mobiles\\\":[\\\"13001597927\\\",\\\"13001740938\\\"]\";\n        List<String> expected = new ArrayList<>();\n        expected.add(\"13001597927\");\n        expected.add(\"13001740938\");\n        assertEquals(expected, Main.extractPhoneNumbers(str));\n    }\n\n    @Test\n    void testExtractPhoneNumbers5() {\n        String str = \"\\\"supported_mobiles\\\":[\\\"13001597927\\\",\\\"13001740938\\\",\\\"13001910099\\\",\\\"13001910099\\\"]\";\n        List<String> expected = new ArrayList<>();\n        expected.add(\"13001597927\");\n        expected.add(\"13001740938\");\n        expected.add(\"13001910099\");\n        expected.add(\"13001910099\");\n        assertEquals(expected, Main.extractPhoneNumbers(str));\n    }\n\n    @Test\n    void testExtractPhoneNumbers6() {\n        String str = \"\\\"supported_mobiles\\\":[\\\"13001597927\\\",\\\"13001740938\\\",\\\"13001910099\\\",\\\"13001910099\\\",\\\"13001910099\\\"]\";\n        List<String> expected = new ArrayList<>();\n        expected.add(\"13001597927\");\n        expected.add(\"13001740938\");\n        expected.add(\"13001910099\");\n        expected.add(\"13001910099\");\n        expected.add(\"13001910099\");\n        assertEquals(expected, Main.extractPhoneNumbers(str));\n    }\n\n    @Test\n    void testExtractPhoneNumbers7() {\n        String str = \"\";\n        List<String> expected = new ArrayList<>();\n        assertEquals(expected, Main.extractPhoneNumbers(str));\n    }\n\n}", "setup_code": "", "reference_solution": "```java\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        String str = \"\\\"supported_mobiles\\\":[\\\"13001597927\\\",\\\"13001740938\\\",\\\"13001910099\\\"]\";\n        List<String> phoneNumbers = extractPhoneNumbers(str);\n        for (String phoneNumber : phoneNumbers) {\n            System.out.println(phoneNumber);\n        }\n    }\n\n    public static List<String> extractPhoneNumbers(String str) {\n        List<String> phoneNumbers = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"\\\"supported_mobiles\\\":\\\\[\\\"(.*?)\\\"\\\\]\");\n        Matcher matcher = pattern.matcher(str);\n        while (matcher.find()) {\n            String group = matcher.group(1);\n            String[] numbers = group.split(\"\\\",\\\"\");\n            for (String number : numbers) {\n                phoneNumbers.add(number);\n            }\n        }\n        return phoneNumbers;\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 152, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nFor this discussion, you will write a Java program that implements the following matrix operations.\n• Meet:\no Given two m × n Boolean matrices, return the meet of the matrices.\n• Join:\no Given two m × n Boolean matrices, return the join of the matrices.\nWrite main to test all the methods\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testMeet1() {\n        boolean[][] matrix1 = {{true, false}, {false, true}};\n        boolean[][] matrix2 = {{false, true}, {true, false}};\n        boolean[][] expected = {{false, false}, {false, false}};\n        assertArrayEquals(expected, MatrixOperations.meet(matrix1, matrix2));\n    }\n}", "problem": "For this discussion, you will write a Java program that implements the following matrix operations.\n• Meet:\no Given two m × n Boolean matrices, return the meet of the matrices.\n• Join:\no Given two m × n Boolean matrices, return the join of the matrices.\nWrite main to test all the methods", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass MatrixOperationsTest {\n    @Test\n    void testMeet2() {\n        boolean[][] matrix1 = {{true, true}, {true, true}};\n        boolean[][] matrix2 = {{false, true}, {true, false}};\n        boolean[][] expected = {{false, true}, {true, false}};\n        assertArrayEquals(expected, MatrixOperations.meet(matrix1, matrix2));\n    }\n\n    @Test\n    void testMeet3() {\n        boolean[][] matrix1 = {{false, false}, {false, false}};\n        boolean[][] matrix2 = {{false, true}, {true, false}};\n        boolean[][] expected = {{false, false}, {false, false}};\n        assertArrayEquals(expected, MatrixOperations.meet(matrix1, matrix2));\n    }\n\n    @Test\n    void testMeet4() {\n        boolean[][] matrix1 = {{true, false}, {false, true}};\n        boolean[][] matrix2 = {{true, false}, {false, true}};\n        boolean[][] expected = {{true, false}, {false, true}};\n        assertArrayEquals(expected, MatrixOperations.meet(matrix1, matrix2));\n    }\n\n    @Test\n    void testMeet5() {\n        boolean[][] matrix1 = {{false, true}, {true, false}};\n        boolean[][] matrix2 = {{false, true}, {true, false}};\n        boolean[][] expected = {{false, true}, {true, false}};\n        assertArrayEquals(expected, MatrixOperations.meet(matrix1, matrix2));\n    }\n\n    @Test\n    void testMeet6() {\n        boolean[][] matrix1 = {{true, true}, {true, true}};\n        boolean[][] matrix2 = {{true, true}, {true, true}};\n        boolean[][] expected = {{true, true}, {true, true}};\n        assertArrayEquals(expected, MatrixOperations.meet(matrix1, matrix2));\n    }\n\n    @Test\n    void testJoin1() {\n        boolean[][] matrix1 = {{true, false}, {false, true}};\n        boolean[][] matrix2 = {{false, true}, {true, false}};\n        boolean[][] expected = {{true, true}, {true, true}};\n        assertArrayEquals(expected, MatrixOperations.join(matrix1, matrix2));\n    }\n\n    @Test\n    void testJoin2() {\n        boolean[][] matrix1 = {{true, true}, {true, true}};\n        boolean[][] matrix2 = {{false, true}, {true, false}};\n        boolean[][] expected = {{true, true}, {true, true}};\n        assertArrayEquals(expected, MatrixOperations.join(matrix1, matrix2));\n    }\n\n    @Test\n    void testJoin3() {\n        boolean[][] matrix1 = {{false, false}, {false, false}};\n        boolean[][] matrix2 = {{false, true}, {true, false}};\n        boolean[][] expected = {{false, true}, {true, false}};\n        assertArrayEquals(expected, MatrixOperations.join(matrix1, matrix2));\n    }\n\n    @Test\n    void testJoin4() {\n        boolean[][] matrix1 = {{true, false}, {false, true}};\n        boolean[][] matrix2 = {{true, false}, {false, true}};\n        boolean[][] expected = {{true, false}, {false, true}};\n        assertArrayEquals(expected, MatrixOperations.join(matrix1, matrix2));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\n\npublic class MatrixOperations {\n    public static boolean[][] meet(boolean[][] matrix1, boolean[][] matrix2) {\n        int m = matrix1.length;\n        int n = matrix1[0].length;\n        boolean[][] result = new boolean[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                result[i][j] = matrix1[i][j] && matrix2[i][j];\n            }\n        }\n        return result;\n    }\n\n    public static boolean[][] join(boolean[][] matrix1, boolean[][] matrix2) {\n        int m = matrix1.length;\n        int n = matrix1[0].length;\n        boolean[][] result = new boolean[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                result[i][j] = matrix1[i][j] || matrix2[i][j];\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        boolean[][] matrix1 = {{true, false}, {false, true}};\n        boolean[][] matrix2 = {{false, true}, {true, false}};\n        boolean[][] meetResult = meet(matrix1, matrix2);\n        boolean[][] joinResult = join(matrix1, matrix2);\n        System.out.println(\"Meet Result:\");\n        for (boolean[] row : meetResult) {\n            for (boolean value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n        System.out.println(\"Join Result:\");\n        for (boolean[] row : joinResult) {\n            for (boolean value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 153, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\n1. Design and write a console application that inputs the gender, height, and weight of an adult, calculates their BMI (Body Mass Index), using the formula: BMI = Weight / (Height * Height), and draws a conclusion.\n\nConclusion\nMale\nFemale\n\nUnderweight\nIndex<20\nIndex<19\n\nNormal\n20≤Index<25\n19≤Index<24\n\nOverweight\n25≤Index<30\n24≤Index<29\n\nObese\n30≤Index<35\n29≤Index<34\n\nExtremely Obese\nIndex≥35\nIndex≥34\n\n\n(1) Write an abstract class People, with two properties, Height and Weight, a method to calculate BMI, CalculateBMI, and an abstract method to draw a conclusion, Conclusion.\nDetailed code:\n\n(2) Write two classes, Man and Woman, that inherit from the People class, and override the Conclusion abstract method.\nDetailed code:\n\n\n(3) Write the control flow, inputting the gender, height, and weight of an adult.\nDetailed code:\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n@Test\nvoid testManUnderweight() {\n    Man man = new Man(1.8, 60);\n    assertEquals(\"过轻\", man.conclusion());\n}\n}", "problem": "1. Design and write a console application that inputs the gender, height, and weight of an adult, calculates their BMI (Body Mass Index), using the formula: BMI = Weight / (Height * Height), and draws a conclusion.\n\nConclusion\nMale\nFemale\n\nUnderweight\nIndex<20\nIndex<19\n\nNormal\n20≤Index<25\n19≤Index<24\n\nOverweight\n25≤Index<30\n24≤Index<29\n\nObese\n30≤Index<35\n29≤Index<34\n\nExtremely Obese\nIndex≥35\nIndex≥34\n\n\n(1) Write an abstract class People, with two properties, Height and Weight, a method to calculate BMI, CalculateBMI, and an abstract method to draw a conclusion, Conclusion.\nDetailed code:\n\n(2) Write two classes, Man and Woman, that inherit from the People class, and override the Conclusion abstract method.\nDetailed code:\n\n\n(3) Write the control flow, inputting the gender, height, and weight of an adult.\nDetailed code:", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Scanner;\n\nclass MainTest {\n@Test\nvoid testManNormal() {\n    Man man = new Man(1.8, 75);\n    assertEquals(\"适中\", man.conclusion());\n}\n\n@Test\nvoid testManOverweight() {\n    Man man = new Man(1.8, 90);\n    assertEquals(\"过重\", man.conclusion());\n}\n\n@Test\nvoid testManObese() {\n    Man man = new Man(1.8, 110);\n    assertEquals(\"肥胖\", man.conclusion());\n}\n\n@Test\nvoid testManExtremelyObese() {\n    Man man = new Man(1.8, 130);\n    assertEquals(\"非常肥胖\", man.conclusion());\n}\n\n@Test\nvoid testWomanUnderweight() {\n    Woman woman = new Woman(1.6, 45);\n    assertEquals(\"过轻\", woman.conclusion());\n}\n\n@Test\nvoid testWomanNormal() {\n    Woman woman = new Woman(1.6, 55);\n    assertEquals(\"适中\", woman.conclusion());\n}\n\n@Test\nvoid testWomanOverweight() {\n    Woman woman = new Woman(1.6, 70);\n    assertEquals(\"过重\", woman.conclusion());\n}\n\n@Test\nvoid testWomanObese() {\n    Woman woman = new Woman(1.6, 85);\n    assertEquals(\"肥胖\", woman.conclusion());\n}\n\n@Test\nvoid testWomanExtremelyObese() {\n    Woman woman = new Woman(1.6, 100);\n    assertEquals(\"非常肥胖\", woman.conclusion());\n}\n}", "setup_code": "", "reference_solution": "```java\n\nimport java.util.Scanner;\n\nabstract class People {\n    protected double height;\n    protected double weight;\n\n    public People(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n    }\n\n    public double calculateBMI() {\n        return weight / (height * height);\n    }\n\n    public abstract String conclusion();\n}\n\nclass Man extends People {\n    public Man(double height, double weight) {\n        super(height, weight);\n    }\n\n    public String conclusion() {\n        double bmi = calculateBMI();\n        if (bmi < 20) {\n            return \"过轻\";\n        } else if (bmi < 25) {\n            return \"适中\";\n        } else if (bmi < 30) {\n            return \"过重\";\n        } else if (bmi < 35) {\n            return \"肥胖\";\n        } else {\n            return \"非常肥胖\";\n        }\n    }\n}\n\nclass Woman extends People {\n    public Woman(double height, double weight) {\n        super(height, weight);\n    }\n\n    public String conclusion() {\n        double bmi = calculateBMI();\n        if (bmi < 19) {\n            return \"过轻\";\n        } else if (bmi < 24) {\n            return \"适中\";\n        } else if (bmi < 29) {\n            return \"过重\";\n        } else if (bmi < 34) {\n            return \"肥胖\";\n        } else {\n            return \"非常肥胖\";\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入性别（男/女）：\");\n        String gender = scanner.next();\n        System.out.println(\"请输入身高（米）：\");\n        double height = scanner.nextDouble();\n        System.out.println(\"请输入体重（千克）：\");\n        double weight = scanner.nextDouble();\n\n        People people;\n        if (gender.equals(\"男\")) {\n            people = new Man(height, weight);\n        } else {\n            people = new Woman(height, weight);\n        }\n\n        System.out.println(\"BMI指数为：\" + people.calculateBMI());\n        System.out.println(\"结论为：\" + people.conclusion());\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 154, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nGiven the following html code, how to use jsoup to get the content Ihtesham Haider, the html code is as follows:\n<div dir=\"ltr\" class=\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\">\n\t<span class=\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\">\n\t\t<span class=\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\">Ihtesham Haider</span>\n\t</span>\n</div>\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testMain1() {\n        String html = \"<div dir=\\\"ltr\\\" class=\\\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\\\">Ihtesham Haider</span>\" +\n                \"</span>\" +\n                \"</div>\";\n        Document doc = Jsoup.parse(html);\n        Element span = doc.select(\"span.css-901oao.css-16my406.r-poiln3.r-bcqeeo.r-qvutc0\").first();\n        String content = span.text();\n        assertEquals(\"Ihtesham Haider\", content);\n    }\n}", "problem": "Given the following html code, how to use jsoup to get the content Ihtesham Haider, the html code is as follows:\n<div dir=\"ltr\" class=\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\">\n\t<span class=\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\">\n\t\t<span class=\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\">Ihtesham Haider</span>\n\t</span>\n</div>", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\n\nclass MainTest {\n    @Test\n    void testMain2() {\n        String html = \"<div dir=\\\"ltr\\\" class=\\\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\\\">John Doe</span>\" +\n                \"</span>\" +\n                \"</div>\";\n        Document doc = Jsoup.parse(html);\n        Element span = doc.select(\"span.css-901oao.css-16my406.r-poiln3.r-bcqeeo.r-qvutc0\").first();\n        String content = span.text();\n        assertEquals(\"John Doe\", content);\n    }\n\n    @Test\n    void testMain3() {\n        String html = \"<div dir=\\\"ltr\\\" class=\\\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\\\">Jane Doe</span>\" +\n                \"</span>\" +\n                \"</div>\";\n        Document doc = Jsoup.parse(html);\n        Element span = doc.select(\"span.css-901oao.css-16my406.r-poiln3.r-bcqeeo.r-qvutc0\").first();\n        String content = span.text();\n        assertEquals(\"Jane Doe\", content);\n    }\n\n    @Test\n    void testMain4() {\n        String html = \"<div dir=\\\"ltr\\\" class=\\\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\\\">Alice Bob</span>\" +\n                \"</span>\" +\n                \"</div>\";\n        Document doc = Jsoup.parse(html);\n        Element span = doc.select(\"span.css-901oao.css-16my406.r-poiln3.r-bcqeeo.r-qvutc0\").first();\n        String content = span.text();\n        assertEquals(\"Alice Bob\", content);\n    }\n\n    @Test\n    void testMain5() {\n        String html = \"<div dir=\\\"ltr\\\" class=\\\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\\\">Charlie Doe</span>\" +\n                \"</span>\" +\n                \"</div>\";\n        Document doc = Jsoup.parse(html);\n        Element span = doc.select(\"span.css-901oao.css-16my406.r-poiln3.r-bcqeeo.r-qvutc0\").first();\n        String content = span.text();\n        assertEquals(\"Charlie Doe\", content);\n    }\n\n    @Test\n    void testMain6() {\n        String html = \"<div dir=\\\"ltr\\\" class=\\\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\\\">David Smith</span>\" +\n                \"</span>\" +\n                \"</div>\";\n        Document doc = Jsoup.parse(html);\n        Element span = doc.select(\"span.css-901oao.css-16my406.r-poiln3.r-bcqeeo.r-qvutc0\").first();\n        String content = span.text();\n        assertEquals(\"David Smith\", content);\n    }\n\n    @Test\n    void testMain7() {\n        String html = \"<div dir=\\\"ltr\\\" class=\\\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\\\">Eve Alice</span>\" +\n                \"</span>\" +\n                \"</div>\";\n        Document doc = Jsoup.parse(html);\n        Element span = doc.select(\"span.css-901oao.css-16my406.r-poiln3.r-bcqeeo.r-qvutc0\").first();\n        String content = span.text();\n        assertEquals(\"Eve Alice\", content);\n    }\n\n    @Test\n    void testMain8() {\n        String html = \"<div dir=\\\"ltr\\\" class=\\\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\\\">Frank Doe</span>\" +\n                \"</span>\" +\n                \"</div>\";\n        Document doc = Jsoup.parse(html);\n        Element span = doc.select(\"span.css-901oao.css-16my406.r-poiln3.r-bcqeeo.r-qvutc0\").first();\n        String content = span.text();\n        assertEquals(\"Frank Doe\", content);\n    }\n\n    @Test\n    void testMain9() {\n        String html = \"<div dir=\\\"ltr\\\" class=\\\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\\\">Grace Hopper</span>\" +\n                \"</span>\" +\n                \"</div>\";\n        Document doc = Jsoup.parse(html);\n        Element span = doc.select(\"span.css-901oao.css-16my406.r-poiln3.r-bcqeeo.r-qvutc0\").first();\n        String content = span.text();\n        assertEquals(\"Grace Hopper\", content);\n    }\n\n    @Test\n    void testMain10() {\n        String html = \"<div dir=\\\"ltr\\\" class=\\\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\\\">\" +\n                \"<span class=\\\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\\\">Helen Doe</span>\" +\n                \"</span>\" +\n                \"</div>\";\n        Document doc = Jsoup.parse(html);\n        Element span = doc.select(\"span.css-901oao.css-16my406.r-poiln3.r-bcqeeo.r-qvutc0\").first();\n        String content = span.text();\n        assertEquals(\"Helen Doe\", content);\n    }\n}", "setup_code": "", "reference_solution": "```java\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\n\npublic class Main {\n    public static void main(String[] args) {\n        String html = \"<div dir=\\\"ltr\\\" class=\\\"css-901oao r-1awozwy r-18jsvk2 r-6koalj r-37j5jr r-a023e6 r-b88u0q r-rjixqe r-bcqeeo r-1udh08x r-3s2u2q r-qvutc0\\\">\\n\" +\n                \"\\t<span class=\\\"css-901oao css-16my406 css-1hf3ou5 r-poiln3 r-bcqeeo r-qvutc0\\\">\\n\" +\n                \"\\t\\t<span class=\\\"css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0\\\">Ihtesham Haider</span>\\n\" +\n                \"\\t</span>\\n\" +\n                \"</div>\";\n\n        Document doc = Jsoup.parse(html);\n        Element span = doc.select(\"span.css-901oao.css-16my406.r-poiln3.r-bcqeeo.r-qvutc0\").first();\n        String content = span.text();\n        System.out.println(content);\n    }\n}\n\n```", "classification": "Front-End"}
{"_id": 155, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWhen submitting Java assignments through the job system, you need to enter the Java source code file name and your own email. Before submission, check the validity of the Java file name and email. Write a program to check the validity of the entered Java file name and email.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testIsValidJavaFileName1() {\n        assertTrue(Main.isValidJavaFileName(\"Test.java\"));\n    }\n}", "problem": "When submitting Java assignments through the job system, you need to enter the Java source code file name and your own email. Before submission, check the validity of the Java file name and email. Write a program to check the validity of the entered Java file name and email.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass MainTest {\n    @Test\n    void testIsValidJavaFileName2() {\n        assertFalse(Main.isValidJavaFileName(\"Test.txt\"));\n    }\n\n    @Test\n    void testIsValidJavaFileName3() {\n        assertFalse(Main.isValidJavaFileName(\"Test\"));\n    }\n\n    @Test\n    void testIsValidJavaFileName4() {\n        assertTrue(Main.isValidJavaFileName(\"Test.JAVA\"));\n    }\n\n    @Test\n    void testIsValidJavaFileName5() {\n        assertFalse(Main.isValidJavaFileName(\"Test.JAVA.txt\"));\n    }\n\n    @Test\n    void testIsValidJavaFileName6() {\n        assertTrue(Main.isValidJavaFileName(\"123.java\"));\n    }\n\n    @Test\n    void testIsValidEmail1() {\n        assertTrue(Main.isValidEmail(\"test@example.com\"));\n    }\n\n    @Test\n    void testIsValidEmail2() {\n        assertFalse(Main.isValidEmail(\"test@example\"));\n    }\n\n    @Test\n    void testIsValidEmail3() {\n        assertFalse(Main.isValidEmail(\"test@.com\"));\n    }\n\n    @Test\n    void testIsValidEmail4() {\n        assertFalse(Main.isValidEmail(\"test.com\"));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Main {\n    public static void main(String[] args) {\n        String fileName = \"Test.java\";\n        String email = \"test@example.com\";\n\n        if (isValidJavaFileName(fileName) && isValidEmail(email)) {\n            System.out.println(\"Java file name and email are valid.\");\n        } else {\n            System.out.println(\"Java file name or email is invalid.\");\n        }\n    }\n\n    public static boolean isValidJavaFileName(String fileName) {\n        // 文件名不能为空，且必须以.java结尾\n        return fileName != null && !fileName.isEmpty() && fileName.toLowerCase().endsWith(\".java\");\n    }\n\n    public static boolean isValidEmail(String email) {\n        String regex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(email);\n        return matcher.matches();\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 156, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nHow to quickly assign values to the data in xAxis and series using fastjson, the following json must be used:\n{\n\t\"xAxis\": {\n\t\t\"type\": \"category\",\n\t\t\"data\": [\n\t\t\t\"Mon\",\n\t\t\t\"Tue\",\n\t\t\t\"Wed\",\n\t\t\t\"Thu\",\n\t\t\t\"Fri\",\n\t\t\t\"Sat\",\n\t\t\t\"Sun\"\n\t\t]\n\t},\n\t\"yAxis\": {\n\t\t\"type\": \"value\"\n\t},\n\t\"series\": [{\n\t\t\"data\": [\n\t\t\t150,\n\t\t\t230,\n\t\t\t224,\n\t\t\t218,\n\t\t\t135,\n\t\t\t147,\n\t\t\t260\n\t\t],\n\t\t\"type\": \"line\"\n\t}]\n}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testMain1() {\n        String jsonStr = \"{\\n\" +\n                \"\\t\\\"xAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"category\\\",\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t\\\"Mon\\\",\\n\" +\n                \"\\t\\t\\t\\\"Tue\\\",\\n\" +\n                \"\\t\\t\\t\\\"Wed\\\",\\n\" +\n                \"\\t\\t\\t\\\"Thu\\\",\\n\" +\n                \"\\t\\t\\t\\\"Fri\\\",\\n\" +\n                \"\\t\\t\\t\\\"Sat\\\",\\n\" +\n                \"\\t\\t\\t\\\"Sun\\\"\\n\" +\n                \"\\t\\t]\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"yAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"value\\\"\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"series\\\": [{\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t150,\\n\" +\n                \"\\t\\t\\t230,\\n\" +\n                \"\\t\\t\\t224,\\n\" +\n                \"\\t\\t\\t218,\\n\" +\n                \"\\t\\t\\t135,\\n\" +\n                \"\\t\\t\\t147,\\n\" +\n                \"\\t\\t\\t260\\n\" +\n                \"\\t\\t],\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"line\\\"\\n\" +\n                \"\\t}]\\n\" +\n                \"}\";\n        JSONObject jsonObject = JSON.parseObject(jsonStr);\n        JSONObject xAxis = jsonObject.getJSONObject(\"xAxis\");\n        JSONArray xAxisData = xAxis.getJSONArray(\"data\");\n        assertEquals(\"Mon\", xAxisData.getString(0));\n        assertEquals(\"Tue\", xAxisData.getString(1));\n        assertEquals(\"Wed\", xAxisData.getString(2));\n        assertEquals(\"Thu\", xAxisData.getString(3));\n        assertEquals(\"Fri\", xAxisData.getString(4));\n        assertEquals(\"Sat\", xAxisData.getString(5));\n        assertEquals(\"Sun\", xAxisData.getString(6));\n\n        JSONArray series = jsonObject.getJSONArray(\"series\");\n        JSONObject seriesData = series.getJSONObject(0);\n        JSONArray data = seriesData.getJSONArray(\"data\");\n        assertEquals(150, data.getInteger(0));\n        assertEquals(230, data.getInteger(1));\n        assertEquals(224, data.getInteger(2));\n        assertEquals(218, data.getInteger(3));\n        assertEquals(135, data.getInteger(4));\n        assertEquals(147, data.getInteger(5));\n        assertEquals(260, data.getInteger(6));\n    }\n}", "problem": "How to quickly assign values to the data in xAxis and series using fastjson, the following json must be used:\n{\n\t\"xAxis\": {\n\t\t\"type\": \"category\",\n\t\t\"data\": [\n\t\t\t\"Mon\",\n\t\t\t\"Tue\",\n\t\t\t\"Wed\",\n\t\t\t\"Thu\",\n\t\t\t\"Fri\",\n\t\t\t\"Sat\",\n\t\t\t\"Sun\"\n\t\t]\n\t},\n\t\"yAxis\": {\n\t\t\"type\": \"value\"\n\t},\n\t\"series\": [{\n\t\t\"data\": [\n\t\t\t150,\n\t\t\t230,\n\t\t\t224,\n\t\t\t218,\n\t\t\t135,\n\t\t\t147,\n\t\t\t260\n\t\t],\n\t\t\"type\": \"line\"\n\t}]\n}", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport com.alibaba.fastjson2.JSON;\nimport com.alibaba.fastjson2.JSONArray;\nimport com.alibaba.fastjson2.JSONObject;\n\nclass MainTest {\n    @Test\n    void testMain2() {\n        String jsonStr = \"{\\n\" +\n                \"\\t\\\"xAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"category\\\",\\n\" +\n                \"\\t\\t\\\"data\\\": []\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"yAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"value\\\"\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"series\\\": []\\n\" +\n                \"}\";\n        JSONObject jsonObject = JSON.parseObject(jsonStr);\n        JSONObject xAxis = jsonObject.getJSONObject(\"xAxis\");\n        JSONArray xAxisData = xAxis.getJSONArray(\"data\");\n        assertEquals(0, xAxisData.size());\n\n        JSONArray series = jsonObject.getJSONArray(\"series\");\n        assertEquals(0, series.size());\n    }\n\n    @Test\n    void testMain3() {\n        String jsonStr = \"{\\n\" +\n                \"\\t\\\"xAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"category\\\",\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t\\\"Mon\\\"\\n\" +\n                \"\\t\\t]\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"yAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"value\\\"\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"series\\\": [{\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t150\\n\" +\n                \"\\t\\t],\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"line\\\"\\n\" +\n                \"\\t}]\\n\" +\n                \"}\";\n        JSONObject jsonObject = JSON.parseObject(jsonStr);\n        JSONObject xAxis = jsonObject.getJSONObject(\"xAxis\");\n        JSONArray xAxisData = xAxis.getJSONArray(\"data\");\n        assertEquals(\"Mon\", xAxisData.getString(0));\n\n        JSONArray series = jsonObject.getJSONArray(\"series\");\n        JSONObject seriesData = series.getJSONObject(0);\n        JSONArray data = seriesData.getJSONArray(\"data\");\n        assertEquals(150, data.getInteger(0));\n    }\n\n    @Test\n    void testMain4() {\n        String jsonStr = \"{\\n\" +\n                \"\\t\\\"xAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"category\\\",\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t\\\"Mon\\\",\\n\" +\n                \"\\t\\t\\t\\\"Tue\\\",\\n\" +\n                \"\\t\\t\\t\\\"Wed\\\",\\n\" +\n                \"\\t\\t\\t\\\"Thu\\\",\\n\" +\n                \"\\t\\t\\t\\\"Fri\\\",\\n\" +\n                \"\\t\\t\\t\\\"Sat\\\",\\n\" +\n                \"\\t\\t\\t\\\"Sun\\\"\\n\" +\n                \"\\t\\t]\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"yAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"value\\\"\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"series\\\": [{\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t150,\\n\" +\n                \"\\t\\t\\t230,\\n\" +\n                \"\\t\\t\\t224,\\n\" +\n                \"\\t\\t\\t218,\\n\" +\n                \"\\t\\t\\t135,\\n\" +\n                \"\\t\\t\\t147,\\n\" +\n                \"\\t\\t\\t260\\n\" +\n                \"\\t\\t],\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"line\\\"\\n\" +\n                \"\\t}, {\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t100,\\n\" +\n                \"\\t\\t\\t200,\\n\" +\n                \"\\t\\t\\t300,\\n\" +\n                \"\\t\\t\\t400,\\n\" +\n                \"\\t\\t\\t500,\\n\" +\n                \"\\t\\t\\t600,\\n\" +\n                \"\\t\\t\\t700\\n\" +\n                \"\\t\\t],\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"line\\\"\\n\" +\n                \"\\t}]\\n\" +\n                \"}\";\n        JSONObject jsonObject = JSON.parseObject(jsonStr);\n        JSONObject xAxis = jsonObject.getJSONObject(\"xAxis\");\n        JSONArray xAxisData = xAxis.getJSONArray(\"data\");\n        assertEquals(\"Mon\", xAxisData.getString(0));\n        assertEquals(\"Tue\", xAxisData.getString(1));\n        assertEquals(\"Wed\", xAxisData.getString(2));\n        assertEquals(\"Thu\", xAxisData.getString(3));\n        assertEquals(\"Fri\", xAxisData.getString(4));\n        assertEquals(\"Sat\", xAxisData.getString(5));\n        assertEquals(\"Sun\", xAxisData.getString(6));\n\n        JSONArray series = jsonObject.getJSONArray(\"series\");\n        JSONObject seriesData1 = series.getJSONObject(0);\n        JSONArray data1 = seriesData1.getJSONArray(\"data\");\n        assertEquals(150, data1.getInteger(0));\n        assertEquals(230, data1.getInteger(1));\n        assertEquals(224, data1.getInteger(2));\n        assertEquals(218, data1.getInteger(3));\n        assertEquals(135, data1.getInteger(4));\n        assertEquals(147, data1.getInteger(5));\n        assertEquals(260, data1.getInteger(6));\n\n        JSONObject seriesData2 = series.getJSONObject(1);\n        JSONArray data2 = seriesData2.getJSONArray(\"data\");\n        assertEquals(100, data2.getInteger(0));\n        assertEquals(200, data2.getInteger(1));\n        assertEquals(300, data2.getInteger(2));\n        assertEquals(400, data2.getInteger(3));\n        assertEquals(500, data2.getInteger(4));\n        assertEquals(600, data2.getInteger(5));\n        assertEquals(700, data2.getInteger(6));\n    }\n\n    @Test\n    void testMain5() {\n        String jsonStr = \"{\\n\" +\n                \"\\t\\\"xAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"category\\\",\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t\\\"Mon\\\",\\n\" +\n                \"\\t\\t\\t\\\"Tue\\\",\\n\" +\n                \"\\t\\t\\t\\\"Wed\\\",\\n\" +\n                \"\\t\\t\\t\\\"Thu\\\",\\n\" +\n                \"\\t\\t\\t\\\"Fri\\\",\\n\" +\n                \"\\t\\t\\t\\\"Sat\\\",\\n\" +\n                \"\\t\\t\\t\\\"Sun\\\"\\n\" +\n                \"\\t\\t]\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"yAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"value\\\"\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"series\\\": [{\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t150,\\n\" +\n                \"\\t\\t\\t230,\\n\" +\n                \"\\t\\t\\t224,\\n\" +\n                \"\\t\\t\\t218,\\n\" +\n                \"\\t\\t\\t135,\\n\" +\n                \"\\t\\t\\t147,\\n\" +\n                \"\\t\\t\\t260\\n\" +\n                \"\\t\\t],\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"line\\\"\\n\" +\n                \"\\t}, {\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t100,\\n\" +\n                \"\\t\\t\\t200,\\n\" +\n                \"\\t\\t\\t300,\\n\" +\n                \"\\t\\t\\t400,\\n\" +\n                \"\\t\\t\\t500,\\n\" +\n                \"\\t\\t\\t600,\\n\" +\n                \"\\t\\t\\t700\\n\" +\n                \"\\t\\t],\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"line\\\"\\n\" +\n                \"\\t}, {\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t50,\\n\" +\n                \"\\t\\t\\t100,\\n\" +\n                \"\\t\\t\\t150,\\n\" +\n                \"\\t\\t\\t200,\\n\" +\n                \"\\t\\t\\t250,\\n\" +\n                \"\\t\\t\\t300,\\n\" +\n                \"\\t\\t\\t350\\n\" +\n                \"\\t\\t],\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"line\\\"\\n\" +\n                \"\\t}]\\n\" +\n                \"}\";\n        JSONObject jsonObject = JSON.parseObject(jsonStr);\n        JSONObject xAxis = jsonObject.getJSONObject(\"xAxis\");\n        JSONArray xAxisData = xAxis.getJSONArray(\"data\");\n        assertEquals(\"Mon\", xAxisData.getString(0));\n        assertEquals(\"Tue\", xAxisData.getString(1));\n        assertEquals(\"Wed\", xAxisData.getString(2));\n        assertEquals(\"Thu\", xAxisData.getString(3));\n        assertEquals(\"Fri\", xAxisData.getString(4));\n        assertEquals(\"Sat\", xAxisData.getString(5));\n        assertEquals(\"Sun\", xAxisData.getString(6));\n\n        JSONArray series = jsonObject.getJSONArray(\"series\");\n        JSONObject seriesData1 = series.getJSONObject(0);\n        JSONArray data1 = seriesData1.getJSONArray(\"data\");\n        assertEquals(150, data1.getInteger(0));\n        assertEquals(230, data1.getInteger(1));\n        assertEquals(224, data1.getInteger(2));\n        assertEquals(218, data1.getInteger(3));\n        assertEquals(135, data1.getInteger(4));\n        assertEquals(147, data1.getInteger(5));\n        assertEquals(260, data1.getInteger(6));\n\n        JSONObject seriesData2 = series.getJSONObject(1);\n        JSONArray data2 = seriesData2.getJSONArray(\"data\");\n        assertEquals(100, data2.getInteger(0));\n        assertEquals(200, data2.getInteger(1));\n        assertEquals(300, data2.getInteger(2));\n        assertEquals(400, data2.getInteger(3));\n        assertEquals(500, data2.getInteger(4));\n        assertEquals(600, data2.getInteger(5));\n        assertEquals(700, data2.getInteger(6));\n\n        JSONObject seriesData3 = series.getJSONObject(2);\n        JSONArray data3 = seriesData3.getJSONArray(\"data\");\n        assertEquals(50, data3.getInteger(0));\n        assertEquals(100, data3.getInteger(1));\n        assertEquals(150, data3.getInteger(2));\n        assertEquals(200, data3.getInteger(3));\n        assertEquals(250, data3.getInteger(4));\n        assertEquals(300, data3.getInteger(5));\n        assertEquals(350, data3.getInteger(6));\n    }\n\n    @Test\n    void testMain6() {\n        String jsonStr = \"{\\n\" +\n                \"\\t\\\"xAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"category\\\",\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t\\\"Mon\\\"\\n\" +\n                \"\\t\\t]\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"yAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"value\\\"\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"series\\\": [{\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t150\\n\" +\n                \"\\t\\t],\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"line\\\"\\n\" +\n                \"\\t}, {\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t100\\n\" +\n                \"\\t\\t],\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"line\\\"\\n\" +\n                \"\\t}, {\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t50\\n\" +\n                \"\\t\\t],\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"line\\\"\\n\" +\n                \"\\t}]\\n\" +\n                \"}\";\n        JSONObject jsonObject = JSON.parseObject(jsonStr);\n        JSONObject xAxis = jsonObject.getJSONObject(\"xAxis\");\n        JSONArray xAxisData = xAxis.getJSONArray(\"data\");\n        assertEquals(\"Mon\", xAxisData.getString(0));\n\n        JSONArray series = jsonObject.getJSONArray(\"series\");\n        JSONObject seriesData1 = series.getJSONObject(0);\n        JSONArray data1 = seriesData1.getJSONArray(\"data\");\n        assertEquals(150, data1.getInteger(0));\n\n        JSONObject seriesData2 = series.getJSONObject(1);\n        JSONArray data2 = seriesData2.getJSONArray(\"data\");\n        assertEquals(100, data2.getInteger(0));\n\n        JSONObject seriesData3 = series.getJSONObject(2);\n        JSONArray data3 = seriesData3.getJSONArray(\"data\");\n        assertEquals(50, data3.getInteger(0));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\nimport com.alibaba.fastjson2.JSON;\nimport com.alibaba.fastjson2.JSONArray;\nimport com.alibaba.fastjson2.JSONObject;\n\npublic class Main {\n    public static void main(String[] args) {\n        String jsonStr = \"{\\n\" +\n                \"\\t\\\"xAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"category\\\",\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t\\\"Mon\\\",\\n\" +\n                \"\\t\\t\\t\\\"Tue\\\",\\n\" +\n                \"\\t\\t\\t\\\"Wed\\\",\\n\" +\n                \"\\t\\t\\t\\\"Thu\\\",\\n\" +\n                \"\\t\\t\\t\\\"Fri\\\",\\n\" +\n                \"\\t\\t\\t\\\"Sat\\\",\\n\" +\n                \"\\t\\t\\t\\\"Sun\\\"\\n\" +\n                \"\\t\\t]\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"yAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"value\\\"\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"series\\\": [{\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t150,\\n\" +\n                \"\\t\\t\\t230,\\n\" +\n                \"\\t\\t\\t224,\\n\" +\n                \"\\t\\t\\t218,\\n\" +\n                \"\\t\\t\\t135,\\n\" +\n                \"\\t\\t\\t147,\\n\" +\n                \"\\t\\t\\t260\\n\" +\n                \"\\t\\t],\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"line\\\"\\n\" +\n                \"\\t}]\\n\" +\n                \"}\";\n\n        JSONObject jsonObject = JSON.parseObject(jsonStr);\n\n        // Get xAxis data\n        JSONObject xAxis = jsonObject.getJSONObject(\"xAxis\");\n        JSONArray xAxisData = xAxis.getJSONArray(\"data\");\n        for (int i = 0; i < xAxisData.size(); i++) {\n            System.out.println(xAxisData.getString(i));\n        }\n\n        // Get series data\n        JSONArray series = jsonObject.getJSONArray(\"series\");\n        for (int i = 0; i < series.size(); i++) {\n            JSONObject seriesData = series.getJSONObject(i);\n            JSONArray data = seriesData.getJSONArray(\"data\");\n            for (int j = 0; j < data.size(); j++) {\n                System.out.println(data.getInteger(j));\n            }\n        }\n    }\n}\n\n```", "classification": "Front-End"}
{"_id": 157, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nThe input string is in this format ANTIFRAUD&&black_email;ANTIFRAUD&&no_email;ANTIFRAUD&&rule_email;ANTIFRAUD&&infoCOde1&&TEST\nI need to first split by ; then get the value on the right side of the last && in each group, then remove duplicates, and then filter based on whether there are values in the enumeration. The enumeration is\npublic enum RiskRejectCategoryEnum {\n\n    /**\n     * The smaller the value of priority, the higher the priority\n     */\n    black_email(\"black_email\", \"GREYLIST\",1 ,\"Greylist\"),\n    rule_email(\"rule_email\", \"NON_GREYLIST\", 2,\"Non-greylist\"),\n    no_email(\"no_email\", \"NO_EMAIL\", 99,\"No need to send email\");}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testFilterValues1() {\n        String input = \"ANTIFRAUD&&black_email;ANTIFRAUD&&no_email;ANTIFRAUD&&rule_email;ANTIFRAUD&&infoCOde1&&TEST\";\n        Set<String> expected = new HashSet<>(Arrays.asList(\"black_email\", \"no_email\", \"rule_email\"));\n        assertEquals(expected, Main.filterValues(input));\n    }\n}", "problem": "The input string is in this format ANTIFRAUD&&black_email;ANTIFRAUD&&no_email;ANTIFRAUD&&rule_email;ANTIFRAUD&&infoCOde1&&TEST\nI need to first split by ; then get the value on the right side of the last && in each group, then remove duplicates, and then filter based on whether there are values in the enumeration. The enumeration is\npublic enum RiskRejectCategoryEnum {\n\n    /**\n     * The smaller the value of priority, the higher the priority\n     */\n    black_email(\"black_email\", \"GREYLIST\",1 ,\"Greylist\"),\n    rule_email(\"rule_email\", \"NON_GREYLIST\", 2,\"Non-greylist\"),\n    no_email(\"no_email\", \"NO_EMAIL\", 99,\"No need to send email\");}", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\nclass MainTest {\n    @Test\n    void testFilterValues2() {\n        String input = \"ANTIFRAUD&&black_email;ANTIFRAUD&&black_email;ANTIFRAUD&&black_email;ANTIFRAUD&&black_email\";\n        Set<String> expected = new HashSet<>(Arrays.asList(\"black_email\"));\n        assertEquals(expected, Main.filterValues(input));\n    }\n\n    @Test\n    void testFilterValues3() {\n        String input = \"ANTIFRAUD&&no_email;ANTIFRAUD&&no_email;ANTIFRAUD&&no_email;ANTIFRAUD&&no_email\";\n        Set<String> expected = new HashSet<>(Arrays.asList(\"no_email\"));\n        assertEquals(expected, Main.filterValues(input));\n    }\n\n    @Test\n    void testFilterValues4() {\n        String input = \"ANTIFRAUD&&rule_email;ANTIFRAUD&&rule_email;ANTIFRAUD&&rule_email;ANTIFRAUD&&rule_email\";\n        Set<String> expected = new HashSet<>(Arrays.asList(\"rule_email\"));\n        assertEquals(expected, Main.filterValues(input));\n    }\n\n    @Test\n    void testFilterValues5() {\n        String input = \"ANTIFRAUD&&infoCOde1&&TEST;ANTIFRAUD&&infoCOde2&&TEST;ANTIFRAUD&&infoCOde3&&TEST;ANTIFRAUD&&infoCOde4&&TEST\";\n        Set<String> expected = new HashSet<>();\n        assertEquals(expected, Main.filterValues(input));\n    }\n\n    @Test\n    void testFilterValues6() {\n        String input = \"ANTIFRAUD&&black_email;ANTIFRAUD&&infoCOde1&&TEST;ANTIFRAUD&&no_email;ANTIFRAUD&&rule_email\";\n        Set<String> expected = new HashSet<>(Arrays.asList(\"black_email\", \"no_email\", \"rule_email\"));\n        assertEquals(expected, Main.filterValues(input));\n    }\n\n    @Test\n    void testFilterValues7() {\n        String input = \"\";\n        Set<String> expected = new HashSet<>();\n        assertEquals(expected, Main.filterValues(input));\n    }\n\n    @Test\n    void testFilterValues8() {\n        String input = \"ANTIFRAUD&&black_email\";\n        Set<String> expected = new HashSet<>(Arrays.asList(\"black_email\"));\n        assertEquals(expected, Main.filterValues(input));\n    }\n\n    @Test\n    void testFilterValues9() {\n        String input = \"ANTIFRAUD&&no_email\";\n        Set<String> expected = new HashSet<>(Arrays.asList(\"no_email\"));\n        assertEquals(expected, Main.filterValues(input));\n    }\n\n    @Test\n    void testFilterValues10() {\n        String input = \"ANTIFRAUD&&rule_email\";\n        Set<String> expected = new HashSet<>(Arrays.asList(\"rule_email\"));\n        assertEquals(expected, Main.filterValues(input));\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        String input = \"ANTIFRAUD&&black_email;ANTIFRAUD&&no_email;ANTIFRAUD&&rule_email;ANTIFRAUD&&infoCOde1&&TEST\";\n        Set<String> result = filterValues(input);\n        System.out.println(result);\n    }\n\n    public static Set<String> filterValues(String input) {\n        Set<String> enumValues = Arrays.stream(RiskRejectCategoryEnum.values())\n                .map(RiskRejectCategoryEnum::getName)\n                .collect(Collectors.toSet());\n\n        String[] parts = input.split(\";\");\n        Set<String> values = new HashSet<>();\n        for (String part : parts) {\n            String[] subParts = part.split(\"&&\");\n            String value = subParts[subParts.length - 1];\n            if (enumValues.contains(value)) {\n                values.add(value);\n            }\n        }\n        return values;\n    }\n}\n\nenum RiskRejectCategoryEnum {\n    black_email(\"black_email\", \"GREYLIST\",1 ,\"灰名单\"),\n    rule_email(\"rule_email\", \"NON_GREYLIST\", 2,\"非灰名单\"),\n    no_email(\"no_email\", \"NO_EMAIL\", 99,\"不需要发邮箱\");\n\n    private String name;\n    private String description;\n    private int priority;\n    private String chineseDescription;\n\n    RiskRejectCategoryEnum(String name, String description, int priority, String chineseDescription) {\n        this.name = name;\n        this.description = description;\n        this.priority = priority;\n        this.chineseDescription = chineseDescription;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 158, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\n(Password Check) Write a java method to check if a string is a valid password.\n\nThe password rules are as follows:\n\nThe password must be at least 8 characters long\n\nThe password can only contain letters and numbers\n\nThe password must contain at least two numbers\n\nWrite a program that prompts the user to enter a password, if it meets the rules, display Valid Password, otherwise display Invalid Password.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testIsValidPassword1() {\n        assertTrue(Main.isValidPassword(\"Password123\"));\n    }\n}", "problem": "(Password Check) Write a java method to check if a string is a valid password.\n\nThe password rules are as follows:\n\nThe password must be at least 8 characters long\n\nThe password can only contain letters and numbers\n\nThe password must contain at least two numbers\n\nWrite a program that prompts the user to enter a password, if it meets the rules, display Valid Password, otherwise display Invalid Password.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Scanner;\n\nclass MainTest {\n    @Test\n    void testIsValidPassword2() {\n        assertFalse(Main.isValidPassword(\"Password\"));\n    }\n\n    @Test\n    void testIsValidPassword3() {\n        assertTrue(Main.isValidPassword(\"password123\"));\n    }\n\n    @Test\n    void testIsValidPassword4() {\n        assertTrue(Main.isValidPassword(\"12345678\"));\n    }\n\n    @Test\n    void testIsValidPassword5() {\n        assertFalse(Main.isValidPassword(\"Passw0rd\"));\n    }\n\n    @Test\n    void testIsValidPassword6() {\n        assertTrue(Main.isValidPassword(\"passw0rd123\"));\n    }\n\n    @Test\n    void testIsValidPassword7() {\n        assertTrue(Main.isValidPassword(\"Password1234567890\"));\n    }\n\n    @Test\n    void testIsValidPassword8() {\n        assertTrue(Main.isValidPassword(\"P1234567\"));\n    }\n\n    @Test\n    void testIsValidPassword9() {\n        assertFalse(Main.isValidPassword(\"Password!@#\"));\n    }\n\n    @Test\n    void testIsValidPassword10() {\n        assertFalse(Main.isValidPassword(\"P@ssw0rd123\"));\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        System.out.print(\"Enter a password: \");\n        String password = input.nextLine();\n\n        if (isValidPassword(password)) {\n            System.out.println(\"Valid Password\");\n        } else {\n            System.out.println(\"Invalid Password\");\n        }\n    }\n\n    public static boolean isValidPassword(String password) {\n        if (password.length() < 8) { \n            return false;\n        } else {   \n            int charCount = 0;\n            int numCount = 0;\n            for (int i = 0; i < password.length(); i++) {\n                char ch = password.charAt(i);\n                if (isNumeric(ch)) numCount++;\n                else if (isLetter(ch)) charCount++;\n                else return false;\n            }\n            return numCount >= 2;\n        }\n    }\n\n    public static boolean isLetter(char ch) {\n        ch = Character.toUpperCase(ch);\n        return (ch >= 'A' && ch <= 'Z');\n    }\n\n    public static boolean isNumeric(char ch) {\n        return (ch >= '0' && ch <= '9');\n    }\n}\n\n```", "classification": "Algorithm and Data Structure"}
{"_id": 159, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nImplement the multiton pattern using the concept of singleton pattern, ensuring that only a limited number of objects of a certain class can exist in the system, such as 3 (Threeleton). Design and write Java code to implement this multiton pattern. Then use multithreading to test the threeleton pattern, and please output the ID of each instance obtained (such as 0,1,2).\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testGetInstance_MultipleThreads_1() throws InterruptedException {\n        AtomicInteger[] ids = new AtomicInteger[3];\n        for (int i = 0; i < 3; i++) {\n            ids[i] = new AtomicInteger(0);\n        }\n\n        Thread[] threads = new Thread[1];\n        for (int i = 0; i < 1; i++) {\n            threads[i] = new Thread(() -> {\n                Threeleton instance = Threeleton.getInstance();\n                ids[instance.getId()].incrementAndGet();\n            });\n            threads[i].start();\n        }\n\n        for (Thread thread : threads) {\n            thread.join();\n        }\n\n        assertEquals(0, ids[0].get());\n        assertEquals(0, ids[1].get());\n        assertEquals(0, ids[2].get());\n    }\n}", "problem": "Implement the multiton pattern using the concept of singleton pattern, ensuring that only a limited number of objects of a certain class can exist in the system, such as 3 (Threeleton). Design and write Java code to implement this multiton pattern. Then use multithreading to test the threeleton pattern, and please output the ID of each instance obtained (such as 0,1,2).", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nclass ThreeletonTest {\n    @Test\n    void testGetInstance() {\n        Threeleton instance1 = Threeleton.getInstance();\n        assertEquals(0, instance1.getId());\n\n        Threeleton instance2 = Threeleton.getInstance();\n        assertEquals(1, instance2.getId());\n\n        Threeleton instance3 = Threeleton.getInstance();\n        assertEquals(2, instance3.getId());\n\n        Threeleton instance4 = Threeleton.getInstance();\n        assertEquals(0, instance4.getId());\n\n        Threeleton instance5 = Threeleton.getInstance();\n        assertEquals(1, instance5.getId());\n    }\n\n    @Test\n    void testGetInstanceWithThreads() throws InterruptedException {\n        AtomicInteger[] ids = new AtomicInteger[3];\n        for (int i = 0; i < 3; i++) {\n            ids[i] = new AtomicInteger(0);\n        }\n\n        Thread[] threads = new Thread[10];\n        for (int i = 0; i < 10; i++) {\n            threads[i] = new Thread(() -> {\n                Threeleton instance = Threeleton.getInstance();\n                ids[instance.getId()].incrementAndGet();\n            });\n            threads[i].start();\n        }\n\n        for (Thread thread : threads) {\n            thread.join();\n        }\n\n        assertEquals(3, ids[0].get());\n        assertEquals(3, ids[1].get());\n        assertEquals(4, ids[2].get());\n    }\n\n    @Test\n    void testGetInstanceWithMoreThreads() throws InterruptedException {\n        AtomicInteger[] ids = new AtomicInteger[3];\n        for (int i = 0; i < 3; i++) {\n            ids[i] = new AtomicInteger(0);\n        }\n\n        Thread[] threads = new Thread[100];\n        for (int i = 0; i < 100; i++) {\n            threads[i] = new Thread(() -> {\n                Threeleton instance = Threeleton.getInstance();\n                ids[instance.getId()].incrementAndGet();\n            });\n            threads[i].start();\n        }\n\n        for (Thread thread : threads) {\n            thread.join();\n        }\n\n        assertEquals(34, ids[0].get());\n        assertEquals(33, ids[1].get());\n        assertEquals(33, ids[2].get());\n    }\n\n    @Test\n    void testGetInstanceWithNoThreads() {\n        AtomicInteger[] ids = new AtomicInteger[3];\n        for (int i = 0; i < 3; i++) {\n            ids[i] = new AtomicInteger(0);\n        }\n\n        for (int i = 0; i < 3; i++) {\n            Threeleton instance = Threeleton.getInstance();\n            ids[instance.getId()].incrementAndGet();\n        }\n\n        assertEquals(1, ids[0].get());\n        assertEquals(1, ids[1].get());\n        assertEquals(1, ids[2].get());\n    }\n\n\n    @Test\n    void testGetInstance_MultipleThreads_1000() throws InterruptedException {\n        AtomicInteger[] ids = new AtomicInteger[3];\n        for (int i = 0; i < 3; i++) {\n            ids[i] = new AtomicInteger(0);\n        }\n\n        Thread[] threads = new Thread[1000];\n        for (int i = 0; i < 1000; i++) {\n            threads[i] = new Thread(() -> {\n                Threeleton instance = Threeleton.getInstance();\n                ids[instance.getId()].incrementAndGet();\n            });\n            threads[i].start();\n        }\n\n        for (Thread thread : threads) {\n            thread.join();\n        }\n\n        assertEquals(333, ids[0].get());\n        assertEquals(334, ids[1].get());\n        assertEquals(333, ids[2].get());\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.util.concurrent.atomic.AtomicInteger;\n\nclass Threeleton {\n    private static final int MAX_INSTANCE_COUNT = 3;\n    private static final Threeleton[] instances = new Threeleton[MAX_INSTANCE_COUNT];\n    private static final AtomicInteger count = new AtomicInteger(0);\n    private final int id;\n\n    static {\n        for (int i = 0; i < MAX_INSTANCE_COUNT; i++) {\n            instances[i] = new Threeleton(i);\n        }\n    }\n\n    private Threeleton(int id) {\n        this.id = id;\n    }\n\n    public static Threeleton getInstance() {\n        return instances[count.getAndIncrement() % MAX_INSTANCE_COUNT];\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n\n```", "classification": "Algorithm and Data Structure"}
{"_id": 160, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nDesign a method in Java\npublic static void encodeFile(File encodingFile, File encodedFile);\nUse the following encryption method, encrypt the content in the given encodingFile text file, and then save it to the encodedFile file.\nEncryption rules:\n1. Numbers: If it is not the number 9, add 1 to the original basis, such as 5 becomes 6, 3 becomes 4. If it is the number 9, it becomes 0.\n2. Letter characters: If it is a non-z character, move one to the right, such as d becomes e, G becomes H. If it is z, z->a, Z->A.\n   Note: The encryption process of letter characters cannot change the case.\n3. Non-numeric and non-letter characters can remain unchanged, such as Chinese characters and punctuation marks, etc., just need to remain unchanged.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileEncoderTest {\n\n\n    @Test\n    void testEncodeDigits() throws IOException {\n        // 测试数字的加密，包括边界情况9\n        File input = new File(\"testEncodeDigits.txt\");\n        File output = new File(\"testEncodeDigitsOutput.txt\");\n        // 假设input文件内容为 \"123456789\"\n        FileEncoder.encodeFile(input, output);\n        assertEquals(\"234567890\", readFileContent(output));\n    }\n}", "problem": "Design a method in Java\npublic static void encodeFile(File encodingFile, File encodedFile);\nUse the following encryption method, encrypt the content in the given encodingFile text file, and then save it to the encodedFile file.\nEncryption rules:\n1. Numbers: If it is not the number 9, add 1 to the original basis, such as 5 becomes 6, 3 becomes 4. If it is the number 9, it becomes 0.\n2. Letter characters: If it is a non-z character, move one to the right, such as d becomes e, G becomes H. If it is z, z->a, Z->A.\n   Note: The encryption process of letter characters cannot change the case.\n3. Non-numeric and non-letter characters can remain unchanged, such as Chinese characters and punctuation marks, etc., just need to remain unchanged.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileEncoderTest {\n\n\n    // 辅助方法，用于读取文件内容并返回字符串\n    private String readFileContent(File file) throws IOException {\n        StringBuilder content = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                content.append(line);\n                // 添加换行符以匹配原始文件格式，除非是文件的最后一行\n                content.append(System.lineSeparator());\n            }\n        }\n        // 移除最后一个多余的换行符\n        return content.toString().trim();\n    }\n    @Test\n    void testEncodeLetters() throws IOException {\n        // 测试字母的加密，包括边界情况z和Z\n        File input = new File(\"testEncodeLetters.txt\");\n        File output = new File(\"testEncodeLettersOutput.txt\");\n        // 假设input文件内容为 \"abcxyzABCXYZ\"\n        FileEncoder.encodeFile(input, output);\n        assertEquals(\"bcdyzaBCDYZA\", readFileContent(output));\n    }\n\n    @Test\n    void testEncodeMixedContent() throws IOException {\n        // 测试数字、字母和特殊字符混合加密\n        File input = new File(\"testEncodeMixedContent.txt\");\n        File output = new File(\"testEncodeMixedContentOutput.txt\");\n        // 假设input文件内容为 \"a1zZ9!@\"\n        FileEncoder.encodeFile(input, output);\n        assertEquals(\"b2aA0!@\", readFileContent(output));\n    }\n\n    @Test\n    void testEncodeNonAlphanumeric() throws IOException {\n        // 测试非字母数字字符保持不变\n        File input = new File(\"testEncodeNonAlphanumeric.txt\");\n        File output = new File(\"testEncodeNonAlphanumericOutput.txt\");\n        // 假设input文件内容为 \"@#$%^&*()\"\n        FileEncoder.encodeFile(input, output);\n        assertEquals(\"@#$%^&*()\", readFileContent(output));\n    }\n\n    @Test\n    void testEncodeEmptyFile() throws IOException {\n        // 测试空文件\n        File input = new File(\"testEncodeEmptyFile.txt\");\n        File output = new File(\"testEncodeEmptyFileOutput.txt\");\n        // 假设input文件内容为空\n        FileEncoder.encodeFile(input, output);\n        assertEquals(\"\", readFileContent(output));\n    }\n\n}\n", "setup_code": "", "reference_solution": "```java\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class FileEncoder {\n\n    public static void encodeFile(File encodingFile, File encodedFile) {\n        try (FileReader reader = new FileReader(encodingFile);\n             FileWriter writer = new FileWriter(encodedFile)) {\n            int c;\n            while ((c = reader.read()) != -1) {\n                char character = (char) c;\n                if (Character.isDigit(character)) {\n                    // 数字加密规则\n                    character = character == '9' ? '0' : (char) (character + 1);\n                } else if (Character.isLetter(character)) {\n                    // 字母加密规则\n                    if (character == 'z') {\n                        character = 'a';\n                    } else if (character == 'Z') {\n                        character = 'A';\n                    } else if ((character >= 'a' && character < 'z') || (character >= 'A' && character < 'Z')) {\n                        character = (char) (character + 1);\n                    }\n                }\n                // 非数字和字母的字符保持不变\n                writer.write(character);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        // 示例使用方法\n        File encodingFile = new File(\"path/to/your/input.txt\"); // 指定要加密的文件路径\n        File encodedFile = new File(\"path/to/your/output.txt\"); // 指定加密后文件的保存路径\n        encodeFile(encodingFile, encodedFile);\n    }\n}\n\n```", "classification": "Operation System"}
{"_id": 161, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nUse Java 2. Utilize Map to accomplish the following functions:\n   1. Read a string from the command line, representing a year, and output the World Cup champion of that year. If the World Cup was not held in that year, output: The World Cup was not held.\n   2. For example, if \"Brazil\" is input, it should output 1958 1962 1970 1994 2002. If \"Netherlands\" is input, it should output: Has not won the World Cup.\n1930  Uruguay\n1934 Italy\n1938 Italy\n1950 Uruguay\n1954 West Germany\n1958 Brazil\n1962 Brazil\n1966 England\n1970 Brazil\n1974 West Germany\n1978 Argentina\n1982 Italy\n1986 Argentina\n1990 West Germany\n1994 Brazil\n1998 France\n2002 Brazil\n2006 Italy\n2010 Spain\n2014 Germany\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class WorldCupServiceTest {\n\n\n    @Test\n    public void testGetChampionByYearWithExistingYear() {\n        assertEquals(\"巴西\", worldCupService.getChampionByYear(\"1958\"));\n    }\n}", "problem": "Use Java 2. Utilize Map to accomplish the following functions:\n   1. Read a string from the command line, representing a year, and output the World Cup champion of that year. If the World Cup was not held in that year, output: The World Cup was not held.\n   2. For example, if \"Brazil\" is input, it should output 1958 1962 1970 1994 2002. If \"Netherlands\" is input, it should output: Has not won the World Cup.\n1930  Uruguay\n1934 Italy\n1938 Italy\n1950 Uruguay\n1954 West Germany\n1958 Brazil\n1962 Brazil\n1966 England\n1970 Brazil\n1974 West Germany\n1978 Argentina\n1982 Italy\n1986 Argentina\n1990 West Germany\n1994 Brazil\n1998 France\n2002 Brazil\n2006 Italy\n2010 Spain\n2014 Germany", "testcases": "import org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class WorldCupServiceTest {\n    private WorldCupService worldCupService;\n\n    @Before\n    public void setUp() {\n        worldCupService = new WorldCupService();\n    }\n    @Test\n    public void testGetChampionByYearWithNonExistingYear() {\n        assertEquals(\"没有举办世界杯\", worldCupService.getChampionByYear(\"1942\"));\n    }\n\n    @Test\n    public void testGetYearsWonByCountryWithMultipleWins() {\n        assertEquals(\"1958 1962 1970 1994 2002\", worldCupService.getYearsWonByCountry(\"巴西\"));\n    }\n\n    @Test\n    public void testGetYearsWonByCountryWithSingleWin() {\n        assertEquals(\"1966\", worldCupService.getYearsWonByCountry(\"英格兰\"));\n    }\n\n    @Test\n    public void testGetYearsWonByCountryWithNoWins() {\n        assertEquals(\"没有获得过世界杯\", worldCupService.getYearsWonByCountry(\"荷兰\"));\n    }\n\n    @Test\n    public void testGetChampionByYearWithFutureYear() {\n        assertEquals(\"没有举办世界杯\", worldCupService.getChampionByYear(\"2022\"));\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.util.Map;\nimport java.util.TreeMap;\n\npublic class WorldCupService {\n\n    private final Map<String, String> worldCupChampions = new TreeMap<>();\n\n    public WorldCupService() {\n        initializeChampions();\n    }\n\n    private void initializeChampions() {\n        worldCupChampions.put(\"1930\", \"乌拉圭\");\n        worldCupChampions.put(\"1934\", \"意大利\");\n        worldCupChampions.put(\"1938\", \"意大利\");\n        worldCupChampions.put(\"1950\", \"乌拉圭\");\n        worldCupChampions.put(\"1954\", \"西德\");\n        worldCupChampions.put(\"1958\", \"巴西\");\n        worldCupChampions.put(\"1962\", \"巴西\");\n        worldCupChampions.put(\"1966\", \"英格兰\");\n        worldCupChampions.put(\"1970\", \"巴西\");\n        worldCupChampions.put(\"1974\", \"西德\");\n        worldCupChampions.put(\"1978\", \"阿根廷\");\n        worldCupChampions.put(\"1982\", \"意大利\");\n        worldCupChampions.put(\"1986\", \"阿根廷\");\n        worldCupChampions.put(\"1990\", \"西德\");\n        worldCupChampions.put(\"1994\", \"巴西\");\n        worldCupChampions.put(\"1998\", \"法国\");\n        worldCupChampions.put(\"2002\", \"巴西\");\n        worldCupChampions.put(\"2006\", \"意大利\");\n        worldCupChampions.put(\"2010\", \"西班牙\");\n        worldCupChampions.put(\"2014\", \"德国\");\n    }\n\n    public String getChampionByYear(String year) {\n        return worldCupChampions.getOrDefault(year, \"没有举办世界杯\");\n    }\n\n    public String getYearsWonByCountry(String country) {\n        StringBuilder years = new StringBuilder();\n        for (Map.Entry<String, String> entry : worldCupChampions.entrySet()) {\n            if (entry.getValue().equals(country)) {\n                years.append(entry.getKey()).append(\" \");\n            }\n        }\n        return years.length() > 0 ? years.toString().trim() : \"没有获得过世界杯\";\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 162, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nThere is a way to encode letters into numbers: 'a' ->1, 'b' ->2,..., 'z' ->26. Now given a string of numbers, return how many possible decoding results there are. For example, \"11\" has 2 possible decoding results, \"aa\" or \"k\". Requirements: The string length satisfies 0< n ≤90, space complexity O(n), time complexity O(n). Implement in JAVA.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass SolutionTest {\n\n    @Test\n    void testNumDecodings1() {\n        Solution solution = new Solution();\n        assertEquals(2, solution.numDecodings(\"11\"));\n    }\n}", "problem": "There is a way to encode letters into numbers: 'a' ->1, 'b' ->2,..., 'z' ->26. Now given a string of numbers, return how many possible decoding results there are. For example, \"11\" has 2 possible decoding results, \"aa\" or \"k\". Requirements: The string length satisfies 0< n ≤90, space complexity O(n), time complexity O(n). Implement in JAVA.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass SolutionTest {\n    @Test\n    void testNumDecodings2() {\n        Solution solution = new Solution();\n        assertEquals(3, solution.numDecodings(\"111\"));\n    }\n\n    @Test\n    void testNumDecodings3() {\n        Solution solution = new Solution();\n        assertEquals(0, solution.numDecodings(\"0\"));\n    }\n\n    @Test\n    void testNumDecodings4() {\n        Solution solution = new Solution();\n        assertEquals(1, solution.numDecodings(\"10\"));\n    }\n\n    @Test\n    void testNumDecodings5() {\n        Solution solution = new Solution();\n        assertEquals(0, solution.numDecodings(\"100\"));\n    }\n\n    @Test\n    void testNumDecodings6() {\n        Solution solution = new Solution();\n        assertEquals(1, solution.numDecodings(\"27\"));\n    }\n\n    @Test\n    void testNumDecodings7() {\n        Solution solution = new Solution();\n        assertEquals(0, solution.numDecodings(\"\"));\n    }\n\n    @Test\n    void testNumDecodings8() {\n        Solution solution = new Solution();\n        assertEquals(1, solution.numDecodings(\"1\"));\n    }\n\n    @Test\n    void testNumDecodings9() {\n        Solution solution = new Solution();\n        assertEquals(1, solution.numDecodings(\"9\"));\n    }\n\n    @Test\n    void testNumDecodings10() {\n        Solution solution = new Solution();\n        assertEquals(2, solution.numDecodings(\"26\"));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\npublic class Solution {\n    public int numDecodings(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        int n = s.length();\n        int[] dp = new int[n + 1];\n        dp[0] = 1;\n        dp[1] = s.charAt(0) != '0' ? 1 : 0;\n        for (int i = 2; i <= n; i++) {\n            int first = Integer.valueOf(s.substring(i - 1, i));\n            int second = Integer.valueOf(s.substring(i - 2, i));\n            if (first >= 1 && first <= 9) {\n                dp[i] += dp[i-1];\n            }\n            if (second >= 10 && second <= 26) {\n                dp[i] += dp[i-2];\n            }\n        }\n        return dp[n];\n    }\n}\n\n```", "classification": "Algorithm and Data Structure"}
{"_id": 163, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nOn a field with a length of n and a width of m, there are n✖️m 1✖️1 cells. The number on each cell is the product of the numbers from 1 to n and 1 to m. Specifically, as follows:\n\nn = 3, m = 3\n1   2   3\n2   4   6\n3   6   9\n\nGiven a query value k, find the kth largest value v in the numbers listed in this way. Please implement this code in Java.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class KthLargestInMatrixTest {\n\n\n    @Test\n    public void testSimpleCase() {\n        assertEquals(9, finder.findKthLargestValue(3, 3, 1));\n    }\n}", "problem": "On a field with a length of n and a width of m, there are n✖️m 1✖️1 cells. The number on each cell is the product of the numbers from 1 to n and 1 to m. Specifically, as follows:\n\nn = 3, m = 3\n1   2   3\n2   4   6\n3   6   9\n\nGiven a query value k, find the kth largest value v in the numbers listed in this way. Please implement this code in Java.", "testcases": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class KthLargestInMatrixTest {\n    private final KthLargestInMatrix finder = new KthLargestInMatrix();\n    @Test\n    public void testMiddleValue() {\n        assertEquals(3, finder.findKthLargestValue(3, 3, 5));\n    }\n\n    @Test\n    public void testLastValue() {\n        assertEquals(1, finder.findKthLargestValue(3, 3, 9));\n    }\n\n    // 测试k大于总单元格数\n    @Test\n    public void testKGreaterThanTotalCells() {\n        assertEquals(Integer.MIN_VALUE, finder.findKthLargestValue(2, 2, 5));\n    }\n\n    // 测试零维度\n    @Test\n    public void testZeroDimensions() {\n        assertEquals(Integer.MIN_VALUE, finder.findKthLargestValue(0, 0, 1));\n    }\n\n    // 测试负维度\n    @Test\n    public void testNegativeDimensions() {\n        assertEquals(Integer.MIN_VALUE, finder.findKthLargestValue(-1, -1, 1));\n    }\n\n    // 测试k为零\n    @Test\n    public void testKIsZero() {\n        assertEquals(Integer.MIN_VALUE, finder.findKthLargestValue(3, 3, 0));\n    }\n\n    // 测试较大的矩阵\n    @Test\n    public void testLargeMatrix() {\n        assertEquals(8, finder.findKthLargestValue(4, 4, 5));\n    }\n\n    // 测试非方阵\n    @Test\n    public void testNonSquareMatrix() {\n        assertEquals(6, finder.findKthLargestValue(3, 4, 4));\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.util.PriorityQueue;\n\npublic class KthLargestInMatrix {\n\n    public int findKthLargestValue(int n, int m, int k) {\n        // 验证输入\n        if (n <= 0 || m <= 0 || k <= 0 || k > n * m) {\n            return Integer.MIN_VALUE;\n        }\n\n        // 使用最小堆来存储最大的k个元素\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>(k);\n\n        // 遍历所有单元格\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                int value = i * j;\n\n                // 如果堆的大小小于k，直接添加\n                if (minHeap.size() < k) {\n                    minHeap.add(value);\n                } else if (value > minHeap.peek()) {\n                    // 如果当前值大于堆顶元素，则弹出堆顶，将当前值加入堆中\n                    minHeap.poll();\n                    minHeap.add(value);\n                }\n            }\n        }\n\n        // 堆顶元素即为第k大的元素\n        return minHeap.peek();\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 164, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nGiven the root node of a binary tree, determine whether it is a valid binary search tree.\n\nA valid binary search tree is defined as follows:\n\nThe left subtree of a node only contains numbers less than the current node.\nThe right subtree of a node only contains numbers greater than the current node.\nAll left subtrees and right subtrees themselves must also be binary search trees. java\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass TreeNodeTest {\n\n    @Test\n    void testIsValidBST1() {\n        Solution solution = new Solution();\n        TreeNode root = new TreeNode(2);\n        root.left = new TreeNode(1);\n        root.right = new TreeNode(3);\n        assertTrue(solution.isValidBST(root));\n    }\n}", "problem": "Given the root node of a binary tree, determine whether it is a valid binary search tree.\n\nA valid binary search tree is defined as follows:\n\nThe left subtree of a node only contains numbers less than the current node.\nThe right subtree of a node only contains numbers greater than the current node.\nAll left subtrees and right subtrees themselves must also be binary search trees. java", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass TreeNodeTest {\n    @Test\n    void testIsValidBST2() {\n        Solution solution = new Solution();\n        TreeNode root = new TreeNode(5);\n        root.left = new TreeNode(1);\n        root.right = new TreeNode(4);\n        root.right.left = new TreeNode(3);\n        root.right.right = new TreeNode(6);\n        assertFalse(solution.isValidBST(root));\n    }\n\n    @Test\n    void testIsValidBST3() {\n        Solution solution = new Solution();\n        TreeNode root = new TreeNode(10);\n        root.left = new TreeNode(5);\n        root.right = new TreeNode(15);\n        root.right.left = new TreeNode(6);\n        root.right.right = new TreeNode(20);\n        assertFalse(solution.isValidBST(root));\n    }\n\n    @Test\n    void testIsValidBST4() {\n        Solution solution = new Solution();\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(1);\n        assertFalse(solution.isValidBST(root));\n    }\n\n    @Test\n    void testIsValidBST5() {\n        Solution solution = new Solution();\n        TreeNode root = new TreeNode(1);\n        root.right = new TreeNode(1);\n        assertFalse(solution.isValidBST(root));\n    }\n\n    @Test\n    void testIsValidBST6() {\n        Solution solution = new Solution();\n        TreeNode root = null;\n        assertTrue(solution.isValidBST(root));\n    }\n\n    @Test\n    void testIsValidBST7() {\n        Solution solution = new Solution();\n        TreeNode root = new TreeNode(Integer.MAX_VALUE);\n        assertTrue(solution.isValidBST(root));\n    }\n\n    @Test\n    void testIsValidBST8() {\n        Solution solution = new Solution();\n        TreeNode root = new TreeNode(Integer.MIN_VALUE);\n        assertTrue(solution.isValidBST(root));\n    }\n\n    @Test\n    void testIsValidBST9() {\n        Solution solution = new Solution();\n        TreeNode root = new TreeNode(0);\n        root.left = new TreeNode(Integer.MIN_VALUE);\n        root.right = new TreeNode(Integer.MAX_VALUE);\n        assertTrue(solution.isValidBST(root));\n    }\n\n    @Test\n    void testIsValidBST10() {\n        Solution solution = new Solution();\n        TreeNode root = new TreeNode(0);\n        root.left = new TreeNode(Integer.MAX_VALUE);\n        root.right = new TreeNode(Integer.MIN_VALUE);\n        assertFalse(solution.isValidBST(root));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\npublic class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode(int x) { val = x; }\n}\n\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);\n    }\n\n    public boolean isValidBST(TreeNode node, long minVal, long maxVal) {\n        if (node == null) return true;\n        if (node.val >= maxVal || node.val <= minVal) return false;\n        return isValidBST(node.left, minVal, node.val) && isValidBST(node.right, node.val, maxVal);\n    }\n}\n\n```", "classification": "Algorithm and Data Structure"}
{"_id": 165, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a program, please use the switch-case statement in JAVA language to complete:\nEnter the year, month, and day from the keyboard respectively, and determine which day of the year it is.\n\nHint: The standard for determining whether a year is a leap year:\n1) It can be divided by 4, but not by 100\n2) It can be divided by 400\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class DayOfYearCalculatorTest {\n\n\n    @Test\n    public void testCommonYearFebruary() {\n        assertEquals(59, DayOfYearCalculator.dayOfYear(2023, 2, 28));\n    }\n}", "problem": "Write a program, please use the switch-case statement in JAVA language to complete:\nEnter the year, month, and day from the keyboard respectively, and determine which day of the year it is.\n\nHint: The standard for determining whether a year is a leap year:\n1) It can be divided by 4, but not by 100\n2) It can be divided by 400", "testcases": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class DayOfYearCalculatorTest {\n    @Test\n    public void testLeapYearFebruary() {\n        assertEquals(60, DayOfYearCalculator.dayOfYear(2024, 2, 29));\n    }\n\n    @Test\n    public void testStartOfYear() {\n        assertEquals(1, DayOfYearCalculator.dayOfYear(2023, 1, 1));\n    }\n\n    @Test\n    public void testEndOfYear() {\n        assertEquals(365, DayOfYearCalculator.dayOfYear(2023, 12, 31));\n    }\n\n    @Test\n    public void testLeapYearEndOfYear() {\n        assertEquals(366, DayOfYearCalculator.dayOfYear(2024, 12, 31));\n    }\n\n    @Test\n    public void testMidYear() {\n        assertEquals(182, DayOfYearCalculator.dayOfYear(2023, 7, 1));\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testInvalidDate() {\n        DayOfYearCalculator.dayOfYear(2023, 2, 30);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testInvalidMonth() {\n        DayOfYearCalculator.dayOfYear(2023, 13, 1);\n    }\n\n\n    @Test\n    public void testMonthEnd() {\n        assertEquals(31, DayOfYearCalculator.dayOfYear(2023, 1, 31));\n    }\n}\n", "setup_code": "", "reference_solution": "```java\n\npublic class DayOfYearCalculator {\n\n    public static int dayOfYear(int year, int month, int day) {\n        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\n        // 检查闰年\n        if (isLeapYear(year)) {\n            daysInMonth[1] = 29; // 2月为29天\n        }\n\n        // 验证输入\n        if (month < 1 || month > 12 || day < 1 || day > daysInMonth[month - 1]) {\n            throw new IllegalArgumentException(\"Invalid date\");\n        }\n\n        int dayOfYear = day;\n        for (int i = 0; i < month - 1; i++) {\n            dayOfYear += daysInMonth[i];\n        }\n\n        return dayOfYear;\n    }\n\n    private static boolean isLeapYear(int year) {\n        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 166, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nXiao Lan exercises every day.\n\nUnder normal circumstances, Xiao Lan runs 1 kilometer every day. If it is Monday or the beginning of the month (1st), Xiao Lan runs 2 kilometers to motivate herself. If it is both Monday and the beginning of the month, Xiao Lan still runs 2 kilometers.\n\nXiao Lan has been running for a long time, from Saturday, November 11, 2000 (inclusive) to Thursday, October 1, 2020 (inclusive). How many kilometers has Xiao Lan run in total during this period? Please write and explain in Java.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.Test;\n\nimport java.time.LocalDate;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class RunningTrackerTest {\n\n\n    @Test\n    public void testNonLeapYearFebruary() {\n        // 测试非闰年的2月，期望跑步距离考虑了月初和周一\n        assertEquals(\"Expected distance considering Mondays and the beginning of the month\", 32, tracker.calculateTotalDistance(LocalDate.of(2021, 2, 1), LocalDate.of(2021, 2, 28)));\n    }\n}", "problem": "Xiao Lan exercises every day.\n\nUnder normal circumstances, Xiao Lan runs 1 kilometer every day. If it is Monday or the beginning of the month (1st), Xiao Lan runs 2 kilometers to motivate herself. If it is both Monday and the beginning of the month, Xiao Lan still runs 2 kilometers.\n\nXiao Lan has been running for a long time, from Saturday, November 11, 2000 (inclusive) to Thursday, October 1, 2020 (inclusive). How many kilometers has Xiao Lan run in total during this period? Please write and explain in Java.", "testcases": "import org.junit.Test;\n\nimport java.time.LocalDate;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class RunningTrackerTest {\n    private RunningTracker tracker = new RunningTracker();\n    @Test\n    public void testLeapYearFebruary() {\n        // 测试闰年的2月\n        assertEquals(\"Expected distance in a leap year February\", 34, tracker.calculateTotalDistance(LocalDate.of(2020, 2, 1), LocalDate.of(2020, 2, 29)));\n    }\n\n    @Test\n    public void testMonthWithMultipleMondays() {\n        // 测试包含多个周一的月份\n        assertEquals(\"Expected distance in a month with multiple Mondays\", 36, tracker.calculateTotalDistance(LocalDate.of(2021, 3, 1), LocalDate.of(2021, 3, 31)));\n    }\n    @Test\n    public void testStartAndEndOnMondays() {\n        // 测试起始和结束日期都是周一的情况\n        assertEquals(\"Expected distance when both start and end dates are Mondays\", 10, tracker.calculateTotalDistance(LocalDate.of(2021, 11, 1), LocalDate.of(2021, 11, 8)));\n    }\n\n    @Test\n    public void testSingleDayMonthStart() {\n        // 测试只有一个天，且这一天是月初的情况\n        assertEquals(\"Expected distance for a single day at the start of the month\", 2, tracker.calculateTotalDistance(LocalDate.of(2021, 4, 1), LocalDate.of(2021, 4, 1)));\n    }\n\n    @Test\n    public void testSingleDayNotMondayOrMonthStart() {\n        // 测试只有一天，且这天既不是周一也不是月初\n        assertEquals(\"Expected distance for a single day that is neither Monday nor the start of the month\", 1, tracker.calculateTotalDistance(LocalDate.of(2021, 4, 2), LocalDate.of(2021, 4, 2)));\n    }\n\n    @Test\n    public void testFullYearNonLeap() {\n        // 测试整个非闰年\n        assertEquals(\"Expected distance for a full non-leap year\", 426, tracker.calculateTotalDistance(LocalDate.of(2021, 1, 1), LocalDate.of(2021, 12, 31)));\n    }\n\n    @Test\n    public void testFullYearLeap() {\n        // 测试整个闰年\n        assertEquals(\"Expected distance for a full leap year\", 429, tracker.calculateTotalDistance(LocalDate.of(2020, 1, 1), LocalDate.of(2020, 12, 31)));\n    }\n\n    @Test\n    public void testEndOnMonday() {\n        // 测试结束日期是周一的情况\n        assertEquals(\"Expected distance when the end date is a Monday\", 3, tracker.calculateTotalDistance(LocalDate.of(2021, 4, 4), LocalDate.of(2021, 4, 5)));\n    }\n\n    @Test\n    public void testRangeWithNoMondaysOrMonthStart() {\n        // 测试日期范围内没有周一也没有月初的情况\n        assertEquals(\"Expected distance for a range with no Mondays or month starts\", 3, tracker.calculateTotalDistance(LocalDate.of(2021, 4, 7), LocalDate.of(2021, 4, 9)));\n    }\n}\n", "setup_code": "", "reference_solution": "```java\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\n\npublic class RunningTracker {\n\n    public long calculateTotalDistance(LocalDate start, LocalDate end) {\n        long totalDistance = 0;\n        LocalDate date = start;\n\n        while (!date.isAfter(end)) {\n            // 如果是月初或周一，则跑2千米\n            if (date.getDayOfMonth() == 1 || date.getDayOfWeek() == java.time.DayOfWeek.MONDAY) {\n                totalDistance += 2;\n            } else {\n                totalDistance += 1;\n            }\n            date = date.plusDays(1);\n        }\n\n        return totalDistance;\n    }\n}\n\n```", "classification": "Algorithm and Data Structure"}
{"_id": 167, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\njava\n\nArrange all permutations of a string in lexicographical order.\n\nInput\nA string (which may contain the same characters, length no more than 12)\n\nOutput\nList all permutations in ASCII order, one per line.\n\nThe last line outputs the total number of permutations.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class StringPermutationsTest {\n\n\n\n    @Test\n    public void testSingleCharacter() {\n        assertEquals(\"Should return one permutation for a single character\", 1, permutations.permute(\"A\").size());\n    }\n}", "problem": "java\n\nArrange all permutations of a string in lexicographical order.\n\nInput\nA string (which may contain the same characters, length no more than 12)\n\nOutput\nList all permutations in ASCII order, one per line.\n\nThe last line outputs the total number of permutations.", "testcases": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class StringPermutationsTest {\n    private StringPermutations permutations = new StringPermutations();\n    @Test\n    public void testTwoDifferentCharacters() {\n        assertEquals(\"Should return two permutations for two different characters\", 2, permutations.permute(\"AB\").size());\n    }\n\n    @Test\n    public void testTwoSameCharacters() {\n        assertEquals(\"Should return one permutation for two identical characters\", 1, permutations.permute(\"AA\").size());\n    }\n\n    @Test\n    public void testThreeDifferentCharacters() {\n        assertEquals(\"Should return six permutations for three different characters\", 6, permutations.permute(\"ABC\").size());\n    }\n\n    @Test\n    public void testStringWithDuplicates() {\n        assertEquals(\"Should handle duplicates correctly\", 3, permutations.permute(\"AAB\").size());\n    }\n\n    @Test\n    public void testAllSameCharacters() {\n        assertEquals(\"Should return one permutation for all same characters\", 1, permutations.permute(\"AAAA\").size());\n    }\n\n    @Test\n    public void testAlphanumericString() {\n        assertEquals(\"Should handle alphanumeric strings\", 24, permutations.permute(\"A1B2\").size()); // 4!\n    }\n\n    @Test\n    public void testStringWithSpecialCharacters() {\n        assertEquals(\"Should handle strings with special characters\", 2, permutations.permute(\"A*\").size());\n    }\n}\n", "setup_code": "", "reference_solution": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class StringPermutations {\n\n    public List<String> permute(String s) {\n        Set<String> permutations = new HashSet<>();\n        permute(\"\", s, permutations);\n        List<String> sortedList = new ArrayList<>(permutations);\n        Collections.sort(sortedList);\n        return sortedList;\n    }\n\n    private void permute(String prefix, String s, Set<String> permutations) {\n        int n = s.length();\n        if (n == 0) {\n            permutations.add(prefix);\n        } else {\n            for (int i = 0; i < n; i++) {\n                permute(prefix + s.charAt(i), s.substring(0, i) + s.substring(i + 1, n), permutations);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        StringPermutations sp = new StringPermutations();\n        List<String> result = sp.permute(\"AAB\");\n        result.forEach(System.out::println);\n        System.out.println(\"Total permutations: \" + result.size());\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 168, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nPlease solve the following problem with Java: A system's process may occupy and wait for some resources. Now, the resource information that these processes occupy and wait for at a certain moment is given. Please analyze which processes have occurred deadlock according to the following simplified rules, and return the list of all deadlock process IDs in ascending order, or an empty list [].\nThe simplified rules are as follows:\n• If any resource device occupied by a process p is waiting, the process must wait until these resources are released: during the waiting period, the process will not release the resources it occupies.\nIf all the resources that process P is waiting for are not occupied by other processes, the process will release all the resources it has.\nBased on this, if a process is considered to be in a deadlock because the resources it is waiting for are always occupied and it waits indefinitely.\nInput\nThe first line is an integer num, which represents the number of processes;\nStarting from the second line, num lines represent the situation of each process occupying and waiting for resources, the format is:\nProcess ID (list of occupied resources) (list of waiting resources).\n0<= Process D <=100, 0<= Resource number <= 300\nEach line of the box will not contain duplicate resource numbers\nInput guarantee: Each resource will be occupied by at most one process.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testFindDeadlocks1() {\n        Map<Integer, Set<Integer>> holdMap = new HashMap<>();\n        Map<Integer, Set<Integer>> waitMap = new HashMap<>();\n        holdMap.put(1, new HashSet<>(Arrays.asList(2, 3)));\n        waitMap.put(1, new HashSet<>(Arrays.asList(4, 5)));\n        holdMap.put(2, new HashSet<>(Arrays.asList(4, 5)));\n        waitMap.put(2, new HashSet<>(Arrays.asList(2, 3)));\n        List<Integer> result = Main.findDeadlocks(holdMap, waitMap);\n        Collections.sort(result);\n        assertEquals(Arrays.asList(1, 2), result);\n    }\n}", "problem": "Please solve the following problem with Java: A system's process may occupy and wait for some resources. Now, the resource information that these processes occupy and wait for at a certain moment is given. Please analyze which processes have occurred deadlock according to the following simplified rules, and return the list of all deadlock process IDs in ascending order, or an empty list [].\nThe simplified rules are as follows:\n• If any resource device occupied by a process p is waiting, the process must wait until these resources are released: during the waiting period, the process will not release the resources it occupies.\nIf all the resources that process P is waiting for are not occupied by other processes, the process will release all the resources it has.\nBased on this, if a process is considered to be in a deadlock because the resources it is waiting for are always occupied and it waits indefinitely.\nInput\nThe first line is an integer num, which represents the number of processes;\nStarting from the second line, num lines represent the situation of each process occupying and waiting for resources, the format is:\nProcess ID (list of occupied resources) (list of waiting resources).\n0<= Process D <=100, 0<= Resource number <= 300\nEach line of the box will not contain duplicate resource numbers\nInput guarantee: Each resource will be occupied by at most one process.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.*;\n\nclass MainTest {\n    @Test\n    void testFindDeadlocks2() {\n        Map<Integer, Set<Integer>> holdMap = new HashMap<>();\n        Map<Integer, Set<Integer>> waitMap = new HashMap<>();\n        holdMap.put(1, new HashSet<>(Arrays.asList(2, 3)));\n        waitMap.put(1, new HashSet<>(Arrays.asList(4, 5)));\n        holdMap.put(2, new HashSet<>(Arrays.asList(6, 7)));\n        waitMap.put(2, new HashSet<>(Arrays.asList(8, 9)));\n        List<Integer> result = Main.findDeadlocks(holdMap, waitMap);\n        Collections.sort(result);\n        assertEquals(new ArrayList<>(), result);\n    }\n\n    @Test\n    void testFindDeadlocks3() {\n        Map<Integer, Set<Integer>> holdMap = new HashMap<>();\n        Map<Integer, Set<Integer>> waitMap = new HashMap<>();\n        holdMap.put(1, new HashSet<>(Arrays.asList(2, 3)));\n        waitMap.put(1, new HashSet<>(Arrays.asList(4, 5)));\n        holdMap.put(2, new HashSet<>(Arrays.asList(4, 5)));\n        waitMap.put(2, new HashSet<>(Arrays.asList(6, 7)));\n        List<Integer> result = Main.findDeadlocks(holdMap, waitMap);\n        Collections.sort(result);\n        assertEquals(Arrays.asList(1), result);\n    }\n\n    @Test\n    void testFindDeadlocks4() {\n        Map<Integer, Set<Integer>> holdMap = new HashMap<>();\n        Map<Integer, Set<Integer>> waitMap = new HashMap<>();\n        holdMap.put(1, new HashSet<>(Arrays.asList(2, 3)));\n        waitMap.put(1, new HashSet<>(Arrays.asList(4, 5)));\n        holdMap.put(2, new HashSet<>(Arrays.asList(4, 5)));\n        waitMap.put(2, new HashSet<>(Arrays.asList(2)));\n        List<Integer> result = Main.findDeadlocks(holdMap, waitMap);\n        Collections.sort(result);\n        assertEquals(Arrays.asList(1, 2), result);\n    }\n\n    @Test\n    void testFindDeadlocks5() {\n        Map<Integer, Set<Integer>> holdMap = new HashMap<>();\n        Map<Integer, Set<Integer>> waitMap = new HashMap<>();\n        holdMap.put(1, new HashSet<>(Arrays.asList(2, 3)));\n        waitMap.put(1, new HashSet<>(Arrays.asList(4, 5)));\n        holdMap.put(2, new HashSet<>(Arrays.asList(4, 5)));\n        waitMap.put(2, new HashSet<>(Arrays.asList(2, 3)));\n        holdMap.put(3, new HashSet<>(Arrays.asList(6, 7)));\n        waitMap.put(3, new HashSet<>(Arrays.asList(8, 9)));\n        List<Integer> result = Main.findDeadlocks(holdMap, waitMap);\n        Collections.sort(result);\n        assertEquals(Arrays.asList(1, 2), result);\n    }\n\n    @Test\n    void testFindDeadlocks6() {\n        Map<Integer, Set<Integer>> holdMap = new HashMap<>();\n        Map<Integer, Set<Integer>> waitMap = new HashMap<>();\n        holdMap.put(1, new HashSet<>(Arrays.asList(2, 3)));\n        waitMap.put(1, new HashSet<>(Arrays.asList(4, 5)));\n        holdMap.put(2, new HashSet<>(Arrays.asList(4, 5)));\n        waitMap.put(2, new HashSet<>(Arrays.asList(6, 7)));\n        holdMap.put(3, new HashSet<>(Arrays.asList(6, 7)));\n        waitMap.put(3, new HashSet<>(Arrays.asList(2, 3)));\n        List<Integer> result = Main.findDeadlocks(holdMap, waitMap);\n        Collections.sort(result);\n        assertEquals(Arrays.asList(1, 2, 3), result);\n    }\n\n    @Test\n    void testFindDeadlocks7() {\n        Map<Integer, Set<Integer>> holdMap = new HashMap<>();\n        Map<Integer, Set<Integer>> waitMap = new HashMap<>();\n        for (int i = 1; i <= 100; i++) {\n            holdMap.put(i, new HashSet<>(Arrays.asList(i)));\n            waitMap.put(i, new HashSet<>(Arrays.asList(i == 100 ? 1 : i + 1)));\n        }\n        List<Integer> result = Main.findDeadlocks(holdMap, waitMap);\n        Collections.sort(result);\n        List<Integer> expected = new ArrayList<>();\n        for (int i = 1; i <= 100; i++) {\n            expected.add(i);\n        }\n        assertEquals(expected, result);\n    }\n\n    @Test\n    void testFindDeadlocks8() {\n        Map<Integer, Set<Integer>> holdMap = new HashMap<>();\n        Map<Integer, Set<Integer>> waitMap = new HashMap<>();\n        for (int i = 1; i <= 100; i++) {\n            holdMap.put(i, new HashSet<>(Arrays.asList(i)));\n            waitMap.put(i, new HashSet<>(Arrays.asList(i == 1 ? 100 : i - 1)));\n        }\n        List<Integer> result = Main.findDeadlocks(holdMap, waitMap);\n        Collections.sort(result);\n        List<Integer> expected = new ArrayList<>();\n        for (int i = 1; i <= 100; i++) {\n            expected.add(i);\n        }\n        assertEquals(expected, result);\n    }\n\n    @Test\n    void testFindDeadlocks9() {\n        Map<Integer, Set<Integer>> holdMap = new HashMap<>();\n        Map<Integer, Set<Integer>> waitMap = new HashMap<>();\n        for (int i = 1; i <= 100; i++) {\n            holdMap.put(i, new HashSet<>(Arrays.asList(i)));\n            waitMap.put(i, new HashSet<>());\n        }\n        List<Integer> result = Main.findDeadlocks(holdMap, waitMap);\n        Collections.sort(result);\n        assertEquals(new ArrayList<>(), result);\n    }\n\n    @Test\n    void testFindDeadlocks10() {\n        Map<Integer, Set<Integer>> holdMap = new HashMap<>();\n        Map<Integer, Set<Integer>> waitMap = new HashMap<>();\n        for (int i = 1; i <= 100; i++) {\n            holdMap.put(i, new HashSet<>(Arrays.asList(i)));\n            waitMap.put(i, new HashSet<>(Arrays.asList(101)));\n        }\n        List<Integer> result = Main.findDeadlocks(holdMap, waitMap);\n        Collections.sort(result);\n        assertEquals(new ArrayList<>(), result);\n    }\n}", "setup_code": "", "reference_solution": "```java\n\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int num = scanner.nextInt();\n        scanner.nextLine();\n        Map<Integer, Set<Integer>> holdMap = new HashMap<>();\n        Map<Integer, Set<Integer>> waitMap = new HashMap<>();\n        for (int i = 0; i < num; i++) {\n            String line = scanner.nextLine();\n            String[] parts = line.split(\"\\\\s+\");\n            int pid = Integer.parseInt(parts[0]);\n            Set<Integer> holdSet = new HashSet<>();\n            Set<Integer> waitSet = new HashSet<>();\n            for (String s : parts[1].substring(1, parts[1].length() - 1).split(\",\")) {\n                if (!s.isEmpty()) {\n                    holdSet.add(Integer.parseInt(s));\n                }\n            }\n            for (String s : parts[2].substring(1, parts[2].length() - 1).split(\",\")) {\n                if (!s.isEmpty()) {\n                    waitSet.add(Integer.parseInt(s));\n                }\n            }\n            holdMap.put(pid, holdSet);\n            waitMap.put(pid, waitSet);\n        }\n        List<Integer> deadlocks = findDeadlocks(holdMap, waitMap);\n        Collections.sort(deadlocks);\n        System.out.println(deadlocks);\n    }\n\n    static List<Integer> findDeadlocks(Map<Integer, Set<Integer>> holdMap, Map<Integer, Set<Integer>> waitMap) {\n        List<Integer> deadlocks = new ArrayList<>();\n        for (int pid : waitMap.keySet()) {\n            Set<Integer> waitSet = waitMap.get(pid);\n            for (int resource : waitSet) {\n                if (isResourceHeldByOthers(resource, pid, holdMap)) {\n                    deadlocks.add(pid);\n                    break;\n                }\n            }\n        }\n        return deadlocks;\n    }\n\n    private static boolean isResourceHeldByOthers(int resource, int pid, Map<Integer, Set<Integer>> holdMap) {\n        for (int otherPid : holdMap.keySet()) {\n            if (otherPid != pid && holdMap.get(otherPid).contains(resource)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n```", "classification": "Operation System"}
{"_id": 169, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nCalculate the area and perimeter of a square\nProgramming question\nProblem Description\nWrite a program that inputs the side length of a square, calculates the perimeter and area of this square, and prints the calculation results.\nInput Example\n10\nOutput Example\nSide length: 10\nPerimeter: 40\nArea: 100    Write it in Java.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SquareTest {\n\n\n    @Test\n    public void testPerimeterWithPositiveSide() {\n        Square square = new Square(10);\n        assertEquals(40, square.getPerimeter(), 0.01);\n    }\n}", "problem": "Calculate the area and perimeter of a square\nProgramming question\nProblem Description\nWrite a program that inputs the side length of a square, calculates the perimeter and area of this square, and prints the calculation results.\nInput Example\n10\nOutput Example\nSide length: 10\nPerimeter: 40\nArea: 100    Write it in Java.", "testcases": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SquareTest {\n    @Test\n    public void testAreaWithPositiveSide() {\n        Square square = new Square(10);\n        assertEquals(100, square.getArea(), 0.01);\n    }\n\n    @Test\n    public void testPerimeterWithZeroSide() {\n        Square square = new Square(0);\n        assertEquals(0, square.getPerimeter(), 0.01);\n    }\n\n    @Test\n    public void testAreaWithZeroSide() {\n        Square square = new Square(0);\n        assertEquals(0, square.getArea(), 0.01);\n    }\n\n    @Test\n    public void testPerimeterWithSmallSide() {\n        Square square = new Square(0.1);\n        assertEquals(0.4, square.getPerimeter(), 0.01);\n    }\n\n    @Test\n    public void testAreaWithSmallSide() {\n        Square square = new Square(0.1);\n        assertEquals(0.01, square.getArea(), 0.0001);\n    }\n\n    @Test\n    public void testPerimeterWithLargeSide() {\n        Square square = new Square(1000);\n        assertEquals(4000, square.getPerimeter(), 0.01);\n    }\n\n    @Test\n    public void testAreaWithLargeSide() {\n        Square square = new Square(1000);\n        assertEquals(1000000, square.getArea(), 0.01);\n    }\n\n    @Test\n    public void testPerimeterWithFractionalSide() {\n        Square square = new Square(5.5);\n        assertEquals(22, square.getPerimeter(), 0.01);\n    }\n\n    @Test\n    public void testAreaWithFractionalSide() {\n        Square square = new Square(5.5);\n        assertEquals(30.25, square.getArea(), 0.01);\n    }\n}\n", "setup_code": "", "reference_solution": "```java\n\npublic class Square {\n    private double sideLength;\n\n    public Square(double sideLength) {\n        this.sideLength = sideLength;\n    }\n\n    public double getPerimeter() {\n        return 4 * sideLength;\n    }\n\n    public double getArea() {\n        return sideLength * sideLength;\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 170, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nRecently, Xiao Mei discovered an interesting game. Given a queue q, Xiao Mei will play the game according to the following rules:\n\nEach time she takes a number from the queue, if this number is the smallest value in the current queue, then Xiao Mei will discard this number. Otherwise, Xiao Mei will re-add this number to the queue.\n\nXiao Mei will continue the game until the queue is empty, but Xiao Mei does not have much patience, so she wants to know how many operations she needs to perform at most to end the game. Please solve this with Java programming.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testMaxOperations1() {\n        Queue<Integer> queue = new LinkedList<>(Arrays.asList(3, 2, 1, 4, 5));\n        assertEquals(12, Main.maxOperations(queue));\n    }\n}", "problem": "Recently, Xiao Mei discovered an interesting game. Given a queue q, Xiao Mei will play the game according to the following rules:\n\nEach time she takes a number from the queue, if this number is the smallest value in the current queue, then Xiao Mei will discard this number. Otherwise, Xiao Mei will re-add this number to the queue.\n\nXiao Mei will continue the game until the queue is empty, but Xiao Mei does not have much patience, so she wants to know how many operations she needs to perform at most to end the game. Please solve this with Java programming.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.*;\n\nclass MainTest {\n    @Test\n    void testMaxOperations2() {\n        Queue<Integer> queue = new LinkedList<>(Arrays.asList(1, 2, 3, 4, 5));\n        assertEquals(5, Main.maxOperations(queue));\n    }\n\n    @Test\n    void testMaxOperations3() {\n        Queue<Integer> queue = new LinkedList<>(Arrays.asList(5, 4, 3, 2, 1));\n        assertEquals(15, Main.maxOperations(queue));\n    }\n\n    @Test\n    void testMaxOperations4() {\n        Queue<Integer> queue = new LinkedList<>(Arrays.asList(1, 1, 1, 1, 1));\n        assertEquals(5, Main.maxOperations(queue));\n    }\n\n    @Test\n    void testMaxOperations5() {\n        Queue<Integer> queue = new LinkedList<>(Arrays.asList(5, 5, 5, 5, 5));\n        assertEquals(5, Main.maxOperations(queue));\n    }\n\n    @Test\n    void testMaxOperations6() {\n        Queue<Integer> queue = new LinkedList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n        assertEquals(10, Main.maxOperations(queue));\n    }\n\n    @Test\n    void testMaxOperations7() {\n        Queue<Integer> queue = new LinkedList<>(Arrays.asList(10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n        assertEquals(55, Main.maxOperations(queue));\n    }\n\n    @Test\n    void testMaxOperations8() {\n        Queue<Integer> queue = new LinkedList<>(Arrays.asList(1));\n        assertEquals(1, Main.maxOperations(queue));\n    }\n\n    @Test\n    void testMaxOperations9() {\n        Queue<Integer> queue = new LinkedList<>(Arrays.asList(100, 200, 300, 400, 500));\n        assertEquals(5, Main.maxOperations(queue));\n    }\n\n    @Test\n    void testMaxOperations10() {\n        Queue<Integer> queue = new LinkedList<>(Arrays.asList(500, 400, 300, 200, 100));\n        assertEquals(15, Main.maxOperations(queue));\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Queue<Integer> queue = new LinkedList<>(Arrays.asList(3, 2, 1, 4, 5));\n        System.out.println(maxOperations(queue));\n    }\n\n    public static int maxOperations(Queue<Integer> queue) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(queue);\n        int operations = 0;\n        while (!queue.isEmpty()) {\n            int num = queue.poll();\n            if (num == pq.peek()) {\n                pq.poll();\n            } else {\n                queue.offer(num);\n            }\n            operations++;\n        }\n        return operations;\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 171, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nThe long data type can represent up to 19 digits of decimal integers, so how should larger integers be described? Create a utility class HugeInteger in the package hugeinteger, which is used to store and manipulate a decimal large integer not exceeding 100 digits.\n1. Two overloaded constructors, supporting the initialization of a HugeInteger object through long and String types.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass HugeIntegerTest {\n\n    @Test\n    void testConstructorWithLong() {\n        HugeInteger hi = new HugeInteger(1234567890123456789L);\n        assertEquals(\"1234567890123456789\", hi.getValue());\n    }\n}", "problem": "The long data type can represent up to 19 digits of decimal integers, so how should larger integers be described? Create a utility class HugeInteger in the package hugeinteger, which is used to store and manipulate a decimal large integer not exceeding 100 digits.\n1. Two overloaded constructors, supporting the initialization of a HugeInteger object through long and String types.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass HugeIntegerTest {\n    @Test\n    void testConstructorWithString() {\n        HugeInteger hi = new HugeInteger(\"12345678901234567891234567890123456789\");\n        assertEquals(\"12345678901234567891234567890123456789\", hi.getValue());\n    }\n\n    @Test\n    void testConstructorWithZeroLong() {\n        HugeInteger hi = new HugeInteger(0L);\n        assertEquals(\"0\", hi.getValue());\n    }\n\n    @Test\n    void testConstructorWithZeroString() {\n        HugeInteger hi = new HugeInteger(\"0\");\n        assertEquals(\"0\", hi.getValue());\n    }\n\n    @Test\n    void testConstructorWithNegativeLong() {\n        HugeInteger hi = new HugeInteger(-1234567890123456789L);\n        assertEquals(\"-1234567890123456789\", hi.getValue());\n    }\n\n    @Test\n    void testConstructorWithNegativeString() {\n        HugeInteger hi = new HugeInteger(\"-12345678901234567891234567890123456789\");\n        assertEquals(\"-12345678901234567891234567890123456789\", hi.getValue());\n    }\n\n    @Test\n    void testConstructorWithMaxLong() {\n        HugeInteger hi = new HugeInteger(Long.MAX_VALUE);\n        assertEquals(Long.toString(Long.MAX_VALUE), hi.getValue());\n    }\n\n    @Test\n    void testConstructorWithMinLong() {\n        HugeInteger hi = new HugeInteger(Long.MIN_VALUE);\n        assertEquals(Long.toString(Long.MIN_VALUE), hi.getValue());\n    }\n\n    @Test\n    void testConstructorWithMaxDigitsString() {\n        HugeInteger hi = new HugeInteger(\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\");\n        assertEquals(\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\", hi.getValue());\n    }\n\n    @Test\n    void testConstructorWithExceedMaxDigitsString() {\n        assertThrows(IllegalArgumentException.class, () -> new HugeInteger(\"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901\"));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\n\npublic class HugeInteger {\n\n    private String value;\n\n    // Constructor that accepts long\n    public HugeInteger(long value) {\n        this.value = Long.toString(value);\n    }\n\n    // Constructor that accepts String\n    public HugeInteger(String value) {\n        if (value.length() > 100) {\n            throw new IllegalArgumentException(\"The length of the string should not exceed 100 digits.\");\n        }\n        this.value = value;\n    }\n\n    // Getter method\n    public String getValue() {\n        return this.value;\n    }\n}\n\n```", "classification": "Algorithm and Data Structure"}
{"_id": 172, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nThere is a List<Integer> with contents [1,2,3,4,10,12]. How to process it into a string list uniformly represented by two digits, such as 1 should be changed to 01, using Java language.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.Assert.*;\n\npublic class NumberFormatterTest {\n\n\n    @Test\n    public void testFormatNumbers() {\n        List<Integer> input = Arrays.asList(1, 2, 3, 4, 10, 12);\n        List<String> expected = Arrays.asList(\"01\", \"02\", \"03\", \"04\", \"10\", \"12\");\n        assertEquals(expected, NumberFormatter.formatNumbers(input));\n    }\n}", "problem": "There is a List<Integer> with contents [1,2,3,4,10,12]. How to process it into a string list uniformly represented by two digits, such as 1 should be changed to 01, using Java language.", "testcases": "import org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.Assert.*;\n\npublic class NumberFormatterTest {\n    @Test\n    public void testEmptyList() {\n        List<Integer> input = Arrays.asList();\n        List<String> expected = Arrays.asList();\n        assertEquals(expected, NumberFormatter.formatNumbers(input));\n    }\n\n    @Test\n    public void testSingleDigitNumbers() {\n        List<Integer> input = Arrays.asList(0, 5, 9);\n        List<String> expected = Arrays.asList(\"00\", \"05\", \"09\");\n        assertEquals(expected, NumberFormatter.formatNumbers(input));\n    }\n\n    @Test\n    public void testDoubleDigitNumbers() {\n        List<Integer> input = Arrays.asList(10, 20, 99);\n        List<String> expected = Arrays.asList(\"10\", \"20\", \"99\");\n        assertEquals(expected, NumberFormatter.formatNumbers(input));\n    }\n\n    @Test\n    public void testMixedSingleAndDoubleDigitNumbers() {\n        List<Integer> input = Arrays.asList(0, 1, 10, 99);\n        List<String> expected = Arrays.asList(\"00\", \"01\", \"10\", \"99\");\n        assertEquals(expected, NumberFormatter.formatNumbers(input));\n    }\n}\n", "setup_code": "", "reference_solution": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class NumberFormatter {\n\n    public static List<String> formatNumbers(List<Integer> numbers) {\n        return numbers.stream()\n                .map(number -> String.format(\"%02d\", number))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 10, 12);\n        List<String> formattedNumbers = formatNumbers(numbers);\n        System.out.println(formattedNumbers);\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 173, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nDesign a Fraction class that represents fractions. This class uses two int type variables to represent the numerator and the denominator. Note that after creation and calculation, the fraction should be simplified to its simplest form. For example, 2/4 should be simplified to 1/2. Java code.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class FractionTest {\n\n\n    @Test\n    public void testConstruct() {\n        Fraction fraction = new Fraction(2, 4);\n        assertEquals(\"1/2\", fraction.toString());\n    }\n}", "problem": "Design a Fraction class that represents fractions. This class uses two int type variables to represent the numerator and the denominator. Note that after creation and calculation, the fraction should be simplified to its simplest form. For example, 2/4 should be simplified to 1/2. Java code.", "testcases": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class FractionTest {\n    @Test\n    public void testAddition() {\n        Fraction f1 = new Fraction(1, 2);\n        Fraction f2 = new Fraction(1, 3);\n        Fraction result = f1.add(f2);\n        assertEquals(\"5/6\", result.toString());\n    }\n\n    @Test\n    public void testSubtraction() {\n        Fraction f1 = new Fraction(3, 4);\n        Fraction f2 = new Fraction(1, 4);\n        Fraction result = f1.subtract(f2);\n        assertEquals(\"1/2\", result.toString());\n    }\n\n    @Test\n    public void testMultiplication() {\n        Fraction f1 = new Fraction(1, 2);\n        Fraction f2 = new Fraction(2, 3);\n        Fraction result = f1.multiply(f2);\n        assertEquals(\"1/3\", result.toString());\n    }\n\n    @Test\n    public void testDivision() {\n        Fraction f1 = new Fraction(1, 2);\n        Fraction f2 = new Fraction(1, 3);\n        Fraction result = f1.divide(f2);\n        assertEquals(\"3/2\", result.toString());\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testDivisionByZero() {\n        Fraction f1 = new Fraction(1, 2);\n        Fraction f2 = new Fraction(0, 1);\n        f1.divide(f2);\n    }\n\n    @Test\n    public void testSimplification() {\n        Fraction fraction = new Fraction(100, 200);\n        assertEquals(\"1/2\", fraction.toString());\n    }\n\n    @Test\n    public void testNegativeFraction() {\n        Fraction fraction = new Fraction(-1, 2);\n        assertEquals(\"-1/2\", fraction.toString());\n    }\n\n    @Test\n    public void testToString() {\n        Fraction fraction = new Fraction(3, 4);\n        assertEquals(\"3/4\", fraction.toString());\n    }\n\n    @Test\n    public void testIntegerFraction() {\n        Fraction fraction = new Fraction(4, 2);\n        assertEquals(\"2/1\", fraction.toString());\n    }\n}\n", "setup_code": "", "reference_solution": "```java\n\n\npublic class Fraction {\n    private int numerator;   // 分子\n    private int denominator; // 分母\n\n    // 构造器\n    public Fraction(int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new IllegalArgumentException(\"Denominator cannot be zero.\");\n        }\n        this.numerator = numerator;\n        this.denominator = denominator;\n        simplify();\n    }\n\n    // 化简分数\n    private void simplify() {\n        int gcd = gcd(Math.abs(numerator), Math.abs(denominator));\n        numerator /= gcd;\n        denominator /= gcd;\n    }\n\n    // 计算最大公约数\n    private int gcd(int a, int b) {\n        return b == 0 ? a : gcd(b, a % b);\n    }\n\n    // 加法\n    public Fraction add(Fraction other) {\n        int newNumerator = this.numerator * other.denominator + other.numerator * this.denominator;\n        int newDenominator = this.denominator * other.denominator;\n        return new Fraction(newNumerator, newDenominator);\n    }\n\n    // 减法\n    public Fraction subtract(Fraction other) {\n        int newNumerator = this.numerator * other.denominator - other.numerator * this.denominator;\n        int newDenominator = this.denominator * other.denominator;\n        return new Fraction(newNumerator, newDenominator);\n    }\n\n    // 乘法\n    public Fraction multiply(Fraction other) {\n        return new Fraction(this.numerator * other.numerator, this.denominator * other.denominator);\n    }\n\n    // 除法\n    public Fraction divide(Fraction other) {\n        return new Fraction(this.numerator * other.denominator, this.denominator * other.numerator);\n    }\n\n    // 转换为字符串\n    @Override\n    public String toString() {\n        return numerator + \"/\" + denominator;\n    }\n\n    // Getter方法\n    public int getNumerator() {\n        return numerator;\n    }\n\n    public int getDenominator() {\n        return denominator;\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 174, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite code in Java to implement the following: Given a non-empty string 'word' and an abbreviation 'abbr', return whether the string can match the given abbreviation. For example, a string \"word\" only contains the following valid abbreviations: [\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"].\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MainTest {\n\n\n    @Test\n    public void testValidSingleDigitAbbreviation() {\n        assertTrue(Main.validWordAbbreviation(\"word\", \"1ord\"));\n    }\n}", "problem": "Write code in Java to implement the following: Given a non-empty string 'word' and an abbreviation 'abbr', return whether the string can match the given abbreviation. For example, a string \"word\" only contains the following valid abbreviations: [\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"].", "testcases": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MainTest {\n    @Test\n    public void testValidFullLengthAbbreviation() {\n        assertTrue(Main.validWordAbbreviation(\"word\", \"4\"));\n    }\n\n    @Test\n    public void testValidMultipleAbbreviations() {\n        assertTrue(Main.validWordAbbreviation(\"word\", \"2r1\"));\n    }\n\n    @Test\n    public void testValidMixedAbbreviation() {\n        assertTrue(Main.validWordAbbreviation(\"word\", \"w1r1\"));\n    }\n\n    @Test\n    public void testInvalidAbbreviationWithWrongPosition() {\n        assertTrue(Main.validWordAbbreviation(\"word\", \"1o2\"));\n    }\n\n    @Test\n    public void testInvalidAbbreviationWithExceedingLength() {\n        assertFalse(Main.validWordAbbreviation(\"word\", \"wo3\"));\n    }\n\n    @Test\n    public void testInvalidAbbreviationWithLeadingZero() {\n        assertFalse(Main.validWordAbbreviation(\"word\", \"02rd\"));\n    }\n\n    @Test\n    public void testValidExactMatch() {\n        assertTrue(Main.validWordAbbreviation(\"word\", \"word\"));\n    }\n\n    @Test\n    public void testInvalidEmptyAbbreviation() {\n        assertFalse(Main.validWordAbbreviation(\"word\", \"\"));\n    }\n\n    @Test\n    public void testInvalidNonNumericAbbreviation() {\n        assertFalse(Main.validWordAbbreviation(\"word\", \"wrd\"));\n    }\n}\n", "setup_code": "", "reference_solution": "```java\n\npublic class Main {\n    public static boolean validWordAbbreviation(String word, String abbr) {\n        int i = 0, j = 0;\n        while (i < word.length() && j < abbr.length()) {\n            if (word.charAt(i) == abbr.charAt(j)) {\n                ++i;\n                ++j;\n                continue;\n            }\n            if (abbr.charAt(j) <= '0' || abbr.charAt(j) > '9') {\n                return false;\n            }\n            int start = j;\n            while (j < abbr.length() && abbr.charAt(j) >= '0' && abbr.charAt(j) <= '9') {\n                ++j;\n            }\n            int num = Integer.valueOf(abbr.substring(start, j));\n            i += num;\n        }\n        return i == word.length() && j == abbr.length();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(validWordAbbreviation(\"word\", \"1ord\")); // true\n        System.out.println(validWordAbbreviation(\"word\", \"4\")); // true\n        System.out.println(validWordAbbreviation(\"word\", \"2r1\")); // true\n        System.out.println(validWordAbbreviation(\"word\", \"w1r1\")); // true\n        System.out.println(validWordAbbreviation(\"word\", \"word\")); // true\n        System.out.println(validWordAbbreviation(\"word\", \"1o2\")); // false\n        System.out.println(validWordAbbreviation(\"word\", \"wo3\")); // false\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 175, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nPlease design a recursive segmented sum function sum(int start, int end) for calculating the sum of integers between Start and End. When Start < End, calculate Sum = Start + (Start+1) + ... + End; when Start = End, return Start; when Start > End, return 0. The input contains multiple sets of test data, each set of data contains two integers Start and End. Output the calculation result of each set of data, each set of test data calculation result occupies one line.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testSum1() {\n        assertEquals(0, Main.sum(5, 3));\n    }\n}", "problem": "Please design a recursive segmented sum function sum(int start, int end) for calculating the sum of integers between Start and End. When Start < End, calculate Sum = Start + (Start+1) + ... + End; when Start = End, return Start; when Start > End, return 0. The input contains multiple sets of test data, each set of data contains two integers Start and End. Output the calculation result of each set of data, each set of test data calculation result occupies one line.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Scanner;\n\nclass MainTest {\n    @Test\n    void testSum2() {\n        assertEquals(5, Main.sum(5, 5));\n    }\n\n    @Test\n    void testSum3() {\n        assertEquals(15, Main.sum(1, 5));\n    }\n\n    @Test\n    void testSum4() {\n        assertEquals(5050, Main.sum(1, 100));\n    }\n\n    @Test\n    void testSum5() {\n        assertEquals(0, Main.sum(0, 0));\n    }\n\n    @Test\n    void testSum6() {\n        assertEquals(0, Main.sum(100, 1));\n    }\n\n    @Test\n    void testSum7() {\n        assertEquals(Integer.MAX_VALUE, Main.sum(Integer.MAX_VALUE, Integer.MAX_VALUE));\n    }\n\n    @Test\n    void testSum8() {\n        assertEquals(0, Main.sum(Integer.MAX_VALUE, Integer.MIN_VALUE));\n    }\n\n    @Test\n    void testSum9() {\n        assertEquals(Integer.MIN_VALUE, Main.sum(Integer.MIN_VALUE, Integer.MIN_VALUE));\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextInt()) {\n            int start = scanner.nextInt();\n            int end = scanner.nextInt();\n            System.out.println(sum(start, end));\n        }\n        scanner.close();\n    }\n\n    public static int sum(int start, int end) {\n        if (start > end) {\n            return 0;\n        } else if (start == end) {\n            return start;\n        } else {\n            return start + sum(start + 1, end);\n        }\n    }\n}\n\n```", "classification": "Algorithm and Data Structure"}
{"_id": 176, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite 3 basic classes: Triangle, Ladder, and Circle, respectively used to depict \"triangle\", \"trapezoid\", and \"circle\" classes; 1 main class: Compute, responsible for calculating the area or perimeter of each shape.\nSpecific requirements:\nTriangle defines 3 variables: side length; and 1 method for calculating the perimeter.\nLadder defines 3 variables: upper base, lower base, and height; defines 1 method for calculating the area.\nCircle defines 1 variable: radius; defines 2 methods: calculating the area, calculating the perimeter.\nAll 3 basic classes need to define corresponding constructors to initialize the variables. Written in Java.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass TriangleTest {\n\n    @Test\n    void calculatePerimeter() {\n        Triangle triangle = new Triangle(5);\n        assertEquals(15, triangle.calculatePerimeter());\n    }\n}", "problem": "Write 3 basic classes: Triangle, Ladder, and Circle, respectively used to depict \"triangle\", \"trapezoid\", and \"circle\" classes; 1 main class: Compute, responsible for calculating the area or perimeter of each shape.\nSpecific requirements:\nTriangle defines 3 variables: side length; and 1 method for calculating the perimeter.\nLadder defines 3 variables: upper base, lower base, and height; defines 1 method for calculating the area.\nCircle defines 1 variable: radius; defines 2 methods: calculating the area, calculating the perimeter.\nAll 3 basic classes need to define corresponding constructors to initialize the variables. Written in Java.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass TriangleTest {\n    @Test\n    void calculateArea() {\n        Circle circle = new Circle(5);\n        assertEquals(78.53981633974483, circle.calculateArea());\n    }\n\n    @Test\n    void calculateCircumference() {\n        Circle circle = new Circle(5);\n        assertEquals(31.41592653589793, circle.calculateCircumference());\n    }\n\n    @Test\n    void calculateAreaZero() {\n        Circle circle = new Circle(0);\n        assertEquals(0, circle.calculateArea());\n    }\n\n    @Test\n    void calculateCircumferenceZero() {\n        Circle circle = new Circle(0);\n        assertEquals(0, circle.calculateCircumference());\n    }\n}", "setup_code": "", "reference_solution": "```java\n\nclass Triangle {\n    private double side;\n\n    public Triangle(double side) {\n        this.side = side;\n    }\n\n    public double calculatePerimeter() {\n        return 3 * side;\n    }\n}\n\nclass Ladder {\n    private double top;\n    private double bottom;\n    private double height;\n\n    public Ladder(double top, double bottom, double height) {\n        this.top = top;\n        this.bottom = bottom;\n        this.height = height;\n    }\n\n    public double calculateArea() {\n        return (top + bottom) * height / 2;\n    }\n}\n\nclass Circle {\n    private double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    public double calculateArea() {\n        return Math.PI * Math.pow(radius, 2);\n    }\n\n    public double calculateCircumference() {\n        return 2 * Math.PI * radius;\n    }\n}\n\npublic class Compute {\n    public static void main(String[] args) {\n        Triangle triangle = new Triangle(5);\n        System.out.println(\"Triangle Perimeter: \" + triangle.calculatePerimeter());\n\n        Ladder ladder = new Ladder(5, 10, 7);\n        System.out.println(\"Ladder Area: \" + ladder.calculateArea());\n\n        Circle circle = new Circle(5);\n        System.out.println(\"Circle Area: \" + circle.calculateArea());\n        System.out.println(\"Circle Circumference: \" + circle.calculateCircumference());\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 177, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a Java program that declares two integer variables x and y, initialized as 5 and 7 respectively. Then perform the following operations:\n1. Use the prefix increment operator to increase the first integer by 1, and assign the result to variable a.\n2. Use the postfix decrement operator to decrease the second integer by 1, and assign the result to variable b.\n3. Output the final values of a and b.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class IncrementDecrementTest {\n\n\n    @Test\n    public void testIncrement() {\n        assertEquals(\"Increment 5 should be 6\", 6, incDec.increment(5));\n    }\n}", "problem": "Write a Java program that declares two integer variables x and y, initialized as 5 and 7 respectively. Then perform the following operations:\n1. Use the prefix increment operator to increase the first integer by 1, and assign the result to variable a.\n2. Use the postfix decrement operator to decrease the second integer by 1, and assign the result to variable b.\n3. Output the final values of a and b.", "testcases": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class IncrementDecrementTest {\n    private IncrementDecrement incDec = new IncrementDecrement();\n    @Test\n    public void testDecrement() {\n        assertEquals(\"Decrement 7 should return 7 due to postfix operation\", 7, incDec.decrement(7));\n    }\n\n    @Test\n    public void testIncrementZero() {\n        assertEquals(\"Increment 0 should be 1\", 1, incDec.increment(0));\n    }\n\n    @Test\n    public void testDecrementToNegative() {\n        assertEquals(\"Decrement 0 should return 0 due to postfix operation\", 0, incDec.decrement(0));\n    }\n\n    @Test\n    public void testIncrementNegative() {\n        assertEquals(\"Increment -1 should be 0\", 0, incDec.increment(-1));\n    }\n\n    @Test\n    public void testDecrementNegative() {\n        assertEquals(\"Decrement -1 should return -1 due to postfix operation\", -1, incDec.decrement(-1));\n    }\n\n    @Test\n    public void testIncrementMaxValue() {\n        assertEquals(\"Increment Integer.MAX_VALUE should overflow to Integer.MIN_VALUE\", Integer.MIN_VALUE, incDec.increment(Integer.MAX_VALUE));\n    }\n\n    @Test\n    public void testDecrementMinValue() {\n        assertEquals(\"Decrement Integer.MIN_VALUE should return Integer.MIN_VALUE due to postfix operation\", Integer.MIN_VALUE, incDec.decrement(Integer.MIN_VALUE));\n    }\n\n    @Test\n    public void testMultipleIncrements() {\n        int result = incDec.increment(5);\n        result = incDec.increment(result);\n        assertEquals(\"Multiple increments should result in 7\", 7, result);\n    }\n\n    @Test\n    public void testMultipleDecrements() {\n        int result = incDec.decrement(7);\n        result = incDec.decrement(result);\n        assertEquals(\"Multiple decrements should return 6 due to postfix operation\", 7, result);\n    }\n}\n", "setup_code": "", "reference_solution": "```java\n\npublic class IncrementDecrement {\n    public int increment(int x) {\n        return ++x; // 前缀递增\n    }\n\n    public int decrement(int y) {\n        return y--; // 后缀递减，返回的是递减前的值\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 178, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a method to calculate the sum of two given arrays, formatted as follows:\n6.1.1\npublic static int[] sumArray(int[] a, int[] b)\nThe elements of the returned array should be the sum of the corresponding elements of the two parameter arrays. The elements that do not correspond should be directly assigned to the corresponding positions. For example, {1,2,4} + {2,4,6,8} = {3,6,10,8}.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testSumArray1() {\n        assertArrayEquals(new int[]{3,6,10,8}, Main.sumArray(new int[]{1,2,4}, new int[]{2,4,6,8}));\n    }\n}", "problem": "Write a method to calculate the sum of two given arrays, formatted as follows:\n6.1.1\npublic static int[] sumArray(int[] a, int[] b)\nThe elements of the returned array should be the sum of the corresponding elements of the two parameter arrays. The elements that do not correspond should be directly assigned to the corresponding positions. For example, {1,2,4} + {2,4,6,8} = {3,6,10,8}.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass MainTest {\n    @Test\n    void testSumArray2() {\n        assertArrayEquals(new int[]{5,7,9}, Main.sumArray(new int[]{1,2,3}, new int[]{4,5,6}));\n    }\n\n    @Test\n    void testSumArray3() {\n        assertArrayEquals(new int[]{5,7,9,7,8,9}, Main.sumArray(new int[]{1,2,3}, new int[]{4,5,6,7,8,9}));\n    }\n\n    @Test\n    void testSumArray4() {\n        assertArrayEquals(new int[]{1,2,3,7,8,9}, Main.sumArray(new int[]{1,2,3,0,0,0}, new int[]{0,0,0,7,8,9}));\n    }\n\n    @Test\n    void testSumArray5() {\n        assertArrayEquals(new int[]{0,0,0,0,0,0}, Main.sumArray(new int[]{0,0,0,0,0,0}, new int[]{0,0,0,0,0,0}));\n    }\n\n    @Test\n    void testSumArray6() {\n        assertArrayEquals(new int[]{1,2,3,4,5,6,7,8,9}, Main.sumArray(new int[]{1,2,3,4,5,6,7,8,9}, new int[]{}));\n    }\n\n    @Test\n    void testSumArray7() {\n        assertArrayEquals(new int[]{1}, Main.sumArray(new int[]{1}, new int[]{}));\n    }\n\n    @Test\n    void testSumArray8() {\n        assertArrayEquals(new int[]{1}, Main.sumArray(new int[]{}, new int[]{1}));\n    }\n\n    @Test\n    void testSumArray9() {\n        assertArrayEquals(new int[]{}, Main.sumArray(new int[]{}, new int[]{}));\n    }\n\n    @Test\n    void testSumArray10() {\n        assertArrayEquals(new int[]{Integer.MAX_VALUE, 2}, Main.sumArray(new int[]{Integer.MAX_VALUE, 1}, new int[]{0, 1}));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] a = {1, 2, 4};\n        int[] b = {2, 4, 6, 8};\n        int[] sum = sumArray(a, b);\n        for (int i : sum) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static int[] sumArray(int[] a, int[] b) {\n        int[] sum;\n        if (a.length > b.length) {\n            sum = new int[a.length];\n            for (int i = 0; i < a.length; i++) {\n                if (i < b.length) {\n                    sum[i] = a[i] + b[i];\n                } else {\n                    sum[i] = a[i];\n                }\n            }\n        } else {\n            sum = new int[b.length];\n            for (int i = 0; i < b.length; i++) {\n                if (i < a.length) {\n                    sum[i] = a[i] + b[i];\n                } else {\n                    sum[i] = b[i];\n                }\n            }\n        }\n        return sum;\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 179, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nPlease help me implement a piece of Java code that does the following: input a string that contains <a> tags. The output should be a processed string with the following requirements: 1. The content wrapped in <a> </a> tags should remain unchanged. 2. The content not wrapped in <a> tags should be wrapped in <b> tags.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testWrapNonATagContent1() {\n        String input = \"Hello <a>World</a>!\";\n        String expected = \"<b>Hello </b><a>World</a><b>!</b>\";\n        assertEquals(expected, Main.wrapNonATagContent(input));\n    }\n}", "problem": "Please help me implement a piece of Java code that does the following: input a string that contains <a> tags. The output should be a processed string with the following requirements: 1. The content wrapped in <a> </a> tags should remain unchanged. 2. The content not wrapped in <a> tags should be wrapped in <b> tags.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass MainTest {\n    @Test\n    void testWrapNonATagContent2() {\n        String input = \"<a>Hello</a> World!\";\n        String expected = \"<a>Hello</a><b> World!</b>\";\n        assertEquals(expected, Main.wrapNonATagContent(input));\n    }\n\n    @Test\n    void testWrapNonATagContent3() {\n        String input = \"Hello World!\";\n        String expected = \"<b>Hello World!</b>\";\n        assertEquals(expected, Main.wrapNonATagContent(input));\n    }\n\n    @Test\n    void testWrapNonATagContent4() {\n        String input = \"<a>Hello</a><a>World</a>!\";\n        String expected = \"<a>Hello</a><a>World</a><b>!</b>\";\n        assertEquals(expected, Main.wrapNonATagContent(input));\n    }\n\n    @Test\n    void testWrapNonATagContent5() {\n        String input = \"Hello<a>World</a>!\";\n        String expected = \"<b>Hello</b><a>World</a><b>!</b>\";\n        assertEquals(expected, Main.wrapNonATagContent(input));\n    }\n\n    @Test\n    void testWrapNonATagContent6() {\n        String input = \"<a>Hello</a> <a>World</a>!\";\n        String expected = \"<a>Hello</a><b> </b><a>World</a><b>!</b>\";\n        assertEquals(expected, Main.wrapNonATagContent(input));\n    }\n\n    @Test\n    void testWrapNonATagContent7() {\n        String input = \"<a></a>\";\n        String expected = \"<a></a>\";\n        assertEquals(expected, Main.wrapNonATagContent(input));\n    }\n\n    @Test\n    void testWrapNonATagContent8() {\n        String input = \"\";\n        String expected = \"<b></b>\";\n        assertEquals(expected, Main.wrapNonATagContent(input));\n    }\n\n    @Test\n    void testWrapNonATagContent9() {\n        String input = \" \";\n        String expected = \"<b> </b>\";\n        assertEquals(expected, Main.wrapNonATagContent(input));\n    }\n\n    @Test\n    void testWrapNonATagContent10() {\n        String input = \"<a> </a>\";\n        String expected = \"<a> </a>\";\n        assertEquals(expected, Main.wrapNonATagContent(input));\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Main {\n    public static void main(String[] args) {\n        String input = \"Hello <a>World</a>!\";\n        System.out.println(wrapNonATagContent(input));\n    }\n\n    public static String wrapNonATagContent(String input) {\n        String[] parts = input.split(\"(?=<a>)|(?<=</a>)\");\n        StringBuilder result = new StringBuilder();\n        Pattern pattern = Pattern.compile(\"<a>.*</a>\");\n\n        for (String part : parts) {\n            Matcher matcher = pattern.matcher(part);\n            if (!matcher.matches()) {\n                result.append(\"<b>\").append(part).append(\"</b>\");\n            } else {\n                result.append(part);\n            }\n        }\n\n        return result.toString();\n    }\n}\n\n```", "classification": "Front-End"}
{"_id": 180, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nRequirement Description: The country implements a voluntary blood donation system. The physical examination standards for blood donors are: age 18 to 55 years old, male weight ≥ 50kg, female weight ≥ 45kg, each blood donation is 200ml to 400ml. Write a program in Java to input the age, gender, and weight of the blood donor to determine whether they can donate blood.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class BloodDonationEligibilityTest {\n\n\n    @Test\n    public void testEligibleMale() {\n        assertTrue(\"A male aged 30 weighing 60kg should be eligible\", eligibility.isEligibleForDonation(30, \"male\", 60));\n    }\n}", "problem": "Requirement Description: The country implements a voluntary blood donation system. The physical examination standards for blood donors are: age 18 to 55 years old, male weight ≥ 50kg, female weight ≥ 45kg, each blood donation is 200ml to 400ml. Write a program in Java to input the age, gender, and weight of the blood donor to determine whether they can donate blood.", "testcases": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class BloodDonationEligibilityTest {\n    private BloodDonationEligibility eligibility = new BloodDonationEligibility();\n    @Test\n    public void testEligibleFemale() {\n        assertTrue(\"A female aged 25 weighing 50kg should be eligible\", eligibility.isEligibleForDonation(25, \"female\", 50));\n    }\n\n    @Test\n    public void testIneligibleAge() {\n        assertFalse(\"A person aged 17 should be ineligible\", eligibility.isEligibleForDonation(17, \"male\", 60));\n    }\n\n    @Test\n    public void testIneligibleMaleWeight() {\n        assertFalse(\"A male weighing 49kg should be ineligible\", eligibility.isEligibleForDonation(30, \"male\", 49));\n    }\n\n    @Test\n    public void testIneligibleFemaleWeight() {\n        assertFalse(\"A female weighing 44kg should be ineligible\", eligibility.isEligibleForDonation(25, \"female\", 44));\n    }\n\n    @Test\n    public void testIneligibleAgeAndWeightMale() {\n        assertFalse(\"A male aged 16 weighing 48kg should be ineligible\", eligibility.isEligibleForDonation(16, \"male\", 48));\n    }\n\n    @Test\n    public void testIneligibleAgeAndWeightFemale() {\n        assertFalse(\"A female aged 56 weighing 44kg should be ineligible\", eligibility.isEligibleForDonation(56, \"female\", 44));\n    }\n\n    @Test\n    public void testUpperBoundaryAgeMale() {\n        assertTrue(\"A male aged 55 weighing 50kg should be eligible\", eligibility.isEligibleForDonation(55, \"male\", 50));\n    }\n\n    @Test\n    public void testUpperBoundaryAgeFemale() {\n        assertTrue(\"A female aged 55 weighing 45kg should be eligible\", eligibility.isEligibleForDonation(55, \"female\", 45));\n    }\n\n    @Test\n    public void testLowerBoundaryAgeMale() {\n        assertTrue(\"A male aged 18 weighing 50kg should be eligible\", eligibility.isEligibleForDonation(18, \"male\", 50));\n    }\n\n    @Test\n    public void testLowerBoundaryAgeFemale() {\n        assertTrue(\"A female aged 18 weighing 45kg should be eligible\", eligibility.isEligibleForDonation(18, \"female\", 45));\n    }\n}\n", "setup_code": "", "reference_solution": "```java\n\npublic class BloodDonationEligibility {\n\n    public boolean isEligibleForDonation(int age, String gender, double weight) {\n        // 检查年龄是否在18到55岁之间\n        if (age < 18 || age > 55) {\n            return false;\n        }\n\n        // 根据性别检查体重\n        if (\"male\".equalsIgnoreCase(gender) && weight < 50) {\n            return false;\n        } else if (\"female\".equalsIgnoreCase(gender) && weight < 45) {\n            return false;\n        }\n\n        // 如果通过上述所有检查，则符合献血条件\n        return true;\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 181, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nGiven an array of strings, words, indexed from 0 and two integers: left and right.\n\nA string is a \"vowel string\" if it starts and ends with a vowel letter, where the vowel letters are 'a', 'e', 'i', 'o', 'u'.\n\nReturn the number of words[i] that are vowel strings, where i is in the closed interval [left, right].\n\nAnswer in Java.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testCountVowelStrings1() {\n        String[] words = {\"apple\", \"banana\", \"cherry\", \"date\", \"egg\", \"fig\", \"grape\"};\n        assertEquals(0, Main.countVowelStrings(words, 1, 5));\n    }\n}", "problem": "Given an array of strings, words, indexed from 0 and two integers: left and right.\n\nA string is a \"vowel string\" if it starts and ends with a vowel letter, where the vowel letters are 'a', 'e', 'i', 'o', 'u'.\n\nReturn the number of words[i] that are vowel strings, where i is in the closed interval [left, right].\n\nAnswer in Java.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass MainTest {\n    @Test\n    void testCountVowelStrings2() {\n        String[] words = {\"apple\", \"banana\", \"cherry\", \"date\", \"egg\", \"fig\", \"grape\"};\n        assertEquals(1, Main.countVowelStrings(words, 0, 3));\n    }\n\n    @Test\n    void testCountVowelStrings3() {\n        String[] words = {\"apple\", \"banana\", \"cherry\", \"date\", \"egg\", \"fig\", \"grape\"};\n        assertEquals(0, Main.countVowelStrings(words, 2, 4));\n    }\n\n    @Test\n    void testCountVowelStrings4() {\n        String[] words = {\"apple\", \"banana\", \"cherry\", \"date\", \"egg\", \"fig\", \"grape\"};\n        assertEquals(1, Main.countVowelStrings(words, 0, 6));\n    }\n\n    @Test\n    void testCountVowelStrings5() {\n        String[] words = {\"apple\", \"banana\", \"cherry\", \"date\", \"egg\", \"fig\", \"grape\"};\n        assertEquals(0, Main.countVowelStrings(words, 3, 3));\n    }\n\n    @Test\n    void testCountVowelStrings6() {\n        String[] words = {\"apple\", \"banana\", \"cherry\", \"date\", \"egg\", \"fig\", \"grape\"};\n        assertEquals(0, Main.countVowelStrings(words, 4, 6));\n    }\n\n    @Test\n    void testCountVowelStrings7() {\n        String[] words = {\"apple\"};\n        assertEquals(1, Main.countVowelStrings(words, 0, 0));\n    }\n\n    @Test\n    void testCountVowelStrings8() {\n        String[] words = {\"banana\"};\n        assertEquals(0, Main.countVowelStrings(words, 0, 0));\n    }\n\n    @Test\n    void testCountVowelStrings9() {\n        String[] words = {\"apple\", \"banana\"};\n        assertEquals(1, Main.countVowelStrings(words, 0, 1));\n    }\n\n    @Test\n    void testCountVowelStrings10() {\n        String[] words = {\"apple\", \"banana\", \"cherry\", \"date\", \"egg\", \"fig\", \"grape\", \"honeydew\", \"ice cream\", \"jackfruit\"};\n        assertEquals(1, Main.countVowelStrings(words, 0, 9));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] words = {\"apple\", \"banana\", \"cherry\", \"date\", \"egg\", \"fig\", \"grape\"};\n        int left = 1;\n        int right = 5;\n        System.out.println(countVowelStrings(words, left, right));\n    }\n\n    public static int countVowelStrings(String[] words, int left, int right) {\n        int count = 0;\n        for (int i = left; i <= right; i++) {\n            if (isVowelString(words[i])) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static boolean isVowelString(String word) {\n        char firstChar = word.charAt(0);\n        char lastChar = word.charAt(word.length() - 1);\n        return isVowel(firstChar) && isVowel(lastChar);\n    }\n\n    private static boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n\n```", "classification": "Algorithm and Data Structure"}
{"_id": 182, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nCreate a custom class in Java for finding the maximum value.\nCreate a method to find the maximum value among three numbers, and implement method overloading. It should be able to compare the maximum value among three integers, three decimals, and any three numbers.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MaxValueTest {\n\n    @Test\n    void testMaxInt() {\n        MaxValue maxValue = new MaxValue();\n        assertEquals(9, maxValue.max(3, 5, 9));\n        assertEquals(0, maxValue.max(0, -1, -2));\n        assertEquals(100, maxValue.max(100, 100, 100));\n        assertEquals(-1, maxValue.max(-1, -2, -3));\n        assertEquals(Integer.MAX_VALUE, maxValue.max(Integer.MAX_VALUE, 0, -1));\n        assertEquals(Integer.MIN_VALUE, maxValue.max(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE));\n    }\n}", "problem": "Create a custom class in Java for finding the maximum value.\nCreate a method to find the maximum value among three numbers, and implement method overloading. It should be able to compare the maximum value among three integers, three decimals, and any three numbers.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nclass MaxValueTest {\n    @Test\n    void testMaxDouble() {\n        MaxValue maxValue = new MaxValue();\n        assertEquals(9.9, maxValue.max(3.3, 5.5, 9.9));\n        assertEquals(0.0, maxValue.max(0.0, -1.1, -2.2));\n        assertEquals(100.1, maxValue.max(100.1, 100.1, 100.1));\n        assertEquals(-1.1, maxValue.max(-1.1, -2.2, -3.3));\n        assertEquals(Double.MAX_VALUE, maxValue.max(Double.MAX_VALUE, 0.0, -1.1));\n        assertEquals(Double.MIN_VALUE, maxValue.max(Double.MIN_VALUE, Double.MIN_VALUE, Double.MIN_VALUE));\n    }\n\n    @Test\n    void testMaxNumber() {\n        MaxValue maxValue = new MaxValue();\n        assertEquals(9.9, maxValue.max(3, 5.5, 9.9));\n        assertEquals(0.0, maxValue.max(0, -1.1, -2));\n        assertEquals(100.1, maxValue.max(100, 100.1, 100));\n        assertEquals(-1, maxValue.max(-1, -2.2, -3));\n        assertEquals(Double.MIN_VALUE, maxValue.max(Integer.MIN_VALUE, Double.MIN_VALUE, Double.MIN_VALUE));\n    }\n}", "setup_code": "", "reference_solution": "```java\n\npublic class MaxValue {\n    // Method to find maximum in three integers\n    public int max(int num1, int num2, int num3) {\n        return Math.max(num1, Math.max(num2, num3));\n    }\n\n    // Method to find maximum in three doubles\n    public double max(double num1, double num2, double num3) {\n        return Math.max(num1, Math.max(num2, num3));\n    }\n\n    // Method to find maximum in three numbers (any type)\n    public double max(Number num1, Number num2, Number num3) {\n        return Math.max(num1.doubleValue(), Math.max(num2.doubleValue(), num3.doubleValue()));\n    }\n}\n\n```", "classification": "Algorithm and Data Structure"}
{"_id": 183, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nIn Java, change the characters in the string \"legendary\" to an alternating uppercase and lowercase pattern, \n\ni.e. \"LeGeNdArY\"\n\nHint:\n\nUse the API\n\nCharacter.toUpperCase to convert characters to uppercase\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class StringUtilsTest {\n\n\n    @Test\n    public void testAlternateCaseBasic() {\n        assertEquals(\"LeGeNdArY\", StringUtils.alternateCase(\"legendary\"));\n    }\n}", "problem": "In Java, change the characters in the string \"legendary\" to an alternating uppercase and lowercase pattern, \n\ni.e. \"LeGeNdArY\"\n\nHint:\n\nUse the API\n\nCharacter.toUpperCase to convert characters to uppercase", "testcases": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class StringUtilsTest {\n    @Test\n    public void testAlternateCaseEmpty() {\n        assertEquals(\"\", StringUtils.alternateCase(\"\"));\n    }\n\n    @Test\n    public void testAlternateCaseAllLowerCase() {\n        assertEquals(\"AbCdEf\", StringUtils.alternateCase(\"abcdef\"));\n    }\n\n    @Test\n    public void testAlternateCaseAllUpperCase() {\n        assertEquals(\"AbCdEf\", StringUtils.alternateCase(\"ABCDEF\"));\n    }\n\n    @Test\n    public void testAlternateCaseWithSpecialCharacters() {\n        assertEquals(\"A!B@C#D$\", StringUtils.alternateCase(\"a!b@c#d$\"));\n    }\n\n    @Test\n    public void testAlternateCaseSingleCharacter() {\n        assertEquals(\"A\", StringUtils.alternateCase(\"a\"));\n    }\n\n    @Test\n    public void testAlternateCaseLongString() {\n        String longString = \"abcdefghijklmnopqrstuvwxyz\";\n        String expected = \"AbCdEfGhIjKlMnOpQrStUvWxYz\";\n        assertEquals(expected, StringUtils.alternateCase(longString));\n    }\n\n    @Test\n    public void testAlternateCaseNonAlphabetic() {\n        assertEquals(\"1!2@3#\", StringUtils.alternateCase(\"1!2@3#\"));\n    }\n\n    @Test\n    public void testAlternateCaseConsecutiveCases() {\n        assertEquals(\"AaBbCcDd\", StringUtils.alternateCase(\"AABbccDd\"));\n    }\n}\n", "setup_code": "", "reference_solution": "```java\n\npublic class StringUtils {\n\n    public static String alternateCase(String input) {\n        StringBuilder sb = new StringBuilder(input.length());\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            if (i % 2 == 0) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 184, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a program in Java to switch between Java JDK versions, specifically for switching between JDK 1.7, 1.8, and JDK 11.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass CommentRemoverTest {\n\n    @Test\n    void testRemoveCommentsFromFile1() {\n        CommentRemover.removeCommentsFromFile(\"test1/test.java\", \"test1/output.java\");\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"test1/output.java\"))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                assertFalse(line.startsWith(\"//\"));\n                assertFalse(line.startsWith(\"/*\"));\n                assertFalse(line.contains(\"*/\"));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "problem": "Write a program in Java to switch between Java JDK versions, specifically for switching between JDK 1.7, 1.8, and JDK 11.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\nclass CommentRemoverTest {\n    @Test\n    void testRemoveCommentsFromFile2() {\n        CommentRemover.removeCommentsFromFile(\"test2/test.java\", \"test2/output.java\");\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"test2/output.java\"))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                assertFalse(line.startsWith(\"//\"));\n                assertFalse(line.startsWith(\"/*\"));\n                assertFalse(line.contains(\"*/\"));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    void testRemoveCommentsFromFile3() {\n        CommentRemover.removeCommentsFromFile(\"test3/test.java\", \"test3/output.java\");\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"test3/output.java\"))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                assertFalse(line.startsWith(\"//\"));\n                assertFalse(line.startsWith(\"/*\"));\n                assertFalse(line.contains(\"*/\"));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    void testRemoveCommentsFromFile4() {\n        CommentRemover.removeCommentsFromFile(\"test4/test.java\", \"test4/output.java\");\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"test4/output.java\"))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                assertFalse(line.startsWith(\"//\"));\n                assertFalse(line.startsWith(\"/*\"));\n                assertFalse(line.contains(\"*/\"));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    void testRemoveCommentsFromFile5() {\n        CommentRemover.removeCommentsFromFile(\"test5/test.java\", \"test5/output.java\");\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"test5/output.java\"))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                assertFalse(line.startsWith(\"//\"));\n                assertFalse(line.startsWith(\"/*\"));\n                assertFalse(line.contains(\"*/\"));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    void testRemoveCommentsFromFile6() {\n        CommentRemover.removeCommentsFromFile(\"test6/test.java\", \"test6/output.java\");\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"test6/output.java\"))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                assertFalse(line.startsWith(\"//\"));\n                assertFalse(line.startsWith(\"/*\"));\n                assertFalse(line.contains(\"*/\"));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    void testRemoveCommentsFromFile7() {\n        CommentRemover.removeCommentsFromFile(\"test7/test.java\", \"test7/output.java\");\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"test7/output.java\"))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                assertFalse(line.startsWith(\"//\"));\n                assertFalse(line.startsWith(\"/*\"));\n                assertFalse(line.contains(\"*/\"));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    void testRemoveCommentsFromFile8() {\n        CommentRemover.removeCommentsFromFile(\"test8/test.java\", \"test8/output.java\");\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"test8/output.java\"))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                assertFalse(line.startsWith(\"//\"));\n                assertFalse(line.startsWith(\"/*\"));\n                assertFalse(line.contains(\"*/\"));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "setup_code": "", "reference_solution": "```java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class CommentRemover {\n    public static void removeCommentsFromFile(String inputFilePath, String outputFilePath) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(inputFilePath));\n             BufferedWriter writer = new BufferedWriter(new FileWriter(outputFilePath))) {\n\n            String line;\n            StringBuilder codeBuilder = new StringBuilder();\n            boolean isCommentBlock = false;\n\n            while ((line = reader.readLine()) != null) {\n                line = line.trim();\n\n                // 处理多行注释块\n                if (isCommentBlock) {\n                    if (line.contains(\"*/\")) {\n                        line = line.substring(line.indexOf(\"*/\") + 2);\n                        isCommentBlock = false;\n                    } else {\n                        continue;\n                    }\n                }\n\n                // 处理单行注释\n                if (line.startsWith(\"//\")) {\n                    line = \"\";\n                } else if (line.startsWith(\"/*\")) {\n                    // 处理多行注释块的起始行\n                    if (line.contains(\"*/\")) {\n                        line = line.substring(line.indexOf(\"*/\") + 2);\n                    } else {\n                        isCommentBlock = true;\n                        continue;\n                    }\n                }\n\n                codeBuilder.append(line);\n                codeBuilder.append(System.lineSeparator());\n            }\n\n            writer.write(codeBuilder.toString());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        String inputFilePath = \"Example.java\";\n        String outputFilePath = \"CleanExample.java\";\n\n        removeCommentsFromFile(inputFilePath, outputFilePath);\n    }\n}\n```", "classification": "Operation System"}
{"_id": 185, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nUsing Java syntax, read a Java file and remove all comments in it. You can use regular expressions or parsers to achieve this. Output the file with all comments removed.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass ImageClassifierTest {\n\n    @Test\n    public void testClassifyImages_case1() {\n        ImageClassifier.classifyImages(\"test1\", 280, 440);\n        assertTrue((new File(\"test1/folder_1/1.jpg\").exists()));\n    }\n}", "problem": "Using Java syntax, read a Java file and remove all comments in it. You can use regular expressions or parsers to achieve this. Output the file with all comments removed.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\n\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\n\nclass ImageClassifierTest {\n    @Test\n    public void testClassifyImages_case2() {\n        ImageClassifier.classifyImages(\"test2\", 280, 440);\n        assertTrue((new File(\"test2/folder_1/1.jpg\").exists()));\n        assertTrue((new File(\"test2/folder_3/2.jpg\").exists()));\n    }\n\n    @Test\n    public void testClassifyImages_case3() {\n        ImageClassifier.classifyImages(\"test3\", 280, 440);\n        assertTrue((new File(\"test3/folder_1/1.jpg\").exists()));\n        assertTrue((new File(\"test3/folder_2/4.jpg\").exists()));\n        assertTrue((new File(\"test3/folder_3/2.jpg\").exists()));\n    }\n\n    @Test\n    public void testClassifyImages_case4() {\n        ImageClassifier.classifyImages(\"test4\", 280, 440);\n        assertTrue((new File(\"test4/folder_1/1.jpg\").exists()));\n        assertTrue((new File(\"test4/folder_2/3.jpg\").exists()));\n        assertTrue((new File(\"test4/folder_2/4.jpg\").exists()));\n        assertTrue((new File(\"test4/folder_3/2.jpg\").exists()));\n        assertTrue((new File(\"test4/folder_3/5.jpg\").exists()));\n    }\n\n    @Test\n    public void testClassifyImages_case5() {\n        ImageClassifier.classifyImages(\"test5\", 280, 440);\n        assertTrue((new File(\"test5/folder_3/5.jpg\").exists()));\n    }\n\n    @Test\n    public void testClassifyImages_case6() {\n        ImageClassifier.classifyImages(\"test6\", 280, 440);\n        assertTrue((new File(\"test6/folder_3/2.jpg\").exists()));\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\n\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\n\npublic class ImageClassifier {\n    public static void classifyImages(String imageFolder, int threshold1, int threshold2){\n        // 分类后的文件夹路径\n        String outputFolder1 = imageFolder + \"/folder_1\";\n        String outputFolder2 = imageFolder + \"/folder_2\";\n        String outputFolder3 = imageFolder + \"/folder_3\";\n\n        // 获取图像文件夹中的所有文件\n        File[] imageFiles = new File(imageFolder).listFiles();\n        if (imageFiles == null) {\n            System.out.println(\"图像文件夹为空或无法访问。\");\n            return;\n        }\n\n        // 遍历图像文件夹中的所有文件\n        for (File imageFile : imageFiles) {\n            if (imageFile.getName().endsWith(\".jpg\") || imageFile.getName().endsWith(\".png\")) {\n                try {\n                    // 读取图像\n                    BufferedImage image = ImageIO.read(imageFile);\n\n                    // 获取图像的长宽\n                    int width = image.getWidth();\n                    int height = image.getHeight();\n\n                    // 根据阈值分类\n                    String outputFolder;\n                    if (width < threshold1 || height < threshold1) {\n                        outputFolder = outputFolder1;\n                    } else if (width < threshold2 || height < threshold2) {\n                        outputFolder = outputFolder2;\n                    } else {\n                        outputFolder = outputFolder3;\n                    }\n\n                    // 确保输出文件夹存在\n                    new File(outputFolder).mkdirs();\n\n                    // 将图像移动到相应的输出文件夹中\n                    Path outputPath = new File(outputFolder, imageFile.getName()).toPath();\n                    Files.copy(imageFile.toPath(), outputPath, StandardCopyOption.REPLACE_EXISTING);\n                } catch (IOException e) {\n                    System.out.println(\"处理图像文件时出错: \" + e.getMessage());\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        // 图像文件夹路径\n        String imageFolder = \"images\";\n\n        // 阈值\n        int threshold1 = 100;\n        int threshold2 = 200;\n\n        classifyImages(imageFolder, threshold1, threshold2);\n    }\n}\n```", "classification": "Software Engineering"}
{"_id": 186, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nIn Java language, three thresholds are set according to the length and width of the image for classification. When the length or width is less than the threshold of 100, it is output to the folder_1. When the length or width is greater than the threshold of 100 but less than the threshold of 200, it is output to the folder_2. Everything else is output to the folder_3.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass DistanceTest {\n\n    @Test\n    void testEuclideanDistance() {\n        double[] pointA = {1, 2, 3};\n        double[] pointB = {4, 5, 6};\n        assertEquals(5.196152422706632, Distance.euclideanDistance(pointA, pointB));\n    }\n}", "problem": "In Java language, three thresholds are set according to the length and width of the image for classification. When the length or width is less than the threshold of 100, it is output to the folder_1. When the length or width is greater than the threshold of 100 but less than the threshold of 200, it is output to the folder_2. Everything else is output to the folder_3.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\nclass DistanceTest {\n    @Test\n    void testManhattanDistance() {\n        double[] pointA = {1, 2, 3};\n        double[] pointB = {4, 5, 6};\n        assertEquals(9.0, Distance.manhattanDistance(pointA, pointB));\n    }\n\n    @Test\n    void testChebyshevDistance() {\n        double[] pointA = {1, 2, 3};\n        double[] pointB = {4, 5, 6};\n        assertEquals(3.0, Distance.chebyshevDistance(pointA, pointB));\n    }\n\n    @Test\n    void testMinkowskiDistance() {\n        double[] pointA = {1, 2, 3};\n        double[] pointB = {4, 5, 6};\n        assertEquals(5.196152422706632, Distance.minkowskiDistance(pointA, pointB, 2));\n    }\n\n    @Test\n    void testCosineSimilarity() {\n        double[] vectorX = {1, 2, 3};\n        double[] vectorY = {4, 5, 6};\n        assertEquals(0.9746318461970762, Distance.cosineSimilarity(vectorX, vectorY));\n    }\n\n    @Test\n    void testHammingDistance() {\n        String stringP = \"1010101\";\n        String stringQ = \"1001001\";\n        assertEquals(3, Distance.hammingDistance(stringP, stringQ));\n    }\n\n    @Test\n    void testJaccardSimilarity() {\n        Set<Integer> setAlpha = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n        Set<Integer> setBeta = new HashSet<>(Arrays.asList(4, 5, 6, 7, 8));\n        assertEquals(0.25, Distance.jaccardSimilarity(setAlpha, setBeta));\n    }\n\n    @Test\n    void testEuclideanDistanceWithSamePoints() {\n        double[] pointA = {1, 2, 3};\n        double[] pointB = {1, 2, 3};\n        assertEquals(0.0, Distance.euclideanDistance(pointA, pointB));\n    }\n\n    @Test\n    void testManhattanDistanceWithSamePoints() {\n        double[] pointA = {1, 2, 3};\n        double[] pointB = {1, 2, 3};\n        assertEquals(0.0, Distance.manhattanDistance(pointA, pointB));\n    }\n\n    @Test\n    void testChebyshevDistanceWithSamePoints() {\n        double[] pointA = {1, 2, 3};\n        double[] pointB = {1, 2, 3};\n        assertEquals(0.0, Distance.chebyshevDistance(pointA, pointB));\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Distance {\n\n    // 欧几里得距离\n    public static double euclideanDistance(double[] point1, double[] point2) {\n        double sum = 0;\n        for (int i = 0; i < point1.length; i++) {\n            sum += Math.pow(point1[i] - point2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    // 曼哈顿距离\n    public static double manhattanDistance(double[] point1, double[] point2) {\n        double sum = 0;\n        for (int i = 0; i < point1.length; i++) {\n            sum += Math.abs(point1[i] - point2[i]);\n        }\n        return sum;\n    }\n\n    // 切比雪夫距离\n    public static double chebyshevDistance(double[] point1, double[] point2) {\n        double max = 0;\n        for (int i = 0; i < point1.length; i++) {\n            max = Math.max(max, Math.abs(point1[i] - point2[i]));\n        }\n        return max;\n    }\n\n    // 闵可夫斯基距离\n    public static double minkowskiDistance(double[] point1, double[] point2, double p) {\n        double sum = 0;\n        for (int i = 0; i < point1.length; i++) {\n            sum += Math.pow(Math.abs(point1[i] - point2[i]), p);\n        }\n        return Math.pow(sum, 1 / p);\n    }\n\n    // 余弦相似度\n    public static double cosineSimilarity(double[] vector1, double[] vector2) {\n        double dotProduct = 0;\n        double normVector1 = 0;\n        double normVector2 = 0;\n\n        for (int i = 0; i < vector1.length; i++) {\n            dotProduct += vector1[i] * vector2[i];\n            normVector1 += Math.pow(vector1[i], 2);\n            normVector2 += Math.pow(vector2[i], 2);\n        }\n\n        return dotProduct / (Math.sqrt(normVector1) * Math.sqrt(normVector2));\n    }\n\n    // 汉明距离\n    public static int hammingDistance(String string1, String string2) {\n        int distance = 0;\n        for (int i = 0; i < string1.length(); i++) {\n            if (string1.charAt(i) != string2.charAt(i)) {\n                distance++;\n            }\n        }\n        return distance;\n    }\n\n    // Jaccard相似度\n    public static double jaccardSimilarity(Set<Integer> set1, Set<Integer> set2) {\n        Set<Integer> intersection = new HashSet<>(set1);\n        intersection.retainAll(set2);\n\n        Set<Integer> union = new HashSet<>(set1);\n        union.addAll(set2);\n\n        return (double) intersection.size() / union.size();\n    }\n\n    public static void main(String[] args) {\n        // 手动编写数据\n        double[] pointA = {1, 2, 3};\n        double[] pointB = {4, 5, 6};\n\n        double[] vectorX = {1, 2, 3};\n        double[] vectorY = {4, 5, 6};\n\n        String stringP = \"1010101\";\n        String stringQ = \"1001001\";\n\n        Set<Integer> setAlpha = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n        Set<Integer> setBeta = new HashSet<>(Arrays.asList(4, 5, 6, 7, 8));\n\n        // 调用函数并输出结果\n        System.out.println(\"Euclidean Distance: \" + euclideanDistance(pointA, pointB));\n        System.out.println(\"Manhattan Distance: \" + manhattanDistance(pointA, pointB));\n        System.out.println(\"Chebyshev Distance: \" + chebyshevDistance(pointA, pointB));\n        System.out.println(\"Minkowski Distance (p=2): \" + minkowskiDistance(pointA, pointB, 2));\n        System.out.println(\"Cosine Similarity: \" + cosineSimilarity(vectorX, vectorY));\n        System.out.println(\"Hamming Distance: \" + hammingDistance(stringP, stringQ));\n        System.out.println(\"Jaccard Similarity: \" + jaccardSimilarity(setAlpha, setBeta));\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 187, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite Euclidean, Manhattan, Chebyshev, Minkowski, Cosine Similarity, Hamming Distance, Jaccard Similarity, and other distance calculation methods using Java functions. Manually write data to call these distance calculation functions. Output the calculation results.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass TestConvertLabels {\n\n\n    @Test\n    void testConvertLabels1(@TempDir Path tempDir) throws Exception {\n        testConvertLabelsHelper(tempDir, \"<annotation><object><bndbox><xmin>950</xmin><ymin>786</ymin><xmax>1400</xmax><ymax>1052</ymax></bndbox><name>1</name></object></annotation>\", new int[]{950,786,1400,1052}, \"0\");\n    }\n}", "problem": "Write Euclidean, Manhattan, Chebyshev, Minkowski, Cosine Similarity, Hamming Distance, Jaccard Similarity, and other distance calculation methods using Java functions. Manually write data to call these distance calculation functions. Output the calculation results.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.io.TempDir;\nimport org.w3c.dom.*;\n\nimport javax.xml.parsers.*;\nimport java.nio.file.*;\n\nclass TestConvertLabels {\n    @Test\n    void testConvertLabels2(@TempDir Path tempDir) throws Exception {\n        testConvertLabelsHelper(tempDir, \"<annotation><object><bndbox><xmin>0</xmin><ymin>0</ymin><xmax>2</xmax><ymax>2</ymax></bndbox><name>1</name></object></annotation>\", new int[]{1,1,3,3}, \"0\");\n    }\n\n    @Test\n    void testConvertLabels3(@TempDir Path tempDir) throws Exception {\n        testConvertLabelsHelper(tempDir, \"<annotation><object><bndbox><xmin>0</xmin><ymin>0</ymin><xmax>2</xmax><ymax>2</ymax></bndbox><name>1</name></object></annotation>\", new int[]{2,2,4,4}, \"1\");\n    }\n\n    @Test\n    void testConvertLabels4(@TempDir Path tempDir) throws Exception {\n        testConvertLabelsHelper(tempDir, \"<annotation><object><bndbox><xmin>0</xmin><ymin>0</ymin><xmax>2</xmax><ymax>2</ymax></bndbox><name>1</name></object></annotation>\", new int[]{0,0,2,2}, \"0\");\n    }\n\n    @Test\n    void testConvertLabels5(@TempDir Path tempDir) throws Exception {\n        testConvertLabelsHelper(tempDir, \"<annotation><object><bndbox><xmin>1000</xmin><ymin>800</ymin><xmax>1300</xmax><ymax>1000</ymax></bndbox><name>1</name></object></annotation>\", new int[]{950,786,1400,1052}, \"0\");\n    }\n\n    @Test\n    void testConvertLabels6(@TempDir Path tempDir) throws Exception {\n        testConvertLabelsHelper(tempDir, \"<annotation><object><bndbox><xmin>900</xmin><ymin>750</ymin><xmax>1450</xmax><ymax>1100</ymax></bndbox><name>1</name></object></annotation>\", new int[]{950,786,1400,1052}, \"0\");\n    }\n\n    @Test\n    void testConvertLabels7(@TempDir Path tempDir) throws Exception {\n        testConvertLabelsHelper(tempDir, \"<annotation><object><bndbox><xmin>950</xmin><ymin>786</ymin><xmax>1400</xmax><ymax>1052</ymax></bndbox><name>2</name></object></annotation>\", new int[]{950,786,1400,1052}, \"0\");\n    }\n    // Repeat for testConvertLabels2, testConvertLabels3, etc., changing the XML string, array, and expected string as needed.\n\n    private void testConvertLabelsHelper(Path tempDir, String xml, int[] bounds, String expected) throws Exception {\n        Path subDir = tempDir.resolve(\"sub\");\n        Files.createDirectory(subDir);\n        Path xmlFile = subDir.resolve(\"label.xml\");\n        Files.write(xmlFile, xml.getBytes());\n\n        // Assuming convertLabels is a static method in a class called MyClass.\n        LabelConverter.convertLabels(xmlFile.toString(), bounds);\n\n        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n        Document doc = builder.parse(xmlFile.toFile());\n        String actual = doc.getElementsByTagName(\"name\").item(0).getTextContent();\n        assertEquals(expected, actual);\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport org.w3c.dom.*;\nimport org.xml.sax.SAXException;\n\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class LabelConverter {\n    public static double calculateIoU(int[] box1, int[] box2) {\n        int x1 = box1[0];\n        int y1 = box1[1];\n        int x2 = box1[2];\n        int y2 = box1[3];\n        int x3 = box2[0];\n        int y3 = box2[1];\n        int x4 = box2[2];\n        int y4 = box2[3];\n\n        // 计算相交矩形的左上角和右下角坐标\n        int inter_x1 = Math.max(x1, x3);\n        int inter_y1 = Math.max(y1, y3);\n        int inter_x2 = Math.min(x2, x4);\n        int inter_y2 = Math.min(y2, y4);\n\n        // 计算相交矩形的面积\n        int inter_area = Math.max(0, inter_x2 - inter_x1 + 1) * Math.max(0, inter_y2 - inter_y1 + 1);\n\n        // 计算并集面积和IoU\n        int box1_area = (x2 - x1 + 1) * (y2 - y1 + 1);\n        int box2_area = (x4 - x3 + 1) * (y4 - y3 + 1);\n        int union_area = box1_area + box2_area - inter_area;\n        double iou = (double) inter_area / union_area;\n\n        return iou;\n    }\n\n    public static void convertLabels(String labelFile, int[] targetRegion) throws ParserConfigurationException, IOException, SAXException, TransformerException {\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        Document doc = factory.newDocumentBuilder().parse(new File(labelFile));\n\n        NodeList objectList = doc.getElementsByTagName(\"object\");\n\n        for (int i = 0; i < objectList.getLength(); i++) {\n            Element objectElem = (Element) objectList.item(i);\n            Element bboxElem = (Element) objectElem.getElementsByTagName(\"bndbox\").item(0);\n\n            int xmin = Integer.parseInt(bboxElem.getElementsByTagName(\"xmin\").item(0).getTextContent());\n            int ymin = Integer.parseInt(bboxElem.getElementsByTagName(\"ymin\").item(0).getTextContent());\n            int xmax = Integer.parseInt(bboxElem.getElementsByTagName(\"xmax\").item(0).getTextContent());\n            int ymax = Integer.parseInt(bboxElem.getElementsByTagName(\"ymax\").item(0).getTextContent());\n\n            // 计算当前边界框与目标区域的IoU\n            double iou = calculateIoU(targetRegion, new int[]{xmin, ymin, xmax, ymax});\n\n            // 如果IoU大于0.2，则将类别设置为0\n            if (iou > 0.2) {\n                Element nameElem = (Element) objectElem.getElementsByTagName(\"name\").item(0);\n                nameElem.setTextContent(\"0\");\n            }\n        }\n\n        // 保存更新后的XML文件\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        Transformer transformer = transformerFactory.newTransformer();\n        transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n        DOMSource source = new DOMSource(doc);\n        StreamResult result = new StreamResult(new File(labelFile));\n        transformer.transform(source, result);\n    }\n\n    public static void main(String[] args) {\n        int[] targetRegion = {950, 786, 1400, 1052};\n        String labelFile = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\work\\\\1225\\\\annotations\\\\A37-145-BSD-231221-A_485.xml\";\n\n        try {\n            convertLabels(labelFile, targetRegion);\n            System.out.println(\"Label conversion completed successfully.\");\n        } catch (ParserConfigurationException | IOException | SAXException | TransformerException e) {\n            System.out.println(\"An error occurred during label conversion: \" + e.getMessage());\n        }\n    }\n}\n```", "classification": "Data Science"}
{"_id": 188, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nUse the Java tag data in VOC format to divide the real box labels with IoU greater than 0.2 in the given area into category 0.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testAddUser1() {\n        UserManager userManager = new UserManager();\n        // Test case 1: Invalid name\n        assertEquals(\"Name illegal\", userManager.addUser(\"123\", \"M\", \"000100200000\"));\n    }\n}", "problem": "Use the Java tag data in VOC format to divide the real box labels with IoU greater than 0.2 in the given area into category 0.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.HashSet;\n\nclass MainTest {\n    @Test\n    void testAddUser2() {\n        UserManager userManager = new UserManager();\n        // Test case 2: Invalid gender\n        assertEquals(\"Sex illegal\", userManager.addUser(\"LaoWang\", \"G\", \"123704601001\"));\n    }\n\n    @Test\n    void testAddUser3() {\n        UserManager userManager = new UserManager();\n        // Test case 3: Invalid ID number format\n        assertEquals(\"ID number illegal\", userManager.addUser(\"LaoWang\", \"M\", \"100003000552\"));\n    }\n\n    @Test\n    void testAddUser4() {\n        UserManager userManager = new UserManager();\n        // Test case 4: ID number and gender mismatch\n        assertEquals(\"ID number illegal\", userManager.addUser(\"LaoWang\", \"M\", \"023004000800\"));\n    }\n\n    @Test\n    void testAddUser5() {\n        UserManager userManager = new UserManager();\n        // Test case 5: Valid input\n        assertEquals(\"Name:LaoWang\\nSex:M\\nID:111102220991\", userManager.addUser(\"LaoWang\", \"M\", \"111102220991\"));\n    }\n\n    @Test\n    void testAddUser6() {\n        UserManager userManager = new UserManager();\n        // Test case 6: ID number already registered\n        assertEquals(\"Name:HaiWang\\nSex:M\\nID:098703100251\", userManager.addUser(\"HaiWang\", \"M\", \"098703100251\"));\n    }\n\n    @Test\n    void testAddUser7() {\n        UserManager userManager = new UserManager();\n        // Test case 7: Minimum valid ID number\n        assertEquals(\"ID number illegal\", userManager.addUser(\"John\", \"M\", \"120004500652\"));\n    }\n\n    @Test\n    void testAddUser8() {\n        UserManager userManager = new UserManager();\n        // Test case 8: Maximum valid ID number\n        assertEquals(\"Name:John\\nSex:M\\nID:002301220991\", userManager.addUser(\"John\", \"M\", \"002301220991\"));\n    }\n\n    @Test\n    void testAddUser9() {\n        UserManager userManager = new UserManager();\n        // Test case 9: ID number just below minimum\n        assertEquals(\"ID number illegal\", userManager.addUser(\"John\", \"M\", \"100000720002\"));\n    }\n\n    @Test\n    void testAddUser10() {\n        UserManager userManager = new UserManager();\n        // Test case 10: ID number just above maximum\n        assertEquals(\"ID number illegal\", userManager.addUser(\"John\", \"M\", \"123004601000\"));\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.util.HashSet;\n\nclass User {\n    private String name;\n    private char gender;\n    private String idNumber;\n\n    // Constructor\n    public User(String name, char gender, String idNumber) {\n        this.name = name;\n        this.gender = gender;\n        this.idNumber = idNumber;\n    }\n\n    // Getter and setter methods\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public char getGender() {\n        return gender;\n    }\n\n    public void setGender(char gender) {\n        this.gender = gender;\n    }\n\n    public String getIdNumber() {\n        return idNumber;\n    }\n\n    public void setIdNumber(String idNumber) {\n        this.idNumber = idNumber;\n    }\n\n    // toString method\n    @Override\n    public String toString() {\n        return String.format(\"Name:%s\\nSex:%c\\nID:%s\", name, gender, idNumber);\n    }\n}\n\nclass UserManager {\n    private HashSet<String> registeredIds = new HashSet<>();\n\n    public String addUser(String name, String gender, String idNumber) {\n        // Validate arguments\n        if (!name.matches(\"[a-zA-Z_]+\")) {\n            return \"Name illegal\";\n        }\n\n        if (!gender.matches(\"[MFO]\")) {\n            return \"Sex illegal\";\n        }\n\n        if (!idNumber.matches(\"[0-9]{12}\")) {\n            return \"ID number illegal\";\n        }\n\n        // Extract and validate parts of the ID number\n        int part1 = Integer.parseInt(idNumber.substring(0, 4));\n        int part2 = Integer.parseInt(idNumber.substring(4, 8));\n        int part3 = Integer.parseInt(idNumber.substring(8, 12));\n\n        if (part1 < 1 || part1 > 1237 || part2 < 20 || part2 > 460 || part3 / 10 < 0 || part3 / 10 > 100) {\n            return \"ID number illegal\";\n        }\n\n        // Check if the last digit of ID number matches the gender\n        int lastDigit = part3 % 10;\n        if ((gender.equals(\"M\") && lastDigit != 1) || (gender.equals(\"F\") && lastDigit != 0) || (gender.equals(\"O\") && lastDigit != 2)) {\n            return \"ID number illegal\";\n        }\n\n        // Check if ID number already registered\n        if (registeredIds.contains(idNumber)) {\n            return \"ID number exist\";\n        }\n\n        // All checks passed, add user\n        User newUser = new User(name, gender.charAt(0), idNumber);\n        registeredIds.add(idNumber);\n\n        // Return formatted user information\n        return newUser.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        UserManager userManager = new UserManager();\n\n        // Example usage\n        System.out.println(userManager.addUser(\"LaoWang\", \"M\", \"003005001010\")); // ID number illegal\n        System.out.println(userManager.addUser(\"LaoWang\", \"M\", \"002301220991\")); // Name:LaoWang\\nSex:M\\nID:002301220991\n        System.out.println(userManager.addUser(\"HaiWang\", \"M\", \"002301220991\")); // ID number exist\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 189, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nPlease set up a User class in Java for the user:\nThe private attributes should at least include the name (which can only be composed of 26 uppercase and lowercase letters and underscores), gender (character M/F/O, representing male/female/other), and ID card number (in accordance with the following legal format)\nThe ID card number is 12 digits in total, unique for each user\nThe range of the first 4 digits is [0001,1237]\nThe range of the middle 4 digits is [0020,0460]\nThe last four digits are the biometric codes provided by the biometric library, the range of the first three digits is [000,100], and the last digit represents the gender of the holder, 0 represents female, 1 represents male, 2 represents other.\nExamples of legal ID card numbers:\n0023 0122 0991\n1000 0072 0000\nExamples of illegal ID card numbers:\n0000 0122 0991\n0030 0500 1010\n1234 0123 0553\nProvide corresponding getter and setter methods for the user's three attributes\nImplement the method String toString() to print the user's formatted information, with the following requirements:\n1. The colon is an English character :\n2. Does not contain extra spaces\n3. All characters are half-width characters\nFor example, with jack, ID card number 0910 0072 0112 :\nName:jack\nSex:O\nID:091000720112 \nImplement the method to add a user, the command format is as follows:\nOption\t[Parameter 1]\t[Parameter 2]\t[Parameter 3]\tFunction Description\naddUser\tName\tSex\tCard Number\tAdd a new user object and store relevant information, for illegal input, the terminal outputs the corresponding error. For legal input, call the object's toString() method.\nThe specific requirements are as follows:\nWhen entering the addUser command, it is not guaranteed that the number of parameters strictly corresponds, which is also an illegal situation, and you need to output in the terminal:\nArguments illegal\nIf the parameters are legal, check the information in the following order\nThe name is composed of 26 letters and underscores, in other cases please output\nName illegal\nThe sex must be F / M / O, in other cases please output\nSex illegal\nThe card number needs to meet the specified format, if it is illegal (including the case where the tail number and gender do not match), please output\nID number illegal\nA card number can only be registered once, if the registered card number already exists, please output\nID number exist\nIf there are multiple illegal situations, only the first illegal information will be output in the above order.\nIf the input is legal, print the information of the just added user according to the toString() output format. For example:\naddUser LaoWang M\nArguments illegal\naddUser LaoWang GHS 123123\nSex illegal\naddUser LaoWang M 003005001010\nID number illegal\naddUser LaoWang M 002301220991\nName:LaoWang\nSex:M\nID:002301220991\naddUser HaiWang M 002301220991\nID number exist\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass CopyFileTest {\n\n\n    @Test\n    void testCopyAndMoveFile1() {\n        String sourceFilePath = \"test1/test.txt\";\n        String destinationDirectory = \"test1/target\";\n        CopyFile.copyAndMoveFile(sourceFilePath, destinationDirectory);\n        assertTrue(Files.exists(Paths.get(destinationDirectory, \"test.txt\")));\n    }\n}", "problem": "Please set up a User class in Java for the user:\nThe private attributes should at least include the name (which can only be composed of 26 uppercase and lowercase letters and underscores), gender (character M/F/O, representing male/female/other), and ID card number (in accordance with the following legal format)\nThe ID card number is 12 digits in total, unique for each user\nThe range of the first 4 digits is [0001,1237]\nThe range of the middle 4 digits is [0020,0460]\nThe last four digits are the biometric codes provided by the biometric library, the range of the first three digits is [000,100], and the last digit represents the gender of the holder, 0 represents female, 1 represents male, 2 represents other.\nExamples of legal ID card numbers:\n0023 0122 0991\n1000 0072 0000\nExamples of illegal ID card numbers:\n0000 0122 0991\n0030 0500 1010\n1234 0123 0553\nProvide corresponding getter and setter methods for the user's three attributes\nImplement the method String toString() to print the user's formatted information, with the following requirements:\n1. The colon is an English character :\n2. Does not contain extra spaces\n3. All characters are half-width characters\nFor example, with jack, ID card number 0910 0072 0112 :\nName:jack\nSex:O\nID:091000720112 \nImplement the method to add a user, the command format is as follows:\nOption\t[Parameter 1]\t[Parameter 2]\t[Parameter 3]\tFunction Description\naddUser\tName\tSex\tCard Number\tAdd a new user object and store relevant information, for illegal input, the terminal outputs the corresponding error. For legal input, call the object's toString() method.\nThe specific requirements are as follows:\nWhen entering the addUser command, it is not guaranteed that the number of parameters strictly corresponds, which is also an illegal situation, and you need to output in the terminal:\nArguments illegal\nIf the parameters are legal, check the information in the following order\nThe name is composed of 26 letters and underscores, in other cases please output\nName illegal\nThe sex must be F / M / O, in other cases please output\nSex illegal\nThe card number needs to meet the specified format, if it is illegal (including the case where the tail number and gender do not match), please output\nID number illegal\nA card number can only be registered once, if the registered card number already exists, please output\nID number exist\nIf there are multiple illegal situations, only the first illegal information will be output in the above order.\nIf the input is legal, print the information of the just added user according to the toString() output format. For example:\naddUser LaoWang M\nArguments illegal\naddUser LaoWang GHS 123123\nSex illegal\naddUser LaoWang M 003005001010\nID number illegal\naddUser LaoWang M 002301220991\nName:LaoWang\nSex:M\nID:002301220991\naddUser HaiWang M 002301220991\nID number exist", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport java.io.ByteArrayOutputStream;\nimport java.io.FileNotFoundException;\nimport java.io.PrintStream;\nimport java.nio.file.Files;\nimport java.nio.file.NoSuchFileException;\nimport java.nio.file.Paths;\n\nclass CopyFileTest {\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n    @Test\n    void testCopyAndMoveFile2() {\n        String sourceFilePath = \"test2/test.txt\";\n        String destinationDirectory = \"test2/target\";\n        CopyFile.copyAndMoveFile(sourceFilePath, destinationDirectory);\n        assertEquals(\"File not exist.\\n\", outContent.toString());\n    }\n\n    @Test\n    void testCopyAndMoveFile3() {\n        String sourceFilePath = \"test3/source/test.txt\";\n        String destinationDirectory = \"test3\";\n        CopyFile.copyAndMoveFile(sourceFilePath, destinationDirectory);\n        assertTrue(Files.exists(Paths.get(destinationDirectory, \"test.txt\")));\n    }\n\n    @Test\n    void testCopyAndMoveFile4() {\n        String sourceFilePath = \"test4/test.txt\";\n        String destinationDirectory = \"test4\";\n        CopyFile.copyAndMoveFile(sourceFilePath, destinationDirectory);\n        assertTrue(Files.exists(Paths.get(destinationDirectory, \"test.txt\")));\n    }\n\n    @Test\n    void testCopyAndMoveFile5() {\n        String sourceFilePath = \"test5/source/test.txt\";\n        String destinationDirectory = \"test5/target\";\n        CopyFile.copyAndMoveFile(sourceFilePath, destinationDirectory);\n        assertTrue(Files.exists(Paths.get(destinationDirectory, \"test.txt\")));\n    }\n\n    @Test\n    void testCopyAndMoveFile6() {\n        String sourceFilePath = \"test6/test.txt\";\n        String destinationDirectory = \"test6/target\";\n        CopyFile.copyAndMoveFile(sourceFilePath, destinationDirectory);\n        assertTrue(Files.exists(Paths.get(destinationDirectory, \"test.txt\")));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.io.IOException;\nimport java.nio.file.FileAlreadyExistsException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class CopyFile {\n    public static void copyAndMoveFile(String sourcePath, String destinationDirectory) {\n        // 获取源文件的文件名\n        Path sourceFilePath = Paths.get(sourcePath);\n        String fileName = sourceFilePath.getFileName().toString();\n\n        // 构建目标路径\n        Path destinationPath = Paths.get(destinationDirectory, fileName);\n\n        try {\n            // 检查源文件是否存在\n            if (Files.exists(sourceFilePath)) {\n                // 复制文件\n                Files.copy(sourceFilePath, destinationPath);\n            } else {\n                System.out.println(\"File not exist.\");\n            }\n        } catch (FileAlreadyExistsException e) {\n            System.out.println(e.getMessage());\n        } catch (IOException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        // 例子\n        String sourceFilePath = \"C:\\\\Users\\\\jieman\\\\Desktop\\\\json\\\\aaaa.py\";\n        String destinationDirectory = \"C:\\\\Users\\\\jieman\\\\Desktop\\\\MFGRN\";\n\n        copyAndMoveFile(sourceFilePath, destinationDirectory);\n    }\n}\n```", "classification": "Artificial Intelligence"}
{"_id": 190, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nManually write data, use Java language to write K-means clustering algorithm. Calculate and output the result of each data sample.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass LongestPathTest {\n\n    @Test\n    public void testLengthLongestPath1() {\n        LongestPath lp = new LongestPath();\n        String input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\";\n        int expected = 32;\n        assertEquals(expected, lp.lengthLongestPath(input));\n    }\n}", "problem": "Manually write data, use Java language to write K-means clustering algorithm. Calculate and output the result of each data sample.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\n\nclass LongestPathTest {\n    @Test\n    public void testLengthLongestPath2() {\n        LongestPath lp = new LongestPath();\n        String input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\";\n        int expected = 21;\n        assertEquals(expected, lp.lengthLongestPath(input));\n    }\n\n    @Test\n    public void testLengthLongestPath3() {\n        LongestPath lp = new LongestPath();\n        String input = \"dir\\n\\tsubdir1\\n\\t\\tsubsubdir1\\n\\t\\t\\tfile1.ext\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\";\n        int expected = 32;\n        assertEquals(expected, lp.lengthLongestPath(input));\n    }\n\n    @Test\n    public void testLengthLongestPath4() {\n        LongestPath lp = new LongestPath();\n        String input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\t\\t\\tfile2.ext\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile3.ext\";\n        int expected = 32;\n        assertEquals(expected, lp.lengthLongestPath(input));\n    }\n\n    @Test\n    public void testLengthLongestPath5() {\n        LongestPath lp = new LongestPath();\n        String input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\t\\t\\tfile2.ext\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile3.ext\\n\\t\\t\\t\\tfile4.ext\";\n        int expected = 32;\n        assertEquals(expected, lp.lengthLongestPath(input));\n    }\n\n    @Test\n    public void testLengthLongestPath6() {\n        LongestPath lp = new LongestPath();\n        String input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\t\\t\\tfile2.ext\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile3.ext\\n\\t\\t\\t\\tfile4.ext\\n\\t\\t\\t\\t\\tfile5.ext\";\n        int expected = 32;\n        assertEquals(expected, lp.lengthLongestPath(input));\n    }\n\n    @Test\n    public void testLengthLongestPath7() {\n        LongestPath lp = new LongestPath();\n        String input = \"dir\";\n        int expected = 0;\n        assertEquals(expected, lp.lengthLongestPath(input));\n    }\n\n    @Test\n    public void testLengthLongestPath8() {\n        LongestPath lp = new LongestPath();\n        String input = \"dir\\n\\tsubdir1\";\n        int expected = 0;\n        assertEquals(expected, lp.lengthLongestPath(input));\n    }\n\n    @Test\n    public void testLengthLongestPath9() {\n        LongestPath lp = new LongestPath();\n        String input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\";\n        int expected = 21;\n        assertEquals(expected, lp.lengthLongestPath(input));\n    }\n\n    @Test\n    public void testLengthLongestPath10() {\n        LongestPath lp = new LongestPath();\n        String input = \"dir\\n\\tsubdir1\\n\\t\\tsubsubdir1\\n\\t\\t\\tfile1.ext\";\n        int expected = 32;\n        assertEquals(expected, lp.lengthLongestPath(input));\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.util.ArrayDeque;\nimport java.util.Deque;\n\nclass LongestPath {\n    public int lengthLongestPath(String input) {\n        int n = input.length();\n        int pos = 0;\n        int ans = 0;\n        Deque<Integer> stack = new ArrayDeque<Integer>();\n        while (pos < n) {\n            /* 检测当前文件的深度 */\n            int depth = 1;\n            while (pos < n && input.charAt(pos) == '\\t') {\n                pos++;\n                depth++;\n            }\n            /* 统计当前文件名的长度 */\n            boolean isFile = false;\n            int len = 0;\n            while (pos < n && input.charAt(pos) != '\\n') {\n                if (input.charAt(pos) == '.') {\n                    isFile = true;\n                }\n                len++;\n                pos++;\n            }\n            /* 跳过当前的换行符 */\n            pos++;\n            while (stack.size() >= depth) {\n                stack.pop();\n            }\n            if (!stack.isEmpty()) {\n                len += stack.peek() + 1;\n            }\n            if (isFile) {\n                ans = Math.max(ans, len);\n            } else {\n                stack.push(len);\n            }\n        }\n        return ans;\n    }\n}\n```", "classification": "Software Engineering"}
{"_id": 191, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nPlease use Java to complete a ProgressBar class to display project progress. The specific requirements are as follows: 1. Accept a parameter totalTasks, which represents the total number of tasks; 2. Include a taskCompleted() method, used to mark tasks as completed; 3. An updateProgressBar() method, used to update the display of the progress bar.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass ValidPasswordTest {\n\n    @Test\n    void testIsValidPassword1() {\n        assertTrue(ValidPassword.isValidPassword(\"Example@123\"));\n    }\n}", "problem": "Please use Java to complete a ProgressBar class to display project progress. The specific requirements are as follows: 1. Accept a parameter totalTasks, which represents the total number of tasks; 2. Include a taskCompleted() method, used to mark tasks as completed; 3. An updateProgressBar() method, used to update the display of the progress bar.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass ValidPasswordTest {\n    @Test\n    void testIsValidPassword2() {\n        assertFalse(ValidPassword.isValidPassword(\"example@123\"));\n    }\n\n    @Test\n    void testIsValidPassword3() {\n        assertFalse(ValidPassword.isValidPassword(\"EXAMPLE@123\"));\n    }\n\n    @Test\n    void testIsValidPassword4() {\n        assertFalse(ValidPassword.isValidPassword(\"Example123\"));\n    }\n\n    @Test\n    void testIsValidPassword5() {\n        assertFalse(ValidPassword.isValidPassword(\"Example@\"));\n    }\n\n    @Test\n    void testIsValidPassword6() {\n        assertFalse(ValidPassword.isValidPassword(\"example123\"));\n    }\n\n    @Test\n    void testIsValidPassword7() {\n        assertTrue(ValidPassword.isValidPassword(\"Example@1234567890\"));\n    }\n\n    @Test\n    void testIsValidPassword8() {\n        assertTrue(ValidPassword.isValidPassword(\"Example@1234567890A\"));\n    }\n\n    @Test\n    void testIsValidPassword9() {\n        assertTrue(ValidPassword.isValidPassword(\"Example@1234567890Aa\"));\n    }\n\n    @Test\n    void testIsValidPassword10() {\n        assertTrue(ValidPassword.isValidPassword(\"Example@1234567890Aa!\"));\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class ValidPassword {\n    public static boolean isValidPassword(String password) {\n        String passwordRegex = \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\\\S+$).{8,}$\";\n        Pattern pattern = Pattern.compile(passwordRegex);\n        Matcher matcher = pattern.matcher(password);\n        return matcher.matches();\n    }\n\n    public static void main(String[] args) {\n        String password = \"Example@123\";\n        System.out.println(\"Is the password valid? \" + isValidPassword(password));\n    }\n}\n```", "classification": "Software Engineering"}
{"_id": 192, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nCreate a Java class named LinearRegressionLoss, write three static methods to calculate the three common loss functions in linear regression: mean squared error, mean absolute error, and Huber loss. In the main method, manually generate data, call these three methods to calculate the corresponding losses, and output the corresponding calculation results.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass LinearRegressionLossTest {\n\n    @Test\n    public void testCalculateMSE1() {\n        double[] actual = {3.0, 5.0, 7.0, 9.0, 11.0};\n        double[] predicted = {2.5, 5.5, 7.5, 8.5, 10.5};\n        assertEquals(0.25, LinearRegressionLoss.calculateMSE(actual, predicted));\n    }\n}", "problem": "Create a Java class named LinearRegressionLoss, write three static methods to calculate the three common loss functions in linear regression: mean squared error, mean absolute error, and Huber loss. In the main method, manually generate data, call these three methods to calculate the corresponding losses, and output the corresponding calculation results.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass LinearRegressionLossTest {\n    @Test\n    public void testCalculateMSE2() {\n        double[] actual = {1.0, 2.0, 3.0};\n        double[] predicted = {1.0, 2.0, 3.0};\n        assertEquals(0.0, LinearRegressionLoss.calculateMSE(actual, predicted));\n    }\n\n    @Test\n    public void testCalculateMSE3() {\n        double[] actual = {1.0, 2.0, 3.0};\n        double[] predicted = {3.0, 2.0, 1.0};\n        assertEquals(2.6666666666666665, LinearRegressionLoss.calculateMSE(actual, predicted));\n    }\n\n    @Test\n    public void testCalculateMAE1() {\n        double[] actual = {3.0, 5.0, 7.0, 9.0, 11.0};\n        double[] predicted = {2.5, 5.5, 7.5, 8.5, 10.5};\n        assertEquals(0.5, LinearRegressionLoss.calculateMAE(actual, predicted));\n    }\n\n    @Test\n    public void testCalculateMAE2() {\n        double[] actual = {1.0, 2.0, 3.0};\n        double[] predicted = {1.0, 2.0, 3.0};\n        assertEquals(0.0, LinearRegressionLoss.calculateMAE(actual, predicted));\n    }\n\n    @Test\n    public void testCalculateMAE3() {\n        double[] actual = {1.0, 2.0, 3.0};\n        double[] predicted = {3.0, 2.0, 1.0};\n        assertEquals(1.3333333333333333, LinearRegressionLoss.calculateMAE(actual, predicted));\n    }\n\n    @Test\n    public void testCalculateHuberLoss1() {\n        double[] actual = {3.0, 5.0, 7.0, 9.0, 11.0};\n        double[] predicted = {2.5, 5.5, 7.5, 8.5, 10.5};\n        double delta = 1.0;\n        assertEquals(0.125, LinearRegressionLoss.calculateHuberLoss(actual, predicted, delta));\n    }\n\n    @Test\n    public void testCalculateHuberLoss2() {\n        double[] actual = {1.0, 2.0, 3.0};\n        double[] predicted = {1.0, 2.0, 3.0};\n        double delta = 1.0;\n        assertEquals(0.0, LinearRegressionLoss.calculateHuberLoss(actual, predicted, delta));\n    }\n\n    @Test\n    public void testCalculateHuberLoss3() {\n        double[] actual = {1.0, 2.0, 3.0};\n        double[] predicted = {3.0, 2.0, 1.0};\n        double delta = 1.0;\n        assertEquals(1.0, LinearRegressionLoss.calculateHuberLoss(actual, predicted, delta));\n    }\n\n    @Test\n    public void testCalculateHuberLoss4() {\n        double[] actual = {5.5, 2.5, 4.0};\n        double[] predicted = {3.0, 1.5, 3.5};\n        double delta = 0.7;\n        assertEquals(0.695, LinearRegressionLoss.calculateHuberLoss(actual, predicted, delta));\n    }\n}", "setup_code": "", "reference_solution": "```java\n/*\n创建一个名为LinearRegressionLoss的java类，编写三个静态方法用于计算线性回归中常用的三种损失函数均方误差，平均绝对误差和Huber损失，并在main方法中手动生成数据，调用这三个方法计算相应的损失，并输出相应的计算结果。\n*/\npublic class LinearRegressionLoss {\n\n    // Mean Squared Error (MSE)\n    public static double calculateMSE(double[] actual, double[] predicted) {\n        if (actual.length != predicted.length) {\n            throw new IllegalArgumentException(\"Input arrays must have the same length\");\n        }\n\n        double sumSquaredError = 0.0;\n\n        for (int i = 0; i < actual.length; i++) {\n            double error = actual[i] - predicted[i];\n            sumSquaredError += Math.pow(error, 2);\n        }\n\n        return sumSquaredError / actual.length;\n    }\n\n    // Mean Absolute Error (MAE)\n    public static double calculateMAE(double[] actual, double[] predicted) {\n        if (actual.length != predicted.length) {\n            throw new IllegalArgumentException(\"Input arrays must have the same length\");\n        }\n\n        double sumAbsoluteError = 0.0;\n\n        for (int i = 0; i < actual.length; i++) {\n            double error = Math.abs(actual[i] - predicted[i]);\n            sumAbsoluteError += error;\n        }\n\n        return sumAbsoluteError / actual.length;\n    }\n\n    // Huber Loss\n    public static double calculateHuberLoss(double[] actual, double[] predicted, double delta) {\n        if (actual.length != predicted.length) {\n            throw new IllegalArgumentException(\"Input arrays must have the same length\");\n        }\n\n        double sumHuberLoss = 0.0;\n\n        for (int i = 0; i < actual.length; i++) {\n            double error = Math.abs(actual[i] - predicted[i]);\n            if (error <= delta) {\n                sumHuberLoss += 0.5 * Math.pow(error, 2);\n            } else {\n                sumHuberLoss += delta * (error - 0.5 * delta);\n            }\n        }\n\n        return sumHuberLoss / actual.length;\n    }\n\n    public static void main(String[] args) {\n        // Sample data\n        double[] actual = {3.0, 5.0, 7.0, 9.0, 11.0};\n        double[] predicted = {2.5, 5.5, 7.5, 8.5, 10.5};\n\n        // Calculate MSE\n        double mse = calculateMSE(actual, predicted);\n        System.out.println(\"Mean Squared Error (MSE): \" + mse);\n\n        // Calculate MAE\n        double mae = calculateMAE(actual, predicted);\n        System.out.println(\"Mean Absolute Error (MAE): \" + mae);\n\n        // Calculate Huber Loss with delta = 1.0\n        double delta = 1.0;\n        double huberLoss = calculateHuberLoss(actual, predicted, delta);\n        System.out.println(\"Huber Loss (delta = \" + delta + \"): \" + huberLoss);\n    }\n}\n\n\n\n\n\n\n```", "classification": "Artificial Intelligence"}
{"_id": 193, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nFor the examination of the time package in Java\nWrite a Java program to calculate the interval between two dates. Given two dates in string format (\"2023-03-15\" and \"2023-04-14\"), calculate the full day difference between them. The program should be able to handle different years and leap years.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass DaysBetweenDatesTest {\n\n    @Test\n    void testCalculateDaysBetweenDates() {\n        assertEquals(30, DaysBetweenDates.calculateDaysBetweenDates(\"2023-03-15\", \"2023-04-14\"));\n        assertEquals(365, DaysBetweenDates.calculateDaysBetweenDates(\"2023-01-01\", \"2024-01-01\"));\n        assertEquals(366, DaysBetweenDates.calculateDaysBetweenDates(\"2024-01-01\", \"2025-01-01\"));\n        assertEquals(0, DaysBetweenDates.calculateDaysBetweenDates(\"2023-03-15\", \"2023-03-15\"));\n        assertEquals(1, DaysBetweenDates.calculateDaysBetweenDates(\"2023-03-15\", \"2023-03-16\"));\n        assertEquals(-1, DaysBetweenDates.calculateDaysBetweenDates(\"2023-03-16\", \"2023-03-15\"));\n    }\n}", "problem": "For the examination of the time package in Java\nWrite a Java program to calculate the interval between two dates. Given two dates in string format (\"2023-03-15\" and \"2023-04-14\"), calculate the full day difference between them. The program should be able to handle different years and leap years.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.temporal.ChronoUnit;\n\nclass DaysBetweenDatesTest {\n    @Test\n    void testCalculateDaysBetweenDatesBoundary() {\n        assertEquals(0, DaysBetweenDates.calculateDaysBetweenDates(\"0001-01-01\", \"0001-01-01\"));\n        assertEquals(3652058, DaysBetweenDates.calculateDaysBetweenDates(\"0001-01-01\", \"9999-12-31\"));\n        assertEquals(-3652058, DaysBetweenDates.calculateDaysBetweenDates(\"9999-12-31\", \"0001-01-01\"));\n        assertEquals(1, DaysBetweenDates.calculateDaysBetweenDates(\"2023-02-28\", \"2023-03-01\"));\n        assertEquals(2, DaysBetweenDates.calculateDaysBetweenDates(\"2024-02-28\", \"2024-03-01\"));\n    }\n}", "setup_code": "", "reference_solution": "```java\n/*\n对于java中time包的考察\n编写一个Java程序来计算两个日期之间的间隔。给定两个字符串格式的日期（\"2023-03-15\"和\"2023-04-14\"），计算它们之间的完整天数差。程序应能处理不同年份和闰年。\n*/\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.temporal.ChronoUnit;\n\npublic class DaysBetweenDates {\n\n    public static long calculateDaysBetweenDates(String date1, String date2) {\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n        LocalDate startDate = LocalDate.parse(date1, formatter);\n        LocalDate endDate = LocalDate.parse(date2, formatter);\n\n        return ChronoUnit.DAYS.between(startDate, endDate);\n    }\n\n    public static void main(String[] args) {\n        String date1 = \"2023-03-15\";\n        String date2 = \"2023-04-14\";\n\n        long days = calculateDaysBetweenDates(date1, date2);\n        System.out.println(\"Days between dates: \" + days);\n    }\n}\n\n```", "classification": "Data Science"}
{"_id": 194, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nCreate a class named GameItem, which includes attributes: item name, type, quantity. They are of types String, String, int respectively.\nCreate a class named Inventory for managing game items. It should be able to add items, remove items, find items, and list items.\nThe function names are: addItem(GameItem item), removeItem(String itemName), findItem(String itemName), listItems()\nTest the GameItem and Inventory classes in the main function, for example, first create two gameitems and add them to the inventory, then listItems(), then go to find one of the items using the findItem function. Afterwards, remove a gameitem, then listItems() again.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass q10Test {\n\n    @Test\n    public void testGameItemAndInventory() {\n        Inventory inventory = new Inventory();\n        inventory.addItem(new GameItem(\"Sword\", \"Weapon\", 1));\n        inventory.addItem(new GameItem(\"Potion\", \"Health\", 5));\n\n        assertEquals(2, inventory.items.size());\n\n        GameItem foundItem = inventory.findItem(\"Potion\");\n        assertNotNull(foundItem);\n        assertEquals(\"Potion\", foundItem.getName());\n\n        inventory.removeItem(\"Sword\");\n        assertEquals(1, inventory.items.size());\n    }\n}", "problem": "Create a class named GameItem, which includes attributes: item name, type, quantity. They are of types String, String, int respectively.\nCreate a class named Inventory for managing game items. It should be able to add items, remove items, find items, and list items.\nThe function names are: addItem(GameItem item), removeItem(String itemName), findItem(String itemName), listItems()\nTest the GameItem and Inventory classes in the main function, for example, first create two gameitems and add them to the inventory, then listItems(), then go to find one of the items using the findItem function. Afterwards, remove a gameitem, then listItems() again.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass q10Test {\n    @Test\n    public void testEmptyInventory() {\n        Inventory inventory = new Inventory();\n\n        assertEquals(0, inventory.items.size());\n\n        GameItem foundItem = inventory.findItem(\"Sword\");\n        assertNull(foundItem);\n    }\n\n    @Test\n    public void testRemoveNonExistentItem() {\n        Inventory inventory = new Inventory();\n        inventory.addItem(new GameItem(\"Sword\", \"Weapon\", 1));\n\n        inventory.removeItem(\"Potion\");\n        assertEquals(1, inventory.items.size());\n    }\n\n    @Test\n    public void testFindNonExistentItem() {\n        Inventory inventory = new Inventory();\n        inventory.addItem(new GameItem(\"Sword\", \"Weapon\", 1));\n\n        GameItem foundItem = inventory.findItem(\"Potion\");\n        assertNull(foundItem);\n    }\n\n    @Test\n    public void testAddMultipleSameItems() {\n        Inventory inventory = new Inventory();\n        inventory.addItem(new GameItem(\"Sword\", \"Weapon\", 1));\n        inventory.addItem(new GameItem(\"Sword\", \"Weapon\", 1));\n\n        assertEquals(2, inventory.items.size());\n    }\n\n    @Test\n    public void testRemoveMultipleSameItems() {\n        Inventory inventory = new Inventory();\n        inventory.addItem(new GameItem(\"Sword\", \"Weapon\", 1));\n        inventory.addItem(new GameItem(\"Sword\", \"Weapon\", 1));\n\n        inventory.removeItem(\"Sword\");\n        assertEquals(0, inventory.items.size());\n    }\n\n    @Test\n    public void testAddItemWithZeroQuantity() {\n        Inventory inventory = new Inventory();\n        inventory.addItem(new GameItem(\"Sword\", \"Weapon\", 0));\n\n        assertEquals(1, inventory.items.size());\n    }\n\n    @Test\n    public void testAddItemWithNegativeQuantity() {\n        Inventory inventory = new Inventory();\n        inventory.addItem(new GameItem(\"Sword\", \"Weapon\", -1));\n\n        assertEquals(1, inventory.items.size());\n    }\n\n    @Test\n    public void testAddItemWithMaxIntQuantity() {\n        Inventory inventory = new Inventory();\n        inventory.addItem(new GameItem(\"Sword\", \"Weapon\", Integer.MAX_VALUE));\n\n        assertEquals(1, inventory.items.size());\n    }\n\n    @Test\n    public void testAddItemWithMinIntQuantity() {\n        Inventory inventory = new Inventory();\n        inventory.addItem(new GameItem(\"Sword\", \"Weapon\", Integer.MIN_VALUE));\n\n        assertEquals(1, inventory.items.size());\n    }\n}", "setup_code": "", "reference_solution": "```java\n/*\n创建一个名为 GameItem 的类，包含属性：道具名称、类型、数量。分别是String, String, int类型。\n创建一个名为 Inventory 的类，用于管理游戏道具。它应该能够添加道具、删除道具、查找道具，列出道具。\n函数名分别为：addItem(GameItem item)，removeItem(String itemName)，findItem(String itemName)，listItems()\n在main函数中测试GameItem和Inventory类，比如先新建两个gameitem并添加到inventory里面，然后listItems()，然后去寻找其中一个item，使用findItem函数。随后移除一个gameitem，然后再次listItems()。\n*/\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass GameItem {\n    private String name;\n    private String type;\n    private int quantity;\n\n    public GameItem(String name, String type, int quantity) {\n        this.name = name;\n        this.type = type;\n        this.quantity = quantity;\n    }\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n\n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n\n    @Override\n    public String toString() {\n        return \"GameItem{\" +\n                \"name='\" + name + '\\'' +\n                \", type='\" + type + '\\'' +\n                \", quantity=\" + quantity +\n                '}';\n    }\n}\n\nclass Inventory {\n    List<GameItem> items;\n\n    public Inventory() {\n        this.items = new ArrayList<>();\n    }\n\n    public void addItem(GameItem item) {\n        this.items.add(item);\n    }\n\n    public void removeItem(String itemName) {\n        this.items.removeIf(item -> item.getName().equals(itemName));\n    }\n\n    public GameItem findItem(String itemName) {\n        return this.items.stream()\n                .filter(item -> item.getName().equals(itemName))\n                .findFirst()\n                .orElse(null);\n    }\n\n    public void listItems() {\n        for (GameItem item : items) {\n            System.out.println(item);\n        }\n    }\n}\n\npublic class q10 {\n    public static void main(String[] args) {\n        Inventory inventory = new Inventory();\n        inventory.addItem(new GameItem(\"Sword\", \"Weapon\", 1));\n        inventory.addItem(new GameItem(\"Potion\", \"Health\", 5));\n\n        System.out.println(\"Inventory after adding items:\");\n        inventory.listItems();\n\n        GameItem foundItem = inventory.findItem(\"Potion\");\n        if (foundItem != null) {\n            System.out.println(\"Found item: \" + foundItem);\n        }\n\n        inventory.removeItem(\"Sword\");\n        System.out.println(\"Inventory after removing the sword:\");\n        inventory.listItems();\n    }\n}\n\n\n```", "classification": "Software Engineering"}
{"_id": 195, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nThe store consists of N sales areas, and each sales area consists of M dry goods shelves, and P types of goods need to be placed on the shelves. Please use inheritance to write the entity classes of the store, sales area, shelves, and goods respectively, and use generics to randomly generate goods. The goods include three attributes: id, name, and price. Finally, sort by sales area number first, and sort by shelf number if the area numbers are the same, and print and display the goods.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MaxLCMGCDTest {\n\n\n    @Test\n    public void testWithNEqualTo1() {\n        assertEquals(0, MaxLCMGCD.maxLCMMinusGCD(1));\n    }\n}", "problem": "The store consists of N sales areas, and each sales area consists of M dry goods shelves, and P types of goods need to be placed on the shelves. Please use inheritance to write the entity classes of the store, sales area, shelves, and goods respectively, and use generics to randomly generate goods. The goods include three attributes: id, name, and price. Finally, sort by sales area number first, and sort by shelf number if the area numbers are the same, and print and display the goods.", "testcases": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MaxLCMGCDTest {\n    @Test\n    public void testWithNEqualTo2() {\n        assertEquals(1, MaxLCMGCD.maxLCMMinusGCD(2));\n    }\n\n    @Test\n    public void testWithNEqualTo3() {\n        assertEquals(5, MaxLCMGCD.maxLCMMinusGCD(3));\n    }\n\n    @Test\n    public void testWithSmallN() {\n        assertEquals(11, MaxLCMGCD.maxLCMMinusGCD(4));\n    }\n\n    @Test\n    public void testWithMediumN() {\n        assertEquals(29, MaxLCMGCD.maxLCMMinusGCD(6));\n    }\n\n    @Test\n    public void testWithLargeN() {\n        long expected = MaxLCMGCD.lcm(1000, 999) - MaxLCMGCD.gcd(1000, 999);\n        assertEquals(expected, MaxLCMGCD.maxLCMMinusGCD(1000));\n    }\n\n    @Test\n    public void testWithVeryLargeN() {\n        long expected = MaxLCMGCD.lcm(10000, 9999) - MaxLCMGCD.gcd(10000, 9999);\n        assertEquals(expected, MaxLCMGCD.maxLCMMinusGCD(10000));\n    }\n\n    @Test\n    public void testNIsPrime() {\n        long expected = MaxLCMGCD.lcm(7, 6) - MaxLCMGCD.gcd(7, 6);\n        assertEquals(expected, MaxLCMGCD.maxLCMMinusGCD(7));\n    }\n\n    @Test\n    public void testNIsEven() {\n        long expected = MaxLCMGCD.lcm(10, 9) - MaxLCMGCD.gcd(10, 9);\n        assertEquals(expected, MaxLCMGCD.maxLCMMinusGCD(10));\n    }\n\n    @Test\n    public void testNIsOdd() {\n        long expected = MaxLCMGCD.lcm(9, 8) - MaxLCMGCD.gcd(9, 8);\n        assertEquals(expected, MaxLCMGCD.maxLCMMinusGCD(9));\n    }\n}\n", "setup_code": "", "reference_solution": "```java\n\npublic class MaxLCMGCD {\n\n    // 计算最大公约数（GCD）\n    public static int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n    // 计算最小公倍数（LCM）\n    public static long lcm(int a, int b) {\n        return (long) a / gcd(a, b) * b;\n    }\n\n    // 找出最大的 lcm(a, b) - gcd(a, b)\n    public static long maxLCMMinusGCD(int n) {\n        if (n == 1) return 0;\n        int a = n;\n        int b = n - 1;\n        return lcm(a, b) - gcd(a, b);\n    }\n\n    public static void main(String[] args) {\n        int n = 10; // 示例输入\n        System.out.println(\"Maximum of lcm(a, b) - gcd(a, b) is: \" + maxLCMMinusGCD(n));\n    }\n}\n\n```", "classification": "Software Engineering"}
{"_id": 196, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nSimulate the sender and receiver of a message. After receiving the transmission message from the sender, perform Huffman coding compression to form the encoded message and send it out. Then, decode it at the receiver end, restore the content, and print and display the message content.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass HuffmanTest {\n\n    @Test\n    void testEncodeAndDecode1() {\n        Huffman huffman = new Huffman();\n        huffman.send(\"hello world\");\n        assertEquals(\"hello world\", huffman.recv());\n    }\n}", "problem": "Simulate the sender and receiver of a message. After receiving the transmission message from the sender, perform Huffman coding compression to form the encoded message and send it out. Then, decode it at the receiver end, restore the content, and print and display the message content.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.*;\n\nclass HuffmanTest {\n    @Test\n    void testEncodeAndDecode2() {\n        Huffman huffman = new Huffman();\n        huffman.send(\"abcdefghijklmnopqrstuvwxyz\");\n        assertEquals(\"abcdefghijklmnopqrstuvwxyz\", huffman.recv());\n    }\n\n    @Test\n    void testEncodeAndDecode3() {\n        Huffman huffman = new Huffman();\n        huffman.send(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        assertEquals(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", huffman.recv());\n    }\n\n    @Test\n    void testEncodeAndDecode4() {\n        Huffman huffman = new Huffman();\n        huffman.send(\"1234567890\");\n        assertEquals(\"1234567890\", huffman.recv());\n    }\n\n    @Test\n    void testEncodeAndDecode5() {\n        Huffman huffman = new Huffman();\n        huffman.send(\"Huffman coding is a data compression algorithm.\");\n        assertEquals(\"Huffman coding is a data compression algorithm.\", huffman.recv());\n    }\n\n    @Test\n    void testEncodeAndDecode6() {\n        Huffman huffman = new Huffman();\n        huffman.send(\" \");\n        assertEquals(\" \", huffman.recv());\n    }\n\n    @Test\n    void testEncodeAndDecode7() {\n        Huffman huffman = new Huffman();\n        huffman.send(\"\");\n        assertEquals(\"\", huffman.recv());\n    }\n\n    @Test\n    void testEncodeAndDecode8() {\n        Huffman huffman = new Huffman();\n        huffman.send(\"a\");\n        assertEquals(\"a\", huffman.recv());\n    }\n\n    @Test\n    void testEncodeAndDecode9() {\n        Huffman huffman = new Huffman();\n        huffman.send(\"aa\");\n        assertEquals(\"aa\", huffman.recv());\n    }\n\n    @Test\n    void testEncodeAndDecode10() {\n        Huffman huffman = new Huffman();\n        huffman.send(\"aaa\");\n        assertEquals(\"aaa\", huffman.recv());\n    }\n}", "setup_code": "", "reference_solution": "```java\n/*\n模拟报文的发送端和接收端，在接收到发送端的传输报文后，进行哈夫曼编码压缩，形成编码后报文并发送出去，然后再接收端进行解码，还原内容并打印显示出报文内容\n*/\nimport java.util.*;\n\npublic class Huffman {\n    //内部类 二叉树节点\n    private static class TreeNode {\n        public TreeNode() { }\n        public TreeNode(Character ch, int val, int freq, TreeNode left, TreeNode right) {\n            this.ch = ch;\n            this.val = val;\n            this.freq = freq;\n            this.left = left;\n            this.right = right;\n        }\n        Character ch;\n        int val;\n        int freq;\n        TreeNode left;\n        TreeNode right;\n    }\n    static String encodeStr = \"\";\n    static Map<Character,String> encodeMap = null;\n\n    public static void main(String[] args) {\n        Scanner scan=new Scanner(System.in);\n        String s = scan.nextLine();\n        System.out.println(\"要发送的消息为：\"+s);\n\n        //开始发送内容\n        send(s);\n\n        System.out.println(\"编码表：\");\n        for(Map.Entry<Character,String> e:encodeMap.entrySet()){\n            System.out.println(e.getKey()+\":\"+e.getValue());\n        }\n        System.out.println(\"编码后：\"+encodeStr);\n\n        //接收方解码\n        String decodeStr = recv();\n        System.out.println(\"接收方解码后:\"+decodeStr);\n    }\n    public static  void send (String s){\n        Object[] encodeRes = encode(s);\n        encodeStr = (String)encodeRes[0];\n        encodeMap = (Map<Character, String>)encodeRes[1];\n    }\n    public static String recv(){\n        return decode(encodeStr,encodeMap);\n    }\n\n    //编码方法，返回Object[]，大小为2,Objec[0]为编码后的字符串，Object[1]为编码对应的码表\n    public static Object[] encode(String s){\n        Object[]res= new Object[2];\n        Map<Character,String> encodeMap = new HashMap<Character, String>();\n        TreeNode tree = constructTree(s);\n        findPath(tree, encodeMap, new StringBuilder());\n        findPath(tree, encodeMap, new StringBuilder());\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<s.length();i++){\n            String tmp = encodeMap.get(s.charAt(i));\n            sb.append(tmp);\n        }\n        res[0]=sb.toString();\n        res[1] = encodeMap;\n        return res;\n\n    }\n\n    /*\n     * 根据字符串建立二叉树\n     * @param s：要编码的源字符串\n     */\n    private static TreeNode constructTree(String s) {\n        if (s == null || s.equals(\"\")) {\n            return null;\n        }\n        //计算每个字母的词频，放到Map中\n        Map<Character, Integer> dataMap = new HashMap<Character, Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            Character c = s.charAt(i);\n            if (dataMap.containsKey(c)) {\n                int count = dataMap.get(c);\n                dataMap.put(c, count + 1);\n            } else {\n                dataMap.put(c, 1);\n            }\n        }\n        //遍历dataMap,初始化二叉树节点，并将所有初始化后的节点放到nodeList中，并进行排序\n        LinkedList<TreeNode> nodeList = new LinkedList<TreeNode>();\n        for (Map.Entry<Character, Integer> entry : dataMap.entrySet()) {\n            Character ch = entry.getKey();\n            int freq = entry.getValue();\n            int val = 0;\n            TreeNode tmp = new TreeNode(ch,val,freq,null,null);\n            nodeList.add(tmp);\n        }\n        //对存放节点的链表进行排序，方便后续进行组合\n        Collections.sort(nodeList, new Comparator<TreeNode>() {\n            public int compare(TreeNode t1, TreeNode t2) {\n                return t1.freq-t2.freq;\n            }\n        });\n\n        //size==1,代表字符串只包含一种类型的字母\n        if(nodeList.size()==1){\n            TreeNode t = nodeList.get(0);\n            return new TreeNode(null,0,nodeList.get(0).freq,t,null);\n        }\n\n        //利用排序好的节点建立二叉树，root为初始化根节点\n        TreeNode root = null;\n        while(nodeList.size()>0){\n            //因为nodeList在前面已经排好序，所以直接取出前两个节点，他们的和肯定为最小\n            TreeNode t1 = nodeList.removeFirst();\n            TreeNode t2 = nodeList.removeFirst();\n            //左子树的val赋值为0，右子树的val赋值为1\n            t1.val = 0;\n            t2.val = 1;\n            //将取出的两个节点进行合并\n            if(nodeList.size()==0){\n                //此时代表所有节点合并完毕，返回结果\n                root = new TreeNode(null,0,t1.freq+t2.freq,t1,t2);\n            }else {\n                //此时代表还有可以合并的节点\n                TreeNode tmp = new TreeNode(null,0,t1.freq+t2.freq,t1,t2);\n\n                //t1、t2合并后，需要将得到的新节点加入到原链表中，继续与其他节点合并，\n                //此时需要保证原链表的有序性，需要进行排序\n                if(tmp.freq>nodeList.getLast().freq){\n                    nodeList.addLast(tmp);\n                }else {\n                    for(int i=0;i<nodeList.size();i++){\n                        int tmpFreq = tmp.freq;\n                        if(tmpFreq<= nodeList.get(i).freq){\n                            nodeList.add(i,tmp);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        //返回建立好的二叉树根节点\n        return root;\n    }\n\n    //对已经建立好的二叉树进行遍历，得到每个字符的编码\n    private static void findPath(TreeNode root, Map<Character,String> res, StringBuilder path) {\n        if (root == null){\n            return;\n        }\n        if (root.left == null && root.right == null) {\n            path.append(root.val);\n            res.put(root.ch,path.substring(1));\n            path.deleteCharAt(path.length() - 1);\n            return;\n        }\n        path.append(root.val);\n        if (root.left != null) findPath(root.left, res, path);\n        if (root.right != null) findPath(root.right, res, path);\n        path.deleteCharAt(path.length() - 1);\n    }\n\n    //对字符串进行解码，解码时需要编码码表\n    public static String decode(String encodeStr,Map<Character,String> encodeMap){\n        StringBuilder decodeStr = new StringBuilder();\n        while(encodeStr.length()>0){\n            for(Map.Entry<Character,String> e: encodeMap.entrySet()){\n                String charEncodeStr = e.getValue();\n                if(encodeStr.startsWith(charEncodeStr)){\n                    decodeStr.append(e.getKey());\n                    encodeStr = encodeStr.substring(charEncodeStr.length());\n                    break;\n                }\n            }\n        }\n        return decodeStr.toString();\n    }\n\n}\n\n\n```", "classification": "Software Engineering"}
{"_id": 197, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a Java function that uses regular expressions to validate whether a string is a valid email address. The general format of an email address is username@domain.com.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass ValidEmailTest {\n\n    @Test\n    void testIsValidEmail1() {\n        assertTrue(ValidEmail.isValidEmail(\"example@example.com\"));\n    }\n}", "problem": "Write a Java function that uses regular expressions to validate whether a string is a valid email address. The general format of an email address is username@domain.com.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass ValidEmailTest {\n    @Test\n    void testIsValidEmail2() {\n        assertFalse(ValidEmail.isValidEmail(\"example@.com\"));\n    }\n\n    @Test\n    void testIsValidEmail3() {\n        assertFalse(ValidEmail.isValidEmail(\"example@com\"));\n    }\n\n    @Test\n    void testIsValidEmail4() {\n        assertTrue(ValidEmail.isValidEmail(\"example.example@example.com\"));\n    }\n\n    @Test\n    void testIsValidEmail5() {\n        assertFalse(ValidEmail.isValidEmail(\"example.example@.com\"));\n    }\n\n    @Test\n    void testIsValidEmail6() {\n        assertFalse(ValidEmail.isValidEmail(\"example.example@com\"));\n    }\n\n    @Test\n    void testIsValidEmail7() {\n        assertTrue(ValidEmail.isValidEmail(\"example_example@example.com\"));\n    }\n\n    @Test\n    void testIsValidEmail8() {\n        assertFalse(ValidEmail.isValidEmail(\"example_example@.com\"));\n    }\n\n    @Test\n    void testIsValidEmail9() {\n        assertFalse(ValidEmail.isValidEmail(\"example_example@com\"));\n    }\n\n    @Test\n    void testIsValidEmail10() {\n        assertTrue(ValidEmail.isValidEmail(\"example-example@example.com\"));\n    }\n}", "setup_code": "", "reference_solution": "```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class ValidEmail {\n    public static boolean isValidEmail(String email) {\n        String emailRegex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\n        Pattern pattern = Pattern.compile(emailRegex);\n        Matcher matcher = pattern.matcher(email);\n        return matcher.matches();\n    }\n\n    public static void main(String[] args) {\n        String email = \"example@example.com\";\n        System.out.println(\"Is the email valid? \" + isValidEmail(email));\n    }\n}\n\n\n```", "classification": "Software Engineering"}
{"_id": 198, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nProblem with anomaly detection: Examining the rewriting of Exception.\nCreate a simple BankAccount class that includes a method for handling withdrawal operations. This method should be able to detect and throw exceptions, such as when the account balance is insufficient.\n\nCreate a class named BankAccount, which includes the attribute: account balance.\nIn the BankAccount class, implement a withdraw method that accepts a withdrawal amount parameter.\nIf the withdrawal amount is greater than the account balance, the method should throw a custom exception called InsufficientFundsException.\nIn the main function, create a BankAccount object, deposit 500 into it first, then withdraw 600, and see if the implemented InsufficientFundsException is called and its error message is printed.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass q13Test {\n\n        @Test\n        void testWithdraw1() {\n            BankAccount account = new BankAccount(500.0);\n            assertThrows(InsufficientFundsException.class, () -> account.withdraw(600.0));\n        }\n}", "problem": "Problem with anomaly detection: Examining the rewriting of Exception.\nCreate a simple BankAccount class that includes a method for handling withdrawal operations. This method should be able to detect and throw exceptions, such as when the account balance is insufficient.\n\nCreate a class named BankAccount, which includes the attribute: account balance.\nIn the BankAccount class, implement a withdraw method that accepts a withdrawal amount parameter.\nIf the withdrawal amount is greater than the account balance, the method should throw a custom exception called InsufficientFundsException.\nIn the main function, create a BankAccount object, deposit 500 into it first, then withdraw 600, and see if the implemented InsufficientFundsException is called and its error message is printed.", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass q13Test {\n    @Test\n        void testWithdraw2() {\n            BankAccount account = new BankAccount(500.0);\n            assertDoesNotThrow(() -> account.withdraw(400.0));\n        }\n\n        @Test\n        void testWithdraw3() {\n            BankAccount account = new BankAccount(1000.0);\n            assertThrows(InsufficientFundsException.class, () -> account.withdraw(1500.0));\n        }\n\n        @Test\n        void testWithdraw4() {\n            BankAccount account = new BankAccount(1000.0);\n            assertDoesNotThrow(() -> account.withdraw(1000.0));\n        }\n\n        @Test\n        void testWithdraw5() {\n            BankAccount account = new BankAccount(0.0);\n            assertThrows(InsufficientFundsException.class, () -> account.withdraw(1.0));\n        }\n\n        @Test\n        void testWithdraw6() {\n            BankAccount account = new BankAccount(0.0);\n            assertThrows(InsufficientFundsException.class, () -> account.withdraw(0.1));\n        }\n\n        // boundary test cases\n        @Test\n        void testWithdraw7() {\n            BankAccount account = new BankAccount(Double.MAX_VALUE);\n            assertDoesNotThrow(() -> account.withdraw(Double.MAX_VALUE));\n        }\n        \n\n        @Test\n        void testWithdraw9() {\n            BankAccount account = new BankAccount(Double.MIN_VALUE);\n            assertDoesNotThrow(() -> account.withdraw(Double.MIN_VALUE));\n        }\n\n        @Test\n        void testWithdraw10() {\n            BankAccount account = new BankAccount(Double.MIN_VALUE);\n            assertThrows(InsufficientFundsException.class, () -> account.withdraw(Double.MIN_VALUE + 1));\n        }\n    }", "setup_code": "", "reference_solution": "```java\n/*\n异常检测的问题：考察对Exception的重写。\n创建一个简单的银行账户类 BankAccount，其中包含一个处理取款操作的方法。这个方法应该能够检测和抛出异常，比如当账户余额不足时。\n\n创建一个名为BankAccount的类，包含属性：账户余额。\n在BankAccount类中，实现一个withdraw方法，该方法接受一个取款金额参数。\n如果取款金额大于账户余额，方法应抛出一个自定义的异常 InsufficientFundsException。\n在 main 函数中，创建一个 BankAccount 对象，先往里面存500，然后取600，看看是否会调用到实现好的InsufficientFundsException并打印其报错信息。\n*/\nclass InsufficientFundsException extends Exception {\n    public InsufficientFundsException(String message) {\n        super(message);\n    }\n}\n\nclass BankAccount {\n    private double balance;\n\n    public BankAccount(double balance) {\n        this.balance = balance;\n    }\n\n    public void withdraw(double amount) throws InsufficientFundsException {\n        if (amount > balance) {\n            throw new InsufficientFundsException(\"Insufficient funds for withdrawal\");\n        }\n        balance -= amount;\n        System.out.println(\"Withdrawal successful. Remaining balance: \" + balance);\n    }\n}\n\npublic class q13 {\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount(500.0);\n\n        try {\n            account.withdraw(600.0);\n        } catch (InsufficientFundsException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n```", "classification": "Software Engineering"}
{"_id": 199, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nPlease use StringBuilder and StringBuffer to create a simple Markdown parser that can convert specific Markdown syntax into HTML. Your task is to handle the following Markdown features:\n\nLines starting with # are converted to <h1> tags.\nLines starting with ## are converted to <h2> tags.\nLines starting with * (followed by a space) are converted to <li> tags (list items).\nText lines (not meeting the above conditions) are converted to <p> tags.\nNote that the Markdown syntax stipulates that a space must immediately follow each marker (such as #, ##, *).\n\nInput:\n# Header 1\nThis is a paragraph.\n## Header 2\n* List item 1\n* List item 2\n\nOutput:\n<h1>Header 1</h1>\n<p>This is a paragraph.</p>\n<h2>Header 2</h2>\n<ul>\n<li>List item 1</li>\n<li>List item 2</li>\n</ul>\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MarkdownToHTMLTest {\n\n    @Test\n    void testParseMarkdown1() {\n        String markdown = \"# Header 1\\nThis is a paragraph.\\n## Header 2\\n* List item 1\\n* List item 2\";\n        String expected = \"<h1>Header 1</h1>\\n<p>This is a paragraph.</p>\\n<h2>Header 2</h2>\\n<ul>\\n<li>List item 1</li>\\n<li>List item 2</li>\\n</ul>\\n\";\n        assertEquals(expected, MarkdownToHTML.parseMarkdown(markdown));\n    }\n}", "problem": "Please use StringBuilder and StringBuffer to create a simple Markdown parser that can convert specific Markdown syntax into HTML. Your task is to handle the following Markdown features:\n\nLines starting with # are converted to <h1> tags.\nLines starting with ## are converted to <h2> tags.\nLines starting with * (followed by a space) are converted to <li> tags (list items).\nText lines (not meeting the above conditions) are converted to <p> tags.\nNote that the Markdown syntax stipulates that a space must immediately follow each marker (such as #, ##, *).\n\nInput:\n# Header 1\nThis is a paragraph.\n## Header 2\n* List item 1\n* List item 2\n\nOutput:\n<h1>Header 1</h1>\n<p>This is a paragraph.</p>\n<h2>Header 2</h2>\n<ul>\n<li>List item 1</li>\n<li>List item 2</li>\n</ul>", "testcases": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.StringTokenizer;\n\nclass MarkdownToHTMLTest {\n    @Test\n    void testParseMarkdown2() {\n        String markdown = \"This is a paragraph.\";\n        String expected = \"<p>This is a paragraph.</p>\\n\";\n        assertEquals(expected, MarkdownToHTML.parseMarkdown(markdown));\n    }\n\n    @Test\n    void testParseMarkdown3() {\n        String markdown = \"# Header 1\";\n        String expected = \"<h1>Header 1</h1>\\n\";\n        assertEquals(expected, MarkdownToHTML.parseMarkdown(markdown));\n    }\n\n    @Test\n    void testParseMarkdown4() {\n        String markdown = \"## Header 2\";\n        String expected = \"<h2>Header 2</h2>\\n\";\n        assertEquals(expected, MarkdownToHTML.parseMarkdown(markdown));\n    }\n\n    @Test\n    void testParseMarkdown5() {\n        String markdown = \"* List item 1\";\n        String expected = \"<ul>\\n<li>List item 1</li>\\n</ul>\\n\";\n        assertEquals(expected, MarkdownToHTML.parseMarkdown(markdown));\n    }\n\n    @Test\n    void testParseMarkdown6() {\n        String markdown = \"* List item 1\\n* List item 2\";\n        String expected = \"<ul>\\n<li>List item 1</li>\\n<li>List item 2</li>\\n</ul>\\n\";\n        assertEquals(expected, MarkdownToHTML.parseMarkdown(markdown));\n    }\n\n    @Test\n    void testParseMarkdown7() {\n        String markdown = \"\";\n        String expected = \"\";\n        assertEquals(expected, MarkdownToHTML.parseMarkdown(markdown));\n    }\n\n    @Test\n    void testParseMarkdown8() {\n        String markdown = \"# Header 1\\n## Header 2\\n* List item 1\\n* List item 2\\nThis is a paragraph.\";\n        String expected = \"<h1>Header 1</h1>\\n<h2>Header 2</h2>\\n<ul>\\n<li>List item 1</li>\\n<li>List item 2</li>\\n</ul>\\n<p>This is a paragraph.</p>\\n\";\n        assertEquals(expected, MarkdownToHTML.parseMarkdown(markdown));\n    }\n\n    @Test\n    void testParseMarkdown9() {\n        String markdown = \"# Header 1\\nThis is a paragraph.\\n## Header 2\\n* List item 1\\n* List item 2\\n# Header 3\";\n        String expected = \"<h1>Header 1</h1>\\n<p>This is a paragraph.</p>\\n<h2>Header 2</h2>\\n<ul>\\n<li>List item 1</li>\\n<li>List item 2</li>\\n</ul>\\n<h1>Header 3</h1>\\n\";\n        assertEquals(expected, MarkdownToHTML.parseMarkdown(markdown));\n    }\n\n    @Test\n    void testParseMarkdown10() {\n        String markdown = \"# Header 1\\nThis is a paragraph.\\n## Header 2\\n* List item 1\\n* List item 2\\nThis is another paragraph.\";\n        String expected = \"<h1>Header 1</h1>\\n<p>This is a paragraph.</p>\\n<h2>Header 2</h2>\\n<ul>\\n<li>List item 1</li>\\n<li>List item 2</li>\\n</ul>\\n<p>This is another paragraph.</p>\\n\";\n        assertEquals(expected, MarkdownToHTML.parseMarkdown(markdown));\n    }\n}", "setup_code": "", "reference_solution": "```java\n/*\n请使用StringBuilder和StringBuffer，创建一个简单的Markdown解析器，它能够将特定的Markdown语法转换为HTML。你的任务是处理以下Markdown特性：\n\n# 开头的行转换为 <h1> 标签。\n## 开头的行转换为 <h2> 标签。\n* 开头的行（后跟空格）转换为 <li> 标签（列表项）。\n文本行（不符合上述情况）转换为 <p> 标签。\n注意，Markdown语法规定，每个标记（如#，##，*）后必须紧跟一个空格。\n\n输入：\n# Header 1\nThis is a paragraph.\n## Header 2\n* List item 1\n* List item 2\n\n输出：\n<h1>Header 1</h1>\n<p>This is a paragraph.</p>\n<h2>Header 2</h2>\n<ul>\n<li>List item 1</li>\n<li>List item 2</li>\n</ul>\n*/\nimport java.util.StringTokenizer;\n\npublic class MarkdownToHTML {\n    public static String parseMarkdown(String markdown) {\n        StringBuilder html = new StringBuilder();\n        StringTokenizer tokenizer = new StringTokenizer(markdown, \"\\n\");\n        boolean processingList = false;\n\n        while (tokenizer.hasMoreTokens()) {\n            String line = tokenizer.nextToken();\n\n            if (line.startsWith(\"# \")) {\n                if (processingList) {\n                    html.append(\"</ul>\\n\");\n                    processingList = false;\n                }\n                html.append(\"<h1>\").append(line.substring(2)).append(\"</h1>\\n\");\n            }\n            else if (line.startsWith(\"## \")) {\n                if (processingList) {\n                    html.append(\"</ul>\\n\");\n                    processingList = false;\n                }\n                html.append(\"<h2>\").append(line.substring(3)).append(\"</h2>\\n\");\n            }\n            else if (line.startsWith(\"* \")) {\n                if (!processingList) {\n                    html.append(\"<ul>\\n\");\n                    processingList = true;\n                }\n                html.append(\"<li>\").append(line.substring(2)).append(\"</li>\\n\");\n            }\n            else {\n                if (processingList) {\n                    html.append(\"</ul>\\n\");\n                    processingList = false;\n                }\n                html.append(\"<p>\").append(line).append(\"</p>\\n\");\n            }\n        }\n\n        // Close the ul tag at the end of the document if necessary\n        if (processingList) {\n            html.append(\"</ul>\\n\");\n            processingList = false;\n        }\n\n        return html.toString();\n    }\n\n    public static void main(String[] args) {\n        String markdown = \"# Header 1\\nThis is a paragraph.\\n## Header 2\\n* List item 1\\n* List item 2\";\n        String html = parseMarkdown(markdown);\n        System.out.println(html);\n    }\n}\n```", "classification": "Front-End"}
{"_id": 200, "prompt": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nImplement your own customized MyString class, which, in addition to supporting all operations of the string class, \n Supports the trim() function, which can remove all spaces at both ends of the string \n Supports the split(string separator, int N=-1) function, which can split the original string into multiple strings according to the substring separator in the original string, splitting up to N times, with N defaulting to -1, i.e., no limit to the number of splits. For example, s=\"hello, ann, how are you doing?\", s.split(\",\") will split s into 3 substrings \"hello\", \"ann\", \"how are you doing\", and s.split(\",\", 1) will split s into 2 substrings \"hello\", \"ann, how are you doing\".\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\npublic class MyStringTest {\n    @Test\n    public void testTrim() {\n        MyString s1 = new MyString(\"  hello  \");\n        assertEquals(\"hello\", s1.trim(), \"Trim should remove leading and trailing spaces.\");\n        MyString s2 = new MyString(\"one,two,three\");\n        assertArrayEquals(new String[]{\"one\", \"two,three\"}, s2.split(\",\", 1), \"Split should work with limit of 1.\");\n    }\n}", "problem": "Implement your own customized MyString class, which, in addition to supporting all operations of the string class, \n Supports the trim() function, which can remove all spaces at both ends of the string \n Supports the split(string separator, int N=-1) function, which can split the original string into multiple strings according to the substring separator in the original string, splitting up to N times, with N defaulting to -1, i.e., no limit to the number of splits. For example, s=\"hello, ann, how are you doing?\", s.split(\",\") will split s into 3 substrings \"hello\", \"ann\", \"how are you doing\", and s.split(\",\", 1) will split s into 2 substrings \"hello\", \"ann, how are you doing\".", "testcases": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class MyStringTest {\n@Test\n    public void testTrimNoSpaces() {\n        MyString s = new MyString(\"hello\");\n        assertEquals(\"hello\", s.trim(), \"Trim should not change string without spaces.\");\n    }\n\n    @Test\n    public void testSplitUnlimited() {\n        MyString s = new MyString(\"one,two,three\");\n        assertArrayEquals(new String[]{\"one\", \"two\", \"three\"}, s.split(\",\", -1), \"Split should work without limit.\");\n    }\n\n    @Test\n    public void testSplitNone() {\n        MyString s = new MyString(\"one two three\");\n        assertArrayEquals(new String[]{\"one two three\"}, s.split(\",\", -1), \"Split should return original string if separator not found.\");\n    }\n\n    @Test\n    public void testSplitEmptyString() {\n        MyString s = new MyString(\"\");\n        assertArrayEquals(new String[]{\"\"}, s.split(\",\", -1), \"Split on empty string should return array with empty string.\");\n    }\n\n    @Test\n    public void testSplitSeparatorAtEnd() {\n        MyString s = new MyString(\"hello,\");\n        assertArrayEquals(new String[]{\"hello\"}, s.split(\",\", -1), \"Split should not return empty string at end.\");\n    }\n\n    @Test\n    public void testSplitLimitZero() {\n        MyString s = new MyString(\"one,two,three\");\n        assertArrayEquals(new String[]{\"one,two,three\"}, s.split(\",\", 0), \"Split with limit 0 should return original string.\");\n    }\n\n    @Test\n    public void testLength() {\n        MyString s = new MyString(\"hello\");\n        assertEquals(5, s.length(), \"Length should return correct string length.\");\n    }\n\n    @Test\n    public void testGetValue() {\n        MyString s = new MyString(\"test\");\n        assertEquals(\"test\", s.getValue(), \"getValue should return original string.\");\n    }\n}\n", "setup_code": "", "reference_solution": "```python\npublic class MyString {\n    private String value;\n\n    public MyString(String value) {\n        this.value = value;\n    }\n\n    public String trim() {\n        return value.trim();\n    }\n\n    public String[] split(String separator, int N) {\n        // 检查N的值，如果N=-1，则不限制切分次数\n        if (N == -1) {\n            return value.split(separator);\n        } else {\n            return value.split(separator, N + 1);\n        }\n    }\n\n    // 为了支持String类的其他所有操作，可以提供一个方法获取内部的String\n    public String getValue() {\n        return value;\n    }\n\n    // 示例：其他String类的方法代理实现，例如length()\n    public int length() {\n        return value.length();\n    }\n\n}\n\n// 使用示例\nclass TestMyString {\n    public static void main(String[] args) {\n        MyString s = new MyString(\"  hello, ann, how are you doing?  \");\n        System.out.println(\"Trimmed string: '\" + s.trim() + \"'\");\n\n        MyString s2 = new MyString(\"hello, ann, how are you doing?\");\n        String[] splitUnlimited = s2.split(\",\", -1);\n        System.out.println(\"Split without limit:\");\n        for (String str : splitUnlimited) {\n            System.out.println(\"'\" + str.trim() + \"'\");\n        }\n\n        String[] splitOnce = s2.split(\",\", 1);\n        System.out.println(\"Split once:\");\n        for (String str : splitOnce) {\n            System.out.println(\"'\" + str.trim() + \"'\");\n        }\n    }\n}\n```", "classification": "Software Engineering"}
