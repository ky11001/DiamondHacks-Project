[
    {
      "id": "131",
      "AI response": "```java\nclass PhoneNumberCreator {\n    public static String createPhoneNumber(int[] numbers) {\n        return String.format(\"(%d%d%d) %d%d%d-%d%d%d%d\",numbers[0],numbers[1],numbers[2],numbers[3],numbers[4],numbers[5],numbers[6],numbers[7],numbers[8],numbers[9]);\n    }\n}\n```"
    },
    {
      "id": "132",
      "AI response": "```java\nimport java.util.List;\n\nclass Conversation {\n    private String sender;\n\n    public Conversation(String sender) {\n        this.sender = sender;\n    }\n\n    public String getSender() {\n        return sender;\n    }\n}\n\nclass ConversationCounter {\n\n    public static int countConversationTurns(List<Conversation> conversations, String doctor, String patient) {\n        if (conversations == null || conversations.isEmpty()) {\n            return 0;\n        }\n\n        int turns = 0;\n        boolean doctorSpoke = false;\n        boolean patientSpoke = false;\n\n        for (Conversation conversation : conversations) {\n            String sender = conversation.getSender();\n\n            if (sender.equals(doctor)) {\n                if (patientSpoke) {\n                    turns++;\n                    patientSpoke = false;\n                }\n                doctorSpoke = true;\n            } else if (sender.equals(patient)) {\n                if (doctorSpoke) {\n                    turns++;\n                    doctorSpoke = false;\n                }\n                patientSpoke = true;\n            }\n        }\n\n        return turns;\n    }\n}\n```"
    },
    {
      "id": "133",
      "AI response": "```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass Main {\n    /**\n     * Extracts the first letter or English string that appears after the two characters \"order\"\n     * from the given string using Java's regular expression.\n     *\n     * @param text The input string.\n     * @return The first letter or English string found after \"order\", or null if not found.\n     */\n    public static String findFirstAlphabeticStringAfterOrder(String text) {\n        Pattern pattern = Pattern.compile(\"order\\\\s*([a-zA-Z])\\\\w*\");\n        Matcher matcher = pattern.matcher(text);\n\n        if (matcher.find()) {\n            return matcher.group(1);\n        }\n\n        return null;\n    }\n}\n```"
    },
    {
      "id": "134",
      "AI response": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass User {\n    private String name;\n\n    public User(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"name is: \" + name;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (obj == null || getClass() != obj.getClass()) return false;\n        User user = (User) obj;\n        return name.equals(user.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return name.hashCode();\n    }\n}\n\nclass UserManager {\n    private ArrayList<User> users;\n\n    public UserManager() {\n        this.users = new ArrayList<>();\n    }\n\n    public void addUser(User user) {\n        this.users.add(user);\n    }\n\n    public void deleteUser(User user) {\n        this.users.remove(user);\n    }\n\n    public boolean isExist(User user) {\n        return this.users.contains(user);\n    }\n\n    public void display() {\n        for (User user : this.users) {\n            System.out.println(user);\n        }\n    }\n\n    public ArrayList<User> getUsers() {\n        return users;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        UserManager userManager = new UserManager();\n        User alice = new User(\"alice\");\n        User john = new User(\"john\");\n\n        userManager.addUser(alice);\n        userManager.addUser(john);\n\n        userManager.display();\n    }\n}\n```"
    },
    {
      "id": "135",
      "AI response": "```java\npublic class Student {\n\n    private String name;\n    private String userID;\n    private double math;\n    private double chinese;\n    private double english;\n\n    public Student() {\n    }\n\n    public Student(String name, String userID, double math, double chinese, double english) {\n        this.name = name;\n        this.userID = userID;\n        this.math = math;\n        this.chinese = chinese;\n        this.english = english;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getUserID() {\n        return userID;\n    }\n\n    public void setUserID(String userID) {\n        this.userID = userID;\n    }\n\n    public double getMath() {\n        return math;\n    }\n\n    public void setMath(double math) {\n        if (math >= 0 && math <= 100) {\n            this.math = math;\n        } else {\n            System.out.println(\"Invalid math score. Score must be between 0 and 100.\");\n        }\n    }\n\n    public double getChinese() {\n        return chinese;\n    }\n\n    public void setChinese(double chinese) {\n        if (chinese >= 0 && chinese <= 100) {\n            this.chinese = chinese;\n        } else {\n            System.out.println(\"Invalid Chinese score. Score must be between 0 and 100.\");\n        }\n    }\n\n    public double getEnglish() {\n        return english;\n    }\n\n    public void setEnglish(double english) {\n        if (english >= 0 && english <= 100) {\n            this.english = english;\n        } else {\n            System.out.println(\"Invalid English score. Score must be between 0 and 100.\");\n        }\n    }\n\n    public double getTotalScore() {\n        return math + chinese + english;\n    }\n\n    public double getAverageScore() {\n        return (math + chinese + english) / 3.0;\n    }\n\n    public static void main(String[] args) {\n        Student student = new Student(\"Your Name\", \"Your ID\", 90, 85, 95);\n\n        System.out.println(\"Name: \" + student.getName());\n        System.out.println(\"User ID: \" + student.getUserID());\n        System.out.println(\"Math Score: \" + student.getMath());\n        System.out.println(\"Chinese Score: \" + student.getChinese());\n        System.out.println(\"English Score: \" + student.getEnglish());\n    }\n}\n```"
    },
    {
      "id": "136",
      "AI response": "```java\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nclass Task {\n    String name;\n    Date deadline;\n\n    public Task(String name, Date deadline) {\n        this.name = name;\n        this.deadline = deadline;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Date getDeadline() {\n        return deadline;\n    }\n}\n\nclass Model {\n    List<Task> tasks;\n\n    public Model() {\n        tasks = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            tasks.add(null);\n        }\n    }\n\n    public List<Task> getTasks() {\n        return tasks;\n    }\n}\n\nclass Controller {\n    Model model;\n\n    public Controller(Model model) {\n        this.model = model;\n    }\n\n    public void addTask(String name, Date deadline) {\n        for (int i = 0; i < 10; i++) {\n            if (model.tasks.get(i) == null) {\n                Task newTask = new Task(name, deadline);\n                model.tasks.set(i, newTask);\n                return;\n            }\n        }\n        System.out.println(\"Task list is full.\");\n    }\n\n    public void viewTasks() {\n        for (int i = 0; i < 10; i++) {\n            if (model.tasks.get(i) != null) {\n                System.out.println(\"Task \" + (i + 1) + \": \" + model.tasks.get(i).name + \", Deadline: \" + model.tasks.get(i).deadline);\n            } else {\n                System.out.println(\"Task \" + (i + 1) + \": Empty\");\n            }\n        }\n    }\n\n    public void deleteTask(int index) {\n        if (index >= 0 && index < 10) {\n            model.tasks.set(index, null);\n        } else {\n            System.out.println(\"Invalid task index.\");\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n\n        // Adding tasks\n        controller.addTask(\"Task 1\", new Date());\n        controller.addTask(\"Task 2\", new Date());\n\n        // Viewing tasks\n        System.out.println(\"Viewing tasks:\");\n        controller.viewTasks();\n\n        // Deleting a task\n        System.out.println(\"\\nDeleting task at index 0:\");\n        controller.deleteTask(0);\n\n        // Viewing tasks after deletion\n        System.out.println(\"\\nViewing tasks after deletion:\");\n        controller.viewTasks();\n    }\n}\n```"
    },
    {
      "id": "137",
      "AI response": "```java\nclass Main {\n    public static int[] calculateProportion(double proportion1, double proportion2, double proportion3, int total) {\n        int value1 = (int) (proportion1 * total);\n        int value2 = (int) (proportion2 * total);\n        int value3 = (int) (proportion3 * total);\n\n        int sum = value1 + value2 + value3;\n\n        while (sum != total) {\n            if (sum < total) {\n                if (proportion1 >= proportion2 && proportion1 >= proportion3) {\n                    value1++;\n                    sum++;\n                } else if (proportion2 >= proportion1 && proportion2 >= proportion3) {\n                    value2++;\n                    sum++;\n                } else {\n                    value3++;\n                    sum++;\n                }\n            } else {\n                if (proportion1 >= proportion2 && proportion1 >= proportion3) {\n                    value1--;\n                    sum--;\n                } else if (proportion2 >= proportion1 && proportion2 >= proportion3) {\n                    value2--;\n                    sum--;\n                } else {\n                    value3--;\n                    sum--;\n                }\n            }\n        }\n\n        return new int[]{value1, value2, value3};\n    }\n}\n```"
    },
    {
      "id": "138",
      "AI response": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\nclass Solution {\n    /**\n     * Given a string, generate all permutations of the characters in the string.\n     *\n     * @param str The string to generate permutations for.\n     * @return A set of all permutations of the string.\n     */\n    public Set<String> generatePermutations(String str) {\n        Set<String> permutations = new HashSet<>();\n        generatePermutationsHelper(str, \"\", permutations);\n        return permutations;\n    }\n\n    private void generatePermutationsHelper(String str, String current, Set<String> permutations) {\n        if (str.length() == 0) {\n            permutations.add(current);\n            return;\n        }\n\n        for (int i = 0; i < str.length(); i++) {\n            char ch = str.charAt(i);\n            String remaining = str.substring(0, i) + str.substring(i + 1);\n            generatePermutationsHelper(remaining, current + ch, permutations);\n        }\n    }\n}\n```"
    },
    {
      "id": "139",
      "AI response": "```java\nclass Student {\n    private String name;\n    private double ordinary;\n    private double attendance;\n\n    public Student(String name, double ordinary, double attendance) {\n        this.name = name;\n        this.ordinary = ordinary;\n        this.attendance = attendance;\n    }\n\n    public boolean qualified() {\n        return ordinary >= 60 && attendance >= 0.6;\n    }\n}\n```"
    },
    {
      "id": "140",
      "AI response": "```java\npublic class Main {\n    public static String showQianFenWei(long x) {\n        String s = String.valueOf(x);\n        StringBuilder sb = new StringBuilder();\n        int count = 0;\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n            count++;\n            if (count % 3 == 0 && i != 0) {\n                sb.append(',');\n            }\n        }\n        return sb.reverse().toString();\n    }\n}\n```"
    },
    {
      "id": "141",
      "AI response": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass KeywordSearch {\n\n    public static int search(String filename, String keyword) {\n        int count = 0;\n        String regex = \"\\\\b\" + keyword + \"\\\\b\";\n        Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);\n\n        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                Matcher matcher = pattern.matcher(line);\n                while (matcher.find()) {\n                    count++;\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        return count;\n    }\n}\n```"
    },
    {
      "id": "142",
      "AI response": "```java\nclass ArrayElementSelector {\n    public static int selectElement(int[] array) {\n        if (array == null || array.length == 0) {\n            return 0;\n        }\n        if (array.length == 1) {\n            return array[0];\n        }\n        if (array.length >= 51) {\n            return array[50];\n        }\n\n        double divisor = 2.0;\n        while (divisor <= 51) {\n            int index = (int) (51 / divisor);\n            if (array.length >= index) {\n                return array[index - 1];\n            }\n            divisor *= 2;\n        }\n\n        return 0;\n    }\n}\n```"
    },
    {
      "id": "143",
      "AI response": "```java\nclass Main {\n    public static int calculateSum(int[][] matrix, int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i + j != n - 1 && i != n - 1 && j != n - 1) {\n                    sum += matrix[i][j];\n                }\n            }\n        }\n        return sum;\n    }\n}\n```"
    },
    {
      "id": "144",
      "AI response": "```java\nimport java.util.*;\n\nclass AlarmSystem {\n    private Map<Integer, Alarm> alarms;\n\n    public AlarmSystem() {\n        this.alarms = new HashMap<>();\n    }\n\n    public boolean addAlarm(int id, Set<Integer> weekdays, int hour, int minute, int typeId) {\n        if (alarms.containsKey(id)) {\n            return false;\n        }\n\n        Alarm alarm = new Alarm(id, weekdays, hour, minute, typeId);\n        alarms.put(id, alarm);\n        return true;\n    }\n\n    public boolean deleteAlarm(int id) {\n        if (!alarms.containsKey(id)) {\n            return false;\n        }\n\n        alarms.remove(id);\n        return true;\n    }\n\n    public List<Alarm> queryAlarm(int weekday, int hour, int startMinute, int endMinute) {\n        List<Alarm> result = new ArrayList<>();\n\n        for (Alarm alarm : alarms.values()) {\n            if (alarm.getWeekdays().contains(weekday) && alarm.getHour() == hour &&\n                alarm.getMinute() >= startMinute && alarm.getMinute() <= endMinute) {\n                result.add(alarm);\n            }\n        }\n\n        Collections.sort(result, (a1, a2) -> {\n            if (a1.getMinute() != a2.getMinute()) {\n                return a1.getMinute() - a2.getMinute();\n            } else if (a1.getTypeId() != a2.getTypeId()) {\n                return a1.getTypeId() - a2.getTypeId();\n            } else {\n                return a1.getId() - a2.getId();\n            }\n        });\n\n        return result;\n    }\n\n    static class Alarm {\n        private int id;\n        private Set<Integer> weekdays;\n        private int hour;\n        private int minute;\n        private int typeId;\n\n        public Alarm(int id, Set<Integer> weekdays, int hour, int minute, int typeId) {\n            this.id = id;\n            this.weekdays = weekdays;\n            this.hour = hour;\n            this.minute = minute;\n            this.typeId = typeId;\n        }\n\n        public int getId() {\n            return id;\n        }\n\n        public Set<Integer> getWeekdays() {\n            return weekdays;\n        }\n\n        public int getHour() {\n            return hour;\n        }\n\n        public int getMinute() {\n            return minute;\n        }\n\n        public int getTypeId() {\n            return typeId;\n        }\n    }\n}\n```"
    },
    {
      "id": "145",
      "AI response": "```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass SQLParser {\n    private String select;\n    private String from;\n    private String where;\n    private String orderBy;\n    private String limit;\n\n    public SQLParser(String sql) {\n        parse(sql);\n    }\n\n    private void parse(String sql) {\n        // Extract SELECT and FROM\n        Pattern selectFromPattern = Pattern.compile(\"select\\\\s+(.+?)\\\\s+from\\\\s+(.+?)(?:\\\\s+where|$|\\\\s+order\\\\s+by|\\\\s+limit)\");\n        Matcher selectFromMatcher = selectFromPattern.matcher(sql.toLowerCase());\n\n        if (selectFromMatcher.find()) {\n            this.select = selectFromMatcher.group(1).trim();\n            this.from = selectFromMatcher.group(2).trim();\n\n            // Extract WHERE\n            Pattern wherePattern = Pattern.compile(\"where\\\\s+(.+?)(?:\\\\s+order\\\\s+by|$|\\\\s+limit)\");\n            Matcher whereMatcher = wherePattern.matcher(sql.toLowerCase());\n\n            if (whereMatcher.find()) {\n                this.where = whereMatcher.group(1).trim();\n\n                // Extract ORDER BY\n                Pattern orderByPattern = Pattern.compile(\"order\\\\s+by\\\\s+(.+?)(?:\\\\s+limit|$)\");\n                Matcher orderByMatcher = orderByPattern.matcher(sql.toLowerCase());\n\n                if (orderByMatcher.find()) {\n                    this.orderBy = orderByMatcher.group(1).trim();\n\n                    // Extract LIMIT\n                    Pattern limitPattern = Pattern.compile(\"limit\\\\s+(.+)\");\n                    Matcher limitMatcher = limitPattern.matcher(sql.toLowerCase());\n\n                    if (limitMatcher.find()) {\n                        this.limit = limitMatcher.group(1).trim();\n                    }\n                } else {\n                    // Extract LIMIT (when ORDER BY is absent)\n                    Pattern limitPattern = Pattern.compile(\"limit\\\\s+(.+)\");\n                    Matcher limitMatcher = limitPattern.matcher(sql.toLowerCase());\n\n                    if (limitMatcher.find()) {\n                        this.limit = limitMatcher.group(1).trim();\n                    }\n                }\n            } else {\n                 // Extract ORDER BY (when WHERE is absent)\n                Pattern orderByPattern = Pattern.compile(\"order\\\\s+by\\\\s+(.+?)(?:\\\\s+limit|$)\");\n                Matcher orderByMatcher = orderByPattern.matcher(sql.toLowerCase());\n\n                if (orderByMatcher.find()) {\n                    this.orderBy = orderByMatcher.group(1).trim();\n\n                     // Extract LIMIT\n                    Pattern limitPattern = Pattern.compile(\"limit\\\\s+(.+)\");\n                    Matcher limitMatcher = limitPattern.matcher(sql.toLowerCase());\n\n                    if (limitMatcher.find()) {\n                        this.limit = limitMatcher.group(1).trim();\n                    }\n\n                } else {\n\n                    // Extract LIMIT (when ORDER BY is absent)\n                    Pattern limitPattern = Pattern.compile(\"limit\\\\s+(.+)\");\n                    Matcher limitMatcher = limitPattern.matcher(sql.toLowerCase());\n\n                    if (limitMatcher.find()) {\n                        this.limit = limitMatcher.group(1).trim();\n                    }\n                }\n            }\n        }\n    }\n\n    public String getSelect() {\n        return select;\n    }\n\n    public String getFrom() {\n        return from;\n    }\n\n    public String getWhere() {\n        return where;\n    }\n\n    public String getOrderBy() {\n        return orderBy;\n    }\n\n    public String getLimit() {\n        return limit;\n    }\n}\n```"
    },
    {
      "id": "146",
      "AI response": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass SeqList {\n    List<Character> list;\n\n    public SeqList() {\n        list = new ArrayList<>();\n    }\n\n    public void createSeqList(char[] elements) {\n        list.clear();\n        for (char element : elements) {\n            list.add(element);\n        }\n    }\n\n    public void outputSeqList() {\n        System.out.println(list);\n    }\n\n    public int getLength() {\n        return list.size();\n    }\n\n    public boolean isEmpty() {\n        return list.isEmpty();\n    }\n\n    public char getElement(int index) {\n        if (index < 0 || index >= list.size()) {\n            throw new IndexOutOfBoundsException(\"Index out of bounds\");\n        }\n        return list.get(index);\n    }\n\n    public int getPosition(char element) {\n        for (int i = 0; i < list.size(); i++) {\n            if (list.get(i) == element) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public void insertElement(int index, char element) {\n        if (index < 0 || index > list.size()) {\n            throw new IndexOutOfBoundsException(\"Index out of bounds\");\n        }\n        list.add(index, element);\n    }\n\n    public void deleteElement(int index) {\n        if (index < 0 || index >= list.size()) {\n            throw new IndexOutOfBoundsException(\"Index out of bounds\");\n        }\n        list.remove(index);\n    }\n\n    public void clearSeqList() {\n        list.clear();\n    }\n}\n```"
    },
    {
      "id": "147",
      "AI response": "```java\nclass Plant {\n    String name;\n    int health;\n    int attack;\n\n    public Plant(String name, int health, int attack) {\n        this.name = name;\n        this.health = health;\n        this.attack = attack;\n    }\n\n    public void attack(Zombie zombie) {\n        System.out.println(this.name + \" attacks \" + zombie.name + \" for \" + this.attack + \" damage.\");\n        zombie.health -= this.attack;\n        zombie.death();\n    }\n\n    public void death() {\n        if (this.health <= 0) {\n            System.out.println(this.name + \" has died.\");\n        } else {\n            System.out.println(this.name + \" has \" + this.health + \" health left.\");\n        }\n    }\n}\n\nclass Zombie {\n    String name;\n    int health;\n    int attack;\n\n    public Zombie(String name, int health, int attack) {\n        this.name = name;\n        this.health = health;\n        this.attack = attack;\n    }\n\n    public void attack(Plant plant) {\n        System.out.println(this.name + \" attacks \" + plant.name + \" for \" + this.attack + \" damage.\");\n        plant.health -= this.attack;\n        plant.death();\n    }\n\n    public void death() {\n        if (this.health <= 0) {\n            System.out.println(this.name + \" has died.\");\n        } else {\n            System.out.println(this.name + \" has \" + this.health + \" health left.\");\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Plant peashooter = new Plant(\"Peashooter\", 100, 20);\n        Zombie coneheadZombie = new Zombie(\"Conehead Zombie\", 200, 10);\n\n        boolean battleOver = false;\n        while (!battleOver) {\n            peashooter.attack(coneheadZombie);\n            if (coneheadZombie.health <= 0) {\n                battleOver = true;\n                break;\n            }\n\n            coneheadZombie.attack(peashooter);\n            if (peashooter.health <= 0) {\n                battleOver = true;\n                break;\n            }\n        }\n\n        if (peashooter.health <= 0) {\n            System.out.println(\"The Zombie wins!\");\n        } else {\n            System.out.println(\"The Plant wins!\");\n        }\n    }\n}\n```"
    },
    {
      "id": "148",
      "AI response": "```java\nimport java.time.LocalDate;\nimport java.time.YearMonth;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass DateDifference {\n\n    public static int getDaysDifference(String dateStr) {\n        Map<String, Integer> chineseNumbers = new HashMap<>();\n        chineseNumbers.put(\"一\", 1);\n        chineseNumbers.put(\"二\", 2);\n        chineseNumbers.put(\"三\", 3);\n        chineseNumbers.put(\"四\", 4);\n        chineseNumbers.put(\"五\", 5);\n        chineseNumbers.put(\"六\", 6);\n        chineseNumbers.put(\"七\", 7);\n        chineseNumbers.put(\"八\", 8);\n        chineseNumbers.put(\"九\", 9);\n        chineseNumbers.put(\"十\", 10);\n        chineseNumbers.put(\"十一\", 11);\n        chineseNumbers.put(\"十二\", 12);\n\n        if (dateStr.equals(\"今天\")) {\n            return 1;\n        } else if (dateStr.equals(\"昨天\")) {\n            return 2;\n        } else if (dateStr.startsWith(\"最近\") || dateStr.startsWith(\"本\")) {\n            if (dateStr.contains(\"周\")) {\n                String numStr = dateStr.replaceAll(\"[^\\\\u4E00-\\\\u9FA50-9]\", \"\").replace(\"周\",\"\");\n                int num;\n                try {\n                    num = Integer.parseInt(numStr);\n                } catch (NumberFormatException e) {\n                    num = chineseNumbers.getOrDefault(numStr, 0);\n                }\n                return num * 7;\n            } else if (dateStr.contains(\"天\")) {\n                String numStr = dateStr.replaceAll(\"[^\\\\u4E00-\\\\u9FA50-9]\", \"\").replace(\"天\",\"\");\n                int num;\n                try {\n                    num = Integer.parseInt(numStr);\n                } catch (NumberFormatException e) {\n                    num = chineseNumbers.getOrDefault(numStr, 0);\n                }\n                return num + 1;\n            } else if (dateStr.contains(\"月\")) {\n                String numStr = dateStr.replaceAll(\"[^\\\\u4E00-\\\\u9FA50-9]\", \"\").replace(\"月\",\"\");\n                int num;\n                try {\n                    num = Integer.parseInt(numStr);\n                } catch (NumberFormatException e) {\n                    num = chineseNumbers.getOrDefault(numStr, 0);\n                }\n\n                LocalDate today = LocalDate.now();\n                int totalDays = 0;\n                for (int i = 0; i < num; i++) {\n                    YearMonth yearMonth = YearMonth.from(today.plusMonths(i));\n                    totalDays += yearMonth.lengthOfMonth();\n                }\n                return totalDays + 1;\n            }\n        }\n        return 0;\n    }\n}\n```"
    },
    {
      "id": "149",
      "AI response": "```java\nclass PathReader {\n\n    private static String readPathTest(String path) {\n        String[] parts = path.split(\"/\");\n        String lastPart = parts[parts.length - 1];\n        String[] nameParts = lastPart.split(\"\\\\.\");\n        return nameParts[0];\n    }\n\n}\n```"
    },
    {
      "id": "150",
      "AI response": "```java\nimport java.util.Scanner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String ip = scanner.nextLine();\n\n        if (isRightIP(ip)) {\n            System.out.println(\"true\");\n        } else {\n            System.out.println(\"false\");\n        }\n        scanner.close();\n    }\n\n    public static boolean isRightIP(String ip) {\n        String[] parts = ip.split(\"\\\\.\");\n        if (parts.length != 4) {\n            return false;\n        }\n\n        for (String part : parts) {\n            try {\n                int num = Integer.parseInt(part);\n                if (num < 0 || num > 255) {\n                    return false;\n                }\n            } catch (NumberFormatException e) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static boolean isRightIPByRegex(String ip) {\n        String regex = \"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(ip);\n        return matcher.matches();\n    }\n}\n```"
    },
    {
      "id": "151",
      "AI response": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass Main {\n    /**\n     * Extracts phone numbers from a string that matches the pattern\n     * \"supported_mobiles\":[\"13001597927\",\"13001740938\",\"13001910099\"]\n     *\n     * @param str The input string.\n     * @return A list of extracted phone numbers.\n     */\n    public static List<String> extractPhoneNumbers(String str) {\n        List<String> phoneNumbers = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"\\\"supported_mobiles\\\":\\\\[(.*?)\\\\]\");\n        Matcher matcher = pattern.matcher(str);\n\n        if (matcher.find()) {\n            String content = matcher.group(1);\n            if (!content.isEmpty()) {\n                Pattern phonePattern = Pattern.compile(\"\\\"(\\\\d{11})\\\"\");\n                Matcher phoneMatcher = phonePattern.matcher(content);\n                while (phoneMatcher.find()) {\n                    phoneNumbers.add(phoneMatcher.group(1));\n                }\n            }\n        }\n\n        return phoneNumbers;\n    }\n}\n```"
    },
    {
      "id": "152",
      "AI response": "```java\nclass MatrixOperations {\n\n    public static boolean[][] meet(boolean[][] matrix1, boolean[][] matrix2) {\n        int m = matrix1.length;\n        int n = matrix1[0].length;\n        boolean[][] result = new boolean[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                result[i][j] = matrix1[i][j] && matrix2[i][j];\n            }\n        }\n        return result;\n    }\n\n    public static boolean[][] join(boolean[][] matrix1, boolean[][] matrix2) {\n        int m = matrix1.length;\n        int n = matrix1[0].length;\n        boolean[][] result = new boolean[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                result[i][j] = matrix1[i][j] || matrix2[i][j];\n            }\n        }\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        boolean[][] matrix1 = {{true, false}, {false, true}};\n        boolean[][] matrix2 = {{false, true}, {true, false}};\n\n        boolean[][] meetResult = MatrixOperations.meet(matrix1, matrix2);\n        System.out.println(\"Meet Result:\");\n        printMatrix(meetResult);\n\n        boolean[][] joinResult = MatrixOperations.join(matrix1, matrix2);\n        System.out.println(\"Join Result:\");\n        printMatrix(joinResult);\n    }\n\n    public static void printMatrix(boolean[][] matrix) {\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[0].length; j++) {\n                System.out.print(matrix[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n```"
    },
    {
      "id": "153",
      "AI response": "```java\nimport java.util.Scanner;\n\nabstract class People {\n    protected double height;\n    protected double weight;\n\n    public People(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n    }\n\n    public double calculateBMI() {\n        return weight / (height * height);\n    }\n\n    public abstract String conclusion();\n}\n\nclass Man extends People {\n    public Man(double height, double weight) {\n        super(height, weight);\n    }\n\n    @Override\n    public String conclusion() {\n        double bmi = calculateBMI();\n        if (bmi < 20) {\n            return \"过轻\";\n        } else if (bmi < 25) {\n            return \"正常\";\n        } else if (bmi < 30) {\n            return \"过重\";\n        } else if (bmi < 35) {\n            return \"肥胖\";\n        } else {\n            return \"非常肥胖\";\n        }\n    }\n}\n\nclass Woman extends People {\n    public Woman(double height, double weight) {\n        super(height, weight);\n    }\n\n    @Override\n    public String conclusion() {\n        double bmi = calculateBMI();\n        if (bmi < 19) {\n            return \"过轻\";\n        } else if (bmi < 24) {\n            return \"正常\";\n        } else if (bmi < 29) {\n            return \"过重\";\n        } else if (bmi < 34) {\n            return \"肥胖\";\n        } else {\n            return \"非常肥胖\";\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"请输入性别 (男/女):\");\n        String gender = scanner.nextLine();\n\n        System.out.println(\"请输入身高 (米):\");\n        double height = scanner.nextDouble();\n\n        System.out.println(\"请输入体重 (公斤):\");\n        double weight = scanner.nextDouble();\n\n        People person;\n        if (gender.equals(\"男\")) {\n            person = new Man(height, weight);\n        } else if (gender.equals(\"女\")) {\n            person = new Woman(height, weight);\n        } else {\n            System.out.println(\"无效的性别输入\");\n            return;\n        }\n\n        System.out.println(\"BMI: \" + String.format(\"%.2f\", person.calculateBMI()));\n        System.out.println(\"结论: \" + person.conclusion());\n\n        scanner.close();\n    }\n}\n```"
    },
    {
      "id": "154",
      "AI response": "```java\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\n\npublic class Solution {\n\n    public String getContent(String html) {\n        Document doc = Jsoup.parse(html);\n        Element span = doc.select(\"span.css-901oao.css-16my406.r-poiln3.r-bcqeeo.r-qvutc0\").first();\n        if (span != null) {\n            return span.text();\n        }\n        return null;\n    }\n}\n```"
    },
    {
      "id": "155",
      "AI response": "```java\nclass Main {\n    public static boolean isValidJavaFileName(String fileName) {\n        if (fileName == null || fileName.isEmpty()) {\n            return false;\n        }\n\n        if (!fileName.endsWith(\".java\")) {\n            return false;\n        }\n\n        String nameWithoutExtension = fileName.substring(0, fileName.length() - 5);\n\n        if (nameWithoutExtension.isEmpty()) {\n            return false;\n        }\n\n        if (!Character.isJavaIdentifierStart(nameWithoutExtension.charAt(0))) {\n            return false;\n        }\n\n        for (int i = 1; i < nameWithoutExtension.length(); i++) {\n            if (!Character.isJavaIdentifierPart(nameWithoutExtension.charAt(i))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static boolean isValidEmail(String email) {\n        if (email == null || email.isEmpty()) {\n            return false;\n        }\n\n        String regex = \"^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$\";\n        return email.matches(regex);\n    }\n\n\n    public static void main(String[] args) {\n        // You can add some test cases here if you want.\n        // For example:\n        // System.out.println(isValidJavaFileName(\"MyClass.java\"));\n        // System.out.println(isValidEmail(\"test@example.com\"));\n    }\n}\n```"
    },
    {
      "id": "156",
      "AI response": "```java\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\n\npublic class Solution {\n\n    public static void main(String[] args) {\n        String jsonStr = \"{\\n\" +\n                \"\\t\\\"xAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"category\\\",\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t\\\"Mon\\\",\\n\" +\n                \"\\t\\t\\t\\\"Tue\\\",\\n\" +\n                \"\\t\\t\\t\\\"Wed\\\",\\n\" +\n                \"\\t\\t\\t\\\"Thu\\\",\\n\" +\n                \"\\t\\t\\t\\\"Fri\\\",\\n\" +\n                \"\\t\\t\\t\\\"Sat\\\",\\n\" +\n                \"\\t\\t\\t\\\"Sun\\\"\\n\" +\n                \"\\t\\t]\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"yAxis\\\": {\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"value\\\"\\n\" +\n                \"\\t},\\n\" +\n                \"\\t\\\"series\\\": [{\\n\" +\n                \"\\t\\t\\\"data\\\": [\\n\" +\n                \"\\t\\t\\t150,\\n\" +\n                \"\\t\\t\\t230,\\n\" +\n                \"\\t\\t\\t224,\\n\" +\n                \"\\t\\t\\t218,\\n\" +\n                \"\\t\\t\\t135,\\n\" +\n                \"\\t\\t\\t147,\\n\" +\n                \"\\t\\t\\t260\\n\" +\n                \"\\t\\t],\\n\" +\n                \"\\t\\t\\\"type\\\": \\\"line\\\"\\n\" +\n                \"\\t}]\\n\" +\n                \"}\";\n\n        JSONObject jsonObject = JSON.parseObject(jsonStr);\n\n        JSONObject xAxis = jsonObject.getJSONObject(\"xAxis\");\n        JSONArray xAxisData = xAxis.getJSONArray(\"data\");\n        String mon = xAxisData.getString(0);\n        String tue = xAxisData.getString(1);\n        String wed = xAxisData.getString(2);\n        String thu = xAxisData.getString(3);\n        String fri = xAxisData.getString(4);\n        String sat = xAxisData.getString(5);\n        String sun = xAxisData.getString(6);\n        System.out.println(\"xAxisData: \" + mon + \", \" + tue + \", \" + wed + \", \" + thu + \", \" + fri + \", \" + sat + \", \" + sun);\n\n        JSONArray series = jsonObject.getJSONArray(\"series\");\n        JSONObject seriesData = series.getJSONObject(0);\n        JSONArray data = seriesData.getJSONArray(\"data\");\n        int val1 = data.getInteger(0);\n        int val2 = data.getInteger(1);\n        int val3 = data.getInteger(2);\n        int val4 = data.getInteger(3);\n        int val5 = data.getInteger(4);\n        int val6 = data.getInteger(5);\n        int val7 = data.getInteger(6);\n        System.out.println(\"seriesData: \" + val1 + \", \" + val2 + \", \" + val3 + \", \" + val4 + \", \" + val5 + \", \" + val6 + \", \" + val7);\n    }\n}\n```"
    },
    {
      "id": "157",
      "AI response": "```java\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\nclass Main {\n\n    public static Set<String> filterValues(String input) {\n        String[] groups = input.split(\";\");\n        Set<String> values = new HashSet<>();\n        for (String group : groups) {\n            String[] parts = group.split(\"&&\");\n            if (parts.length > 0) {\n                String value = parts[parts.length - 1];\n                values.add(value);\n            }\n        }\n\n        Set<String> filteredValues = new HashSet<>();\n        for (String value : values) {\n            if (RiskRejectCategoryEnum.contains(value)) {\n                filteredValues.add(value);\n            }\n        }\n        return filteredValues;\n    }\n\n    public enum RiskRejectCategoryEnum {\n\n        /**\n         * The smaller the value of priority, the higher the priority\n         */\n        black_email(\"black_email\", \"GREYLIST\", 1, \"Greylist\"),\n        rule_email(\"rule_email\", \"NON_GREYLIST\", 2, \"Non-greylist\"),\n        no_email(\"no_email\", \"NO_EMAIL\", 99, \"No need to send email\");\n\n        private final String code;\n        private final String name;\n        private final int priority;\n        private final String description;\n\n        RiskRejectCategoryEnum(String code, String name, int priority, String description) {\n            this.code = code;\n            this.name = name;\n            this.priority = priority;\n            this.description = description;\n        }\n\n        public String getCode() {\n            return code;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public int getPriority() {\n            return priority;\n        }\n\n        public String getDescription() {\n            return description;\n        }\n\n\n        public static boolean contains(String code) {\n            for (RiskRejectCategoryEnum category : RiskRejectCategoryEnum.values()) {\n                if (category.getCode().equals(code)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n}\n```"
    },
    {
      "id": "158",
      "AI response": "```java\npublic class Main {\n\n    public static boolean isValidPassword(String password) {\n        if (password.length() < 8) {\n            return false;\n        }\n\n        int digitCount = 0;\n        for (int i = 0; i < password.length(); i++) {\n            char c = password.charAt(i);\n            if (!Character.isLetterOrDigit(c)) {\n                return false;\n            }\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n\n        return digitCount >= 2;\n    }\n\n    public static void main(String[] args) {\n        java.util.Scanner scanner = new java.util.Scanner(System.in);\n        System.out.print(\"Enter a password: \");\n        String password = scanner.nextLine();\n\n        if (isValidPassword(password)) {\n            System.out.println(\"Valid Password\");\n        } else {\n            System.out.println(\"Invalid Password\");\n        }\n    }\n}\n```"
    },
    {
      "id": "159",
      "AI response": "```java\npublic class Threeleton {\n\n    private static final int NUM_INSTANCES = 3;\n    private static final Threeleton[] instances = new Threeleton[NUM_INSTANCES];\n    private static final boolean[] available = new boolean[NUM_INSTANCES];\n\n    static {\n        for (int i = 0; i < NUM_INSTANCES; i++) {\n            instances[i] = new Threeleton(i);\n            available[i] = true;\n        }\n    }\n\n    private final int id;\n\n    private Threeleton(int id) {\n        this.id = id;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public static synchronized Threeleton getInstance() {\n        for (int i = 0; i < NUM_INSTANCES; i++) {\n            if (available[i]) {\n                available[i] = false;\n                return instances[i];\n            }\n        }\n        return null; // Or throw an exception if no instance is available\n    }\n\n    public static synchronized void releaseInstance(Threeleton instance) {\n        available[instance.getId()] = true;\n    }\n}\n```"
    },
    {
      "id": "160",
      "AI response": "```java\nimport java.io.*;\n\npublic class FileEncoder {\n\n    public static void encodeFile(File encodingFile, File encodedFile) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(encodingFile));\n             BufferedWriter writer = new BufferedWriter(new FileWriter(encodedFile))) {\n\n            int character;\n            while ((character = reader.read()) != -1) {\n                char currentChar = (char) character;\n                char encodedChar = currentChar;\n\n                if (Character.isDigit(currentChar)) {\n                    if (currentChar == '9') {\n                        encodedChar = '0';\n                    } else {\n                        encodedChar = (char) (currentChar + 1);\n                    }\n                } else if (Character.isLetter(currentChar)) {\n                    if (Character.isLowerCase(currentChar)) {\n                        if (currentChar == 'z') {\n                            encodedChar = 'a';\n                        } else {\n                            encodedChar = (char) (currentChar + 1);\n                        }\n                    } else {\n                        if (currentChar == 'Z') {\n                            encodedChar = 'A';\n                        } else {\n                            encodedChar = (char) (currentChar + 1);\n                        }\n                    }\n                }\n\n                writer.write(encodedChar);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
    },
    {
      "id": "161",
      "AI response": "```java\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class WorldCupService {\n\n    private Map<String, String> yearToChampion;\n    private Map<String, List<String>> championToYears;\n\n    public WorldCupService() {\n        yearToChampion = new HashMap<>();\n        championToYears = new HashMap<>();\n\n        yearToChampion.put(\"1930\", \"Uruguay\");\n        yearToChampion.put(\"1934\", \"Italy\");\n        yearToChampion.put(\"1938\", \"Italy\");\n        yearToChampion.put(\"1950\", \"Uruguay\");\n        yearToChampion.put(\"1954\", \"West Germany\");\n        yearToChampion.put(\"1958\", \"Brazil\");\n        yearToChampion.put(\"1962\", \"Brazil\");\n        yearToChampion.put(\"1966\", \"England\");\n        yearToChampion.put(\"1970\", \"Brazil\");\n        yearToChampion.put(\"1974\", \"West Germany\");\n        yearToChampion.put(\"1978\", \"Argentina\");\n        yearToChampion.put(\"1982\", \"Italy\");\n        yearToChampion.put(\"1986\", \"Argentina\");\n        yearToChampion.put(\"1990\", \"West Germany\");\n        yearToChampion.put(\"1994\", \"Brazil\");\n        yearToChampion.put(\"1998\", \"France\");\n        yearToChampion.put(\"2002\", \"Brazil\");\n        yearToChampion.put(\"2006\", \"Italy\");\n        yearToChampion.put(\"2010\", \"Spain\");\n        yearToChampion.put(\"2014\", \"Germany\");\n\n        for (Map.Entry<String, String> entry : yearToChampion.entrySet()) {\n            String year = entry.getKey();\n            String champion = entry.getValue();\n            if (!championToYears.containsKey(champion)) {\n                championToYears.put(champion, new ArrayList<>());\n            }\n            championToYears.get(champion).add(year);\n        }\n    }\n\n    public String getChampionByYear(String year) {\n        if (yearToChampion.containsKey(year)) {\n            return convertChampion(yearToChampion.get(year));\n        } else {\n            return \"The World Cup was not held\";\n        }\n    }\n\n    public String getYearsByChampion(String champion) {\n        String normalizedChampion = convertChampionToEnglish(champion);\n        if (championToYears.containsKey(normalizedChampion)) {\n            List<String> years = championToYears.get(normalizedChampion);\n            StringBuilder sb = new StringBuilder();\n            for (String year : years) {\n                sb.append(year).append(\" \");\n            }\n            return sb.toString().trim();\n        } else {\n            return \"Has not won the World Cup\";\n        }\n    }\n\n    private String convertChampion(String champion) {\n        if(champion.equals(\"Uruguay\")){\n            return \"乌拉圭\";\n        } else if (champion.equals(\"Italy\")){\n            return \"意大利\";\n        } else if (champion.equals(\"West Germany\")){\n            return \"西德\";\n        }else if (champion.equals(\"Brazil\")){\n            return \"巴西\";\n        }else if (champion.equals(\"England\")){\n            return \"英格兰\";\n        } else if (champion.equals(\"Argentina\")){\n            return \"阿根廷\";\n        } else if (champion.equals(\"France\")){\n            return \"法国\";\n        }else if (champion.equals(\"Spain\")){\n            return \"西班牙\";\n        }else if (champion.equals(\"Germany\")){\n            return \"德国\";\n        }\n        return champion;\n    }\n\n    private String convertChampionToEnglish(String champion) {\n        if (champion.equals(\"乌拉圭\")) {\n            return \"Uruguay\";\n        } else if (champion.equals(\"意大利\")) {\n            return \"Italy\";\n        } else if (champion.equals(\"西德\")) {\n            return \"West Germany\";\n        } else if (champion.equals(\"巴西\")) {\n            return \"Brazil\";\n        } else if (champion.equals(\"英格兰\")) {\n            return \"England\";\n        } else if (champion.equals(\"阿根廷\")) {\n            return \"Argentina\";\n        } else if (champion.equals(\"法国\")) {\n            return \"France\";\n        } else if (champion.equals(\"西班牙\")) {\n            return \"Spain\";\n        } else if (champion.equals(\"德国\")) {\n            return \"Germany\";\n        }else if (champion.equals(\"Netherlands\")){\n            return \"Netherlands\";\n        }\n        return champion;\n    }\n\n\n    public static void main(String[] args) {\n        WorldCupService service = new WorldCupService();\n        if (args.length > 0) {\n            String input = args[0];\n            try {\n                Integer.parseInt(input);\n                System.out.println(service.getChampionByYear(input));\n            } catch (NumberFormatException e) {\n                System.out.println(service.getYearsByChampion(input));\n            }\n\n        }\n    }\n}\n```"
    },
    {
      "id": "162",
      "AI response": "```java\nclass Solution {\n    public int numDecodings(String s) {\n        int n = s.length();\n        if (n == 0) {\n            return 0;\n        }\n\n        int[] dp = new int[n + 1];\n        dp[0] = 1;\n        dp[1] = s.charAt(0) == '0' ? 0 : 1;\n\n        for (int i = 2; i <= n; i++) {\n            int oneDigit = Integer.parseInt(s.substring(i - 1, i));\n            int twoDigits = Integer.parseInt(s.substring(i - 2, i));\n\n            if (oneDigit >= 1 && oneDigit <= 9) {\n                dp[i] += dp[i - 1];\n            }\n\n            if (twoDigits >= 10 && twoDigits <= 26) {\n                dp[i] += dp[i - 2];\n            }\n        }\n\n        return dp[n];\n    }\n}\n```"
    },
    {
      "id": "163",
      "AI response": "```java\nclass Solution {\n    public long findKthLargestValue(int n, int m, long k) {\n        long low = 1;\n        long high = (long) n * m;\n\n        while (low < high) {\n            long mid = low + (high - low) / 2;\n            long count = countValuesGreaterThanOrEqualTo(n, m, mid);\n\n            if (count >= k) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n\n        return low - 1;\n    }\n\n    private long countValuesGreaterThanOrEqualTo(int n, int m, long target) {\n        long count = 0;\n        for (int i = 1; i <= n; i++) {\n            count += Math.min(m, target / i);\n            if (target / i < m && target % i ==0 )\n            {\n               //count++;\n            }\n\n        }\n        return count;\n    }\n}\n```"
    },
    {
      "id": "164",
      "AI response": "```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        return isValidBSTHelper(root, null, null);\n    }\n\n    private boolean isValidBSTHelper(TreeNode node, Integer min, Integer max) {\n        if (node == null) {\n            return true;\n        }\n\n        if (min != null && node.val <= min) {\n            return false;\n        }\n\n        if (max != null && node.val >= max) {\n            return false;\n        }\n\n        return isValidBSTHelper(node.left, min, node.val) && isValidBSTHelper(node.right, node.val, max);\n    }\n}\n```"
    },
    {
      "id": "165",
      "AI response": "```java\npublic class DayOfYearCalculator {\n\n    public static int dayOfYear(int year, int month, int day) {\n        int days = 0;\n        boolean isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n\n        switch (month) {\n            case 12:\n                days += 30;\n            case 11:\n                days += 31;\n            case 10:\n                days += 30;\n            case 9:\n                days += 31;\n            case 8:\n                days += 31;\n            case 7:\n                days += 30;\n            case 6:\n                days += 31;\n            case 5:\n                days += 30;\n            case 4:\n                days += 31;\n            case 3:\n                days += (isLeapYear ? 29 : 28);\n            case 2:\n                days += 31;\n            case 1:\n                days += 0;\n                break;\n        }\n        days += day;\n        return days;\n    }\n\n}\n```"
    },
    {
      "id": "166",
      "AI response": "```java\nimport java.time.DayOfWeek;\nimport java.time.LocalDate;\n\nclass RunningTracker {\n\n    public static void main(String[] args) {\n        LocalDate startDate = LocalDate.of(2000, 11, 11);\n        LocalDate endDate = LocalDate.of(2020, 10, 1);\n        RunningTracker tracker = new RunningTracker();\n        int totalDistance = tracker.calculateTotalDistance(startDate, endDate);\n        System.out.println(\"Total distance run: \" + totalDistance + \" kilometers\");\n    }\n\n    public int calculateTotalDistance(LocalDate startDate, LocalDate endDate) {\n        int totalDistance = 0;\n        LocalDate currentDate = startDate;\n\n        while (!currentDate.isAfter(endDate)) {\n            int dailyDistance = 1; // Default distance\n\n            if (currentDate.getDayOfMonth() == 1 || currentDate.getDayOfWeek() == DayOfWeek.MONDAY) {\n                dailyDistance = 2; // Monday or beginning of the month\n            }\n\n            totalDistance += dailyDistance;\n            currentDate = currentDate.plusDays(1);\n        }\n\n        return totalDistance;\n    }\n}\n```"
    },
    {
      "id": "167",
      "AI response": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nclass permutations {\n\n    public static List<String> permute(String str) {\n        Set<String> permutations = new HashSet<>();\n        permuteHelper(str, \"\", permutations);\n        List<String> sortedPermutations = new ArrayList<>(permutations);\n        Collections.sort(sortedPermutations);\n        return sortedPermutations;\n    }\n\n    private static void permuteHelper(String str, String prefix, Set<String> permutations) {\n        if (str.length() == 0) {\n            permutations.add(prefix);\n        } else {\n            for (int i = 0; i < str.length(); i++) {\n                char currentChar = str.charAt(i);\n                String remainingString = str.substring(0, i) + str.substring(i + 1);\n                permuteHelper(remainingString, prefix + currentChar, permutations);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        String input = \"ABA\";\n        List<String> permutationsList = permute(input);\n\n        for (String permutation : permutationsList) {\n            System.out.println(permutation);\n        }\n        System.out.println(permutationsList.size());\n    }\n}\n```"
    },
    {
      "id": "168",
      "AI response": "```java\nimport java.util.*;\n\nclass Main {\n    public static List<Integer> findDeadlocks(Map<Integer, Set<Integer>> holdMap, Map<Integer, Set<Integer>> waitMap) {\n        List<Integer> deadlockedProcesses = new ArrayList<>();\n        Set<Integer> visited = new HashSet<>();\n        boolean changed = true;\n\n        while (changed) {\n            changed = false;\n            List<Integer> toRemove = new ArrayList<>();\n\n            for (Integer processId : waitMap.keySet()) {\n                if (visited.contains(processId)) continue;\n                boolean canRelease = true;\n                for (Integer resource : waitMap.get(processId)) {\n                    boolean occupied = false;\n                    for (Integer otherProcess : holdMap.keySet()) {\n                        if (holdMap.get(otherProcess).contains(resource)) {\n                            occupied = true;\n                            break;\n                        }\n                    }\n                    if (occupied) {\n                        canRelease = false;\n                        break;\n                    }\n                }\n\n                if (canRelease) {\n                    toRemove.add(processId);\n                }\n            }\n            \n            for (Integer processId : toRemove) {\n                waitMap.remove(processId);\n                holdMap.remove(processId);\n                changed = true;\n                visited.add(processId);\n            }\n        }\n\n        for (Integer processId : waitMap.keySet()) {\n            deadlockedProcesses.add(processId);\n        }\n\n        Collections.sort(deadlockedProcesses);\n        return deadlockedProcesses;\n    }\n}\n```"
    },
    {
      "id": "169",
      "AI response": "```java\npublic class Square {\n\n    private double side;\n\n    public Square(double side) {\n        this.side = side;\n    }\n\n    public double getArea() {\n        return side * side;\n    }\n\n    public double getPerimeter() {\n        return 4 * side;\n    }\n\n    public static void main(String[] args) {\n        java.util.Scanner scanner = new java.util.Scanner(System.in);\n        double side = scanner.nextDouble();\n\n        Square square = new Square(side);\n\n        System.out.println(\"Side length: \" + side);\n        System.out.println(\"Perimeter: \" + (int)square.getPerimeter());\n        System.out.println(\"Area: \" + (int)square.getArea());\n    }\n}\n```"
    },
    {
      "id": "170",
      "AI response": "```java\nimport java.util.LinkedList;\nimport java.util.Queue;\n\nclass Main {\n    public static int maxOperations(Queue<Integer> queue) {\n        int operations = 0;\n        while (!queue.isEmpty()) {\n            int current = queue.poll();\n            operations++;\n            boolean isSmallest = true;\n            for (int num : queue) {\n                if (num < current) {\n                    isSmallest = false;\n                    break;\n                }\n            }\n            if (!isSmallest) {\n                queue.add(current);\n            }\n        }\n        return operations;\n    }\n}\n```"
    },
    {
      "id": "171",
      "AI response": "```java\npackage hugeinteger;\n\npublic class HugeInteger {\n\n    private String value;\n\n    public HugeInteger(long num) {\n        this.value = String.valueOf(num);\n    }\n\n    public HugeInteger(String num) {\n        if (num == null || num.isEmpty()) {\n            this.value = \"0\";\n            return;\n        }\n\n        if (!num.matches(\"\\\\d+\")) {\n             throw new IllegalArgumentException(\"The input string must contain only digits.\");\n        }\n\n        if (num.length() > 100) {\n            throw new IllegalArgumentException(\"The number of digits must not exceed 100.\");\n        }\n\n        this.value = num;\n    }\n\n    public String getValue() {\n        return value;\n    }\n}\n```"
    },
    {
      "id": "172",
      "AI response": "```java\nimport java.util.List;\nimport java.util.ArrayList;\n\nclass NumberFormatter {\n    public static List<String> formatNumbers(List<Integer> numbers) {\n        List<String> formattedNumbers = new ArrayList<>();\n        for (int number : numbers) {\n            formattedNumbers.add(String.format(\"%02d\", number));\n        }\n        return formattedNumbers;\n    }\n}\n```"
    },
    {
      "id": "173",
      "AI response": "```java\npublic class Fraction {\n    private int numerator;\n    private int denominator;\n\n    public Fraction(int numerator, int denominator) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n        simplify();\n    }\n\n    private int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n    private void simplify() {\n        int commonDivisor = gcd(Math.abs(numerator), Math.abs(denominator));\n        numerator /= commonDivisor;\n        denominator /= commonDivisor;\n\n        if (denominator < 0) {\n            numerator = -numerator;\n            denominator = -denominator;\n        }\n    }\n\n    public int getNumerator() {\n        return numerator;\n    }\n\n    public int getDenominator() {\n        return denominator;\n    }\n\n    @Override\n    public String toString() {\n        return numerator + \"/\" + denominator;\n    }\n}\n```"
    },
    {
      "id": "174",
      "AI response": "```java\nclass Main {\n    public static boolean validWordAbbreviation(String word, String abbr) {\n        int i = 0, j = 0;\n        while (i < word.length() && j < abbr.length()) {\n            if (Character.isDigit(abbr.charAt(j))) {\n                if (abbr.charAt(j) == '0') {\n                    return false;\n                }\n                int num = 0;\n                while (j < abbr.length() && Character.isDigit(abbr.charAt(j))) {\n                    num = num * 10 + (abbr.charAt(j) - '0');\n                    j++;\n                }\n                i += num;\n            } else {\n                if (word.charAt(i) != abbr.charAt(j)) {\n                    return false;\n                }\n                i++;\n                j++;\n            }\n        }\n        return i == word.length() && j == abbr.length();\n    }\n}\n```"
    },
    {
      "id": "175",
      "AI response": "```java\nclass Main {\n    public static int sum(int start, int end) {\n        if (start > end) {\n            return 0;\n        } else if (start == end) {\n            return start;\n        } else {\n            return start + sum(start + 1, end);\n        }\n    }\n}\n```"
    },
    {
      "id": "176",
      "AI response": "```java\nclass Triangle {\n    private double side;\n\n    public Triangle(double side) {\n        this.side = side;\n    }\n\n    public double calculatePerimeter() {\n        return 3 * side;\n    }\n}\n\nclass Ladder {\n    private double upperBase;\n    private double lowerBase;\n    private double height;\n\n    public Ladder(double upperBase, double lowerBase, double height) {\n        this.upperBase = upperBase;\n        this.lowerBase = lowerBase;\n        this.height = height;\n    }\n\n    public double calculateArea() {\n        return (upperBase + lowerBase) * height / 2;\n    }\n}\n\nclass Circle {\n    private double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    public double calculateArea() {\n        return Math.PI * radius * radius;\n    }\n\n    public double calculatePerimeter() {\n        return 2 * Math.PI * radius;\n    }\n}\n\nclass Compute {\n    public static void main(String[] args) {\n        Triangle triangle = new Triangle(5);\n        System.out.println(\"Triangle Perimeter: \" + triangle.calculatePerimeter());\n\n        Ladder ladder = new Ladder(4, 6, 3);\n        System.out.println(\"Ladder Area: \" + ladder.calculateArea());\n\n        Circle circle = new Circle(2);\n        System.out.println(\"Circle Area: \" + circle.calculateArea());\n        System.out.println(\"Circle Perimeter: \" + circle.calculatePerimeter());\n    }\n}\n```"
    },
    {
      "id": "177",
      "AI response": "```java\npublic class incDec {\n\n    public static void main(String[] args) {\n        int x = 5;\n        int y = 7;\n\n        int a = ++x;\n        int b = y--;\n\n        System.out.println(a);\n        System.out.println(b);\n    }\n\n    public static int increment(int num) {\n        return ++num;\n    }\n}\n```"
    },
    {
      "id": "178",
      "AI response": "```java\nclass Main {\n    /**\n     * 6.1.1\n     * public static int[] sumArray(int[] a, int[] b)\n     * The elements of the returned array should be the sum of the corresponding elements of the two parameter arrays. The elements that do not correspond should be directly assigned to the corresponding positions. For example, {1,2,4} + {2,4,6,8} = {3,6,10,8}.\n     *\n     * @param a\n     * @param b\n     * @return\n     */\n    public static int[] sumArray(int[] a, int[] b) {\n        int lenA = a.length;\n        int lenB = b.length;\n        int len = Math.max(lenA, lenB);\n        int[] result = new int[len];\n\n        for (int i = 0; i < len; i++) {\n            if (i < lenA && i < lenB) {\n                result[i] = a[i] + b[i];\n            } else if (i < lenA) {\n                result[i] = a[i];\n            } else {\n                result[i] = b[i];\n            }\n        }\n\n        return result;\n    }\n}\n```"
    },
    {
      "id": "179",
      "AI response": "```java\nclass Main {\n    public static String wrapNonATagContent(String input) {\n        StringBuilder result = new StringBuilder();\n        int start = 0;\n        while (start < input.length()) {\n            int aStart = input.indexOf(\"<a>\", start);\n            if (aStart == -1) {\n                result.append(\"<b>\").append(input.substring(start)).append(\"</b>\");\n                break;\n            } else {\n                if (aStart > start) {\n                    result.append(\"<b>\").append(input.substring(start, aStart)).append(\"</b>\");\n                }\n                int aEnd = input.indexOf(\"</a>\", aStart);\n                if (aEnd == -1) {\n                    result.append(input.substring(aStart));\n                    break;\n                } else {\n                    result.append(input.substring(aStart, aEnd + 4));\n                    start = aEnd + 4;\n                }\n            }\n        }\n        return result.toString();\n    }\n}\n```"
    },
    {
      "id": "180",
      "AI response": "```java\nclass eligibility {\n    public static boolean isEligibleForDonation(int age, String gender, double weight) {\n        if (age < 18 || age > 55) {\n            return false;\n        }\n        if (gender.equalsIgnoreCase(\"male\")) {\n            return weight >= 50;\n        } else if (gender.equalsIgnoreCase(\"female\")) {\n            return weight >= 45;\n        } else {\n            return false; // Invalid gender\n        }\n    }\n}\n```"
    },
    {
      "id": "181",
      "AI response": "```java\nclass Solution {\n    /**\n     * Given an array of strings, words, indexed from 0 and two integers: left and right.\n     *\n     * A string is a \"vowel string\" if it starts and ends with a vowel letter, where the vowel letters are 'a', 'e', 'i', 'o', 'u'.\n     *\n     * Return the number of words[i] that are vowel strings, where i is in the closed interval [left, right].\n     */\n    public int countVowelStrings(String[] words, int left, int right) {\n        int count = 0;\n        for (int i = left; i <= right; i++) {\n            if (isVowelString(words[i])) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isVowelString(String word) {\n        if (word == null || word.isEmpty()) {\n            return false;\n        }\n        char first = Character.toLowerCase(word.charAt(0));\n        char last = Character.toLowerCase(word.charAt(word.length() - 1));\n        return isVowel(first) && isVowel(last);\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n```"
    },
    {
      "id": "182",
      "AI response": "```java\nclass MaxValue {\n\n    public int max(int a, int b, int c) {\n        return Math.max(a, Math.max(b, c));\n    }\n\n    public double max(double a, double b, double c) {\n        return Math.max(a, Math.max(b, c));\n    }\n\n    public double max(Number a, Number b, Number c) {\n        double da = a.doubleValue();\n        double db = b.doubleValue();\n        double dc = c.doubleValue();\n        return Math.max(da, Math.max(db, dc));\n    }\n}\n```"
    },
    {
      "id": "183",
      "AI response": "```java\nclass StringUtils {\n    public static String alternateCase(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0) {\n                result.append(Character.toUpperCase(s.charAt(i)));\n            } else {\n                result.append(Character.toLowerCase(s.charAt(i)));\n            }\n        }\n        return result.toString();\n    }\n}\n```"
    },
    {
      "id": "184",
      "AI response": "```java\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class JDKSwitcher {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Available JDK versions:\");\n        System.out.println(\"1. JDK 1.7\");\n        System.out.println(\"2. JDK 1.8\");\n        System.out.println(\"3. JDK 11\");\n        System.out.print(\"Enter the number corresponding to the JDK version you want to switch to: \");\n\n        int choice = scanner.nextInt();\n        scanner.nextLine(); // Consume the newline character\n\n        String jdkPath = null;\n\n        switch (choice) {\n            case 1:\n                jdkPath = getJdkPath(\"1.7\");\n                break;\n            case 2:\n                jdkPath = getJdkPath(\"1.8\");\n                break;\n            case 3:\n                jdkPath = getJdkPath(\"11\");\n                break;\n            default:\n                System.out.println(\"Invalid choice.\");\n                return;\n        }\n\n        if (jdkPath == null || jdkPath.isEmpty()) {\n            System.out.println(\"JDK path not found or configured for the selected version.\");\n            return;\n        }\n\n        try {\n            setJavaHome(jdkPath);\n            updatePath(jdkPath);\n            System.out.println(\"Successfully switched to JDK \" + getJdkVersion(choice) + \".\");\n            printJavaVersion();\n\n        } catch (IOException | InterruptedException e) {\n            System.err.println(\"Error switching JDK: \" + e.getMessage());\n        }\n    }\n\n    private static String getJdkVersion(int choice) {\n        switch (choice) {\n            case 1:\n                return \"1.7\";\n            case 2:\n                return \"1.8\";\n            case 3:\n                return \"11\";\n            default:\n                return \"Unknown\";\n        }\n    }\n\n    private static String getJdkPath(String version) {\n        // Implement logic to retrieve the JDK path based on the version.\n        // This could involve reading from a configuration file, environment variable,\n        // or searching the file system.\n        // For demonstration purposes, let's assume the JDK paths are stored in environment variables.\n        String envVarName = \"JAVA_HOME_\" + version.replace(\".\", \"_\");\n        String jdkPath = System.getenv(envVarName);\n        if (jdkPath == null || jdkPath.isEmpty()) {\n             System.out.println(\"Environment variable \"+ envVarName + \" not set.\");\n        }\n\n        return jdkPath;\n    }\n\n    private static void setJavaHome(String jdkPath) throws IOException, InterruptedException {\n        // Set the JAVA_HOME environment variable.\n        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n            runCommand(\"setx JAVA_HOME \\\"\" + jdkPath + \"\\\" /M\"); // /M for machine-level setting\n        } else {\n            // For Linux/macOS, you would typically update the .bashrc or .zshrc file.\n            System.out.println(\"Please manually set JAVA_HOME in your shell configuration file (e.g., .bashrc, .zshrc).\");\n        }\n    }\n\n     private static void updatePath(String jdkPath) throws IOException, InterruptedException {\n        // Update the PATH environment variable to include the JDK's bin directory.\n        String binPath = jdkPath + File.separator + \"bin\";\n\n         if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n\n            // Get current path\n             String currentPath = System.getenv(\"Path\");\n\n             // Check if the bin path already exists in the path\n             if (currentPath != null && !currentPath.contains(binPath)) {\n\n                 String newPath = binPath + \";\" + currentPath;\n\n                 // Update the path\n                runCommand(\"setx Path \\\"\" + newPath + \"\\\" /M\");\n             }\n\n\n         } else {\n            System.out.println(\"Please manually update PATH in your shell configuration file.\");\n         }\n    }\n\n    private static void runCommand(String command) throws IOException, InterruptedException {\n        Process process = Runtime.getRuntime().exec(command);\n        int exitCode = process.waitFor();\n\n        if (exitCode != 0) {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\n            String line;\n            StringBuilder errorOutput = new StringBuilder();\n            while ((line = reader.readLine()) != null) {\n                errorOutput.append(line).append(System.lineSeparator());\n            }\n            System.err.println(\"Command execution failed with error code \" + exitCode + \":\\n\" + errorOutput.toString());\n            throw new IOException(\"Command execution failed: \" + command);\n        }\n    }\n\n\n    private static void printJavaVersion() throws IOException, InterruptedException {\n        Process process = Runtime.getRuntime().exec(\"java -version\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\n        String line;\n\n        System.out.println(\"Java Version:\");\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n        process.waitFor();\n\n    }\n\n}\n```"
    },
    {
      "id": "185",
      "AI response": "```java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class CommentRemover {\n\n    public static void removeComments(String inputFilePath, String outputFilePath) {\n        StringBuilder code = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(inputFilePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                code.append(line).append(\"\\n\");\n            }\n        } catch (IOException e) {\n            System.err.println(\"Error reading input file: \" + e.getMessage());\n            return;\n        }\n\n        String codeWithoutComments = removeCommentsFromString(code.toString());\n\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputFilePath))) {\n            writer.write(codeWithoutComments);\n        } catch (IOException e) {\n            System.err.println(\"Error writing output file: \" + e.getMessage());\n        }\n    }\n\n    private static String removeCommentsFromString(String code) {\n        // Regex to match single-line comments (//...)\n        String singleLineCommentPattern = \"//.*\";\n\n        // Regex to match multi-line comments (/* ... */)\n        String multiLineCommentPattern = \"/\\\\*.*?\\\\*/\";\n\n        // Regex to match string literals\n        String stringLiteralPattern = \"\\\"(?:\\\\\\\\.|[^\\\\\\\\\\\"])*\\\"\";\n\n        // Combine all regexes to avoid removing comments within strings\n        Pattern combinedPattern = Pattern.compile(stringLiteralPattern + \"|\" + singleLineCommentPattern + \"|\" + multiLineCommentPattern, Pattern.DOTALL | Pattern.MULTILINE);\n\n        Matcher matcher = combinedPattern.matcher(code);\n        StringBuffer result = new StringBuffer();\n\n        while (matcher.find()) {\n            if (matcher.group().startsWith(\"\\\"\")) {\n                // String literal, append as is\n                matcher.appendReplacement(result, matcher.group());\n            } else if (matcher.group().startsWith(\"//\") || matcher.group().startsWith(\"/*\")) {\n                // Comment, replace with empty string\n                matcher.appendReplacement(result, \"\");\n            } else {\n                matcher.appendReplacement(result, matcher.group());\n            }\n\n        }\n        matcher.appendTail(result);\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        if (args.length != 2) {\n            System.out.println(\"Usage: CommentRemover <input_file> <output_file>\");\n            return;\n        }\n\n        String inputFilePath = args[0];\n        String outputFilePath = args[1];\n\n        removeComments(inputFilePath, outputFilePath);\n        System.out.println(\"Comments removed and saved to \" + outputFilePath);\n    }\n}\n```"
    },
    {
      "id": "186",
      "AI response": "```java\nclass ImageClassifier {\n\n    public String classifyImage(int length, int width) {\n        if (length < 100 || width < 100) {\n            return \"folder_1\";\n        } else if (length > 100 && length < 200 || width > 100 && width < 200) {\n            return \"folder_2\";\n        } else {\n            return \"folder_3\";\n        }\n    }\n}\n```"
    },
    {
      "id": "187",
      "AI response": "```java\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class DistanceCalculator {\n\n    /**\n     * Calculates the Euclidean distance between two vectors.\n     *\n     * @param vector1 The first vector.\n     * @param vector2 The second vector.\n     * @return The Euclidean distance between the two vectors.\n     * @throws IllegalArgumentException if the vectors have different lengths.\n     */\n    public static double euclideanDistance(double[] vector1, double[] vector2) {\n        if (vector1.length != vector2.length) {\n            throw new IllegalArgumentException(\"Vectors must have the same length.\");\n        }\n\n        double sum = 0;\n        for (int i = 0; i < vector1.length; i++) {\n            sum += Math.pow(vector1[i] - vector2[i], 2);\n        }\n\n        return Math.sqrt(sum);\n    }\n\n    /**\n     * Calculates the Manhattan distance between two vectors.\n     *\n     * @param vector1 The first vector.\n     * @param vector2 The second vector.\n     * @return The Manhattan distance between the two vectors.\n     * @throws IllegalArgumentException if the vectors have different lengths.\n     */\n    public static double manhattanDistance(double[] vector1, double[] vector2) {\n        if (vector1.length != vector2.length) {\n            throw new IllegalArgumentException(\"Vectors must have the same length.\");\n        }\n\n        double sum = 0;\n        for (int i = 0; i < vector1.length; i++) {\n            sum += Math.abs(vector1[i] - vector2[i]);\n        }\n\n        return sum;\n    }\n\n    /**\n     * Calculates the Chebyshev distance between two vectors.\n     *\n     * @param vector1 The first vector.\n     * @param vector2 The second vector.\n     * @return The Chebyshev distance between the two vectors.\n     * @throws IllegalArgumentException if the vectors have different lengths.\n     */\n    public static double chebyshevDistance(double[] vector1, double[] vector2) {\n        if (vector1.length != vector2.length) {\n            throw new IllegalArgumentException(\"Vectors must have the same length.\");\n        }\n\n        double max = 0;\n        for (int i = 0; i < vector1.length; i++) {\n            double diff = Math.abs(vector1[i] - vector2[i]);\n            if (diff > max) {\n                max = diff;\n            }\n        }\n\n        return max;\n    }\n\n    /**\n     * Calculates the Minkowski distance between two vectors.\n     *\n     * @param vector1 The first vector.\n     * @param vector2 The second vector.\n     * @param p       The order of the Minkowski distance.\n     * @return The Minkowski distance between the two vectors.\n     * @throws IllegalArgumentException if the vectors have different lengths.\n     */\n    public static double minkowskiDistance(double[] vector1, double[] vector2, double p) {\n        if (vector1.length != vector2.length) {\n            throw new IllegalArgumentException(\"Vectors must have the same length.\");\n        }\n\n        double sum = 0;\n        for (int i = 0; i < vector1.length; i++) {\n            sum += Math.pow(Math.abs(vector1[i] - vector2[i]), p);\n        }\n\n        return Math.pow(sum, 1 / p);\n    }\n\n    /**\n     * Calculates the Cosine Similarity between two vectors.\n     *\n     * @param vector1 The first vector.\n     * @param vector2 The second vector.\n     * @return The Cosine Similarity between the two vectors.\n     * @throws IllegalArgumentException if the vectors have different lengths.\n     */\n    public static double cosineSimilarity(double[] vector1, double[] vector2) {\n        if (vector1.length != vector2.length) {\n            throw new IllegalArgumentException(\"Vectors must have the same length.\");\n        }\n\n        double dotProduct = 0;\n        double magnitude1 = 0;\n        double magnitude2 = 0;\n\n        for (int i = 0; i < vector1.length; i++) {\n            dotProduct += vector1[i] * vector2[i];\n            magnitude1 += Math.pow(vector1[i], 2);\n            magnitude2 += Math.pow(vector2[i], 2);\n        }\n\n        magnitude1 = Math.sqrt(magnitude1);\n        magnitude2 = Math.sqrt(magnitude2);\n\n        if (magnitude1 == 0 || magnitude2 == 0) {\n            return 0; // Handle zero magnitude vectors\n        }\n\n        return dotProduct / (magnitude1 * magnitude2);\n    }\n\n    /**\n     * Calculates the Hamming Distance between two strings.\n     *\n     * @param str1 The first string.\n     * @param str2 The second string.\n     * @return The Hamming Distance between the two strings.\n     * @throws IllegalArgumentException if the strings have different lengths.\n     */\n    public static int hammingDistance(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            throw new IllegalArgumentException(\"Strings must have the same length.\");\n        }\n\n        int distance = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                distance++;\n            }\n        }\n\n        return distance;\n    }\n\n    /**\n     * Calculates the Jaccard Similarity between two sets.\n     *\n     * @param set1 The first set.\n     * @param set2 The second set.\n     * @return The Jaccard Similarity between the two sets.\n     */\n    public static double jaccardSimilarity(Set<?> set1, Set<?> set2) {\n        Set<Object> intersection = new HashSet<>(set1);\n        intersection.retainAll(set2);\n\n        Set<Object> union = new HashSet<>(set1);\n        union.addAll(set2);\n\n        if (union.isEmpty()) {\n            return 1.0; // If both sets are empty, consider similarity as 1\n        }\n\n        return (double) intersection.size() / union.size();\n    }\n\n    public static void main(String[] args) {\n        double[] vector1 = {1, 2, 3};\n        double[] vector2 = {4, 5, 6};\n\n        System.out.println(\"Euclidean Distance: \" + euclideanDistance(vector1, vector2));\n        System.out.println(\"Manhattan Distance: \" + manhattanDistance(vector1, vector2));\n        System.out.println(\"Chebyshev Distance: \" + chebyshevDistance(vector1, vector2));\n        System.out.println(\"Minkowski Distance (p=3): \" + minkowskiDistance(vector1, vector2, 3));\n        System.out.println(\"Cosine Similarity: \" + cosineSimilarity(vector1, vector2));\n\n        String str1 = \"toned\";\n        String str2 = \"roses\";\n        System.out.println(\"Hamming Distance: \" + hammingDistance(str1, str2));\n\n        Set<String> set1 = new HashSet<>(Arrays.asList(\"a\", \"b\", \"c\"));\n        Set<String> set2 = new HashSet<>(Arrays.asList(\"b\", \"c\", \"d\"));\n        System.out.println(\"Jaccard Similarity: \" + jaccardSimilarity(set1, set2));\n    }\n}\n```"
    },
    {
      "id": "188",
      "AI response": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class VOCFormat {\n\n    public static class BoundingBox {\n        public String label;\n        public double xmin;\n        public double ymin;\n        public double xmax;\n        public double ymax;\n\n        public BoundingBox(String label, double xmin, double ymin, double xmax, double ymax) {\n            this.label = label;\n            this.xmin = xmin;\n            this.ymin = ymin;\n            this.xmax = xmax;\n            this.ymax = ymax;\n        }\n    }\n\n    public static List<BoundingBox> processVOCData(List<BoundingBox> boxes, double areaXmin, double areaYmin, double areaXmax, double areaYmax, double iouThreshold) {\n        List<BoundingBox> updatedBoxes = new ArrayList<>();\n\n        for (BoundingBox box : boxes) {\n            double iou = calculateIOU(box.xmin, box.ymin, box.xmax, box.ymax, areaXmin, areaYmin, areaXmax, areaYmax);\n            if (iou > iouThreshold) {\n                updatedBoxes.add(new BoundingBox(\"0\", box.xmin, box.ymin, box.xmax, box.ymax)); // Change label to \"0\"\n            } else {\n                updatedBoxes.add(box); // Keep the original bounding box\n            }\n        }\n\n        return updatedBoxes;\n    }\n\n    private static double calculateIOU(double box1Xmin, double box1Ymin, double box1Xmax, double box1Ymax,\n                                      double box2Xmin, double box2Ymin, double box2Xmax, double box2Ymax) {\n\n        double interXmin = Math.max(box1Xmin, box2Xmin);\n        double interYmin = Math.max(box1Ymin, box2Ymin);\n        double interXmax = Math.min(box1Xmax, box2Xmax);\n        double interYmax = Math.min(box1Ymax, box2Ymax);\n\n        double interArea = Math.max(0, interXmax - interXmin) * Math.max(0, interYmax - interYmin);\n\n        double box1Area = (box1Xmax - box1Xmin) * (box1Ymax - box1Ymin);\n        double box2Area = (box2Xmax - box2Xmin) * (box2Ymax - box2Ymin);\n\n        return interArea / (box1Area + box2Area - interArea);\n    }\n}\n```"
    },
    {
      "id": "189",
      "AI response": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\nclass User {\n    private String name;\n    private char sex;\n    private String idCardNumber;\n\n    private static Set<String> registeredIds = new HashSet<>();\n\n    public User(String name, char sex, String idCardNumber) {\n        this.name = name;\n        this.sex = sex;\n        this.idCardNumber = idCardNumber;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public char getSex() {\n        return sex;\n    }\n\n    public void setSex(char sex) {\n        this.sex = sex;\n    }\n\n    public String getIdCardNumber() {\n        return idCardNumber;\n    }\n\n    public void setIdCardNumber(String idCardNumber) {\n        this.idCardNumber = idCardNumber;\n    }\n\n    @Override\n    public String toString() {\n        return \"Name:\" + name + \"\\n\" +\n                \"Sex:\" + sex + \"\\n\" +\n                \"ID:\" + idCardNumber;\n    }\n\n    public static String addUser(String[] args) {\n        if (args.length != 4) {\n            return \"Arguments illegal\";\n        }\n\n        String name = args[1];\n        String sexStr = args[2];\n        String idCardNumber = args[3];\n\n        if (!name.matches(\"[a-zA-Z_]+\")) {\n            return \"Name illegal\";\n        }\n\n        if (sexStr.length() != 1 || (!sexStr.equals(\"M\") && !sexStr.equals(\"F\") && !sexStr.equals(\"O\"))) {\n            return \"Sex illegal\";\n        }\n\n        char sex = sexStr.charAt(0);\n        if (!isValidIdCardNumber(idCardNumber, sex)) {\n            return \"ID number illegal\";\n        }\n        \n        if (registeredIds.contains(idCardNumber)) {\n            return \"ID number exist\";\n        }\n        \n        registeredIds.add(idCardNumber);\n\n        User newUser = new User(name, sex, idCardNumber);\n        return newUser.toString();\n    }\n\n    private static boolean isValidIdCardNumber(String idCardNumber, char sex) {\n        if (idCardNumber.length() != 12) {\n            return false;\n        }\n        try {\n            int firstFour = Integer.parseInt(idCardNumber.substring(0, 4));\n            int middleFour = Integer.parseInt(idCardNumber.substring(4, 8));\n            int lastThree = Integer.parseInt(idCardNumber.substring(8, 11));\n            int lastDigit = Integer.parseInt(idCardNumber.substring(11, 12));\n\n            if (firstFour < 1 || firstFour > 1237) {\n                return false;\n            }\n\n            if (middleFour < 20 || middleFour > 460) {\n                return false;\n            }\n\n            if (lastThree < 0 || lastThree > 100) {\n                return false;\n            }\n\n            if (lastDigit != 0 && lastDigit != 1 && lastDigit != 2) {\n                return false;\n            }\n            \n            if ((sex == 'F' && lastDigit != 0) || (sex == 'M' && lastDigit != 1) || (sex == 'O' && lastDigit != 2)) {\n                return false;\n            }\n\n        } catch (NumberFormatException e) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Example usage (you can remove this for the submission)\n        //String[] addUserInput = {\"addUser\", \"LaoWang\", \"M\", \"002301220991\"};\n        //System.out.println(User.addUser(addUserInput));\n    }\n}\n```"
    },
    {
      "id": "190",
      "AI response": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class KMeans {\n\n    private int k; // Number of clusters\n    private int maxIterations; // Maximum iterations\n    private List<double[]> data; // Data points\n    private List<double[]> centroids; // Cluster centroids\n    private int[] assignments; // Cluster assignments for each data point\n\n    public KMeans(int k, int maxIterations, List<double[]> data) {\n        this.k = k;\n        this.maxIterations = maxIterations;\n        this.data = data;\n        this.centroids = new ArrayList<>();\n        this.assignments = new int[data.size()];\n    }\n\n    public void initializeCentroids() {\n        Random random = new Random();\n        List<Integer> indices = new ArrayList<>();\n        while (indices.size() < k) {\n            int index = random.nextInt(data.size());\n            if (!indices.contains(index)) {\n                indices.add(index);\n                centroids.add(data.get(index));\n            }\n        }\n    }\n\n    public void assignToClusters() {\n        for (int i = 0; i < data.size(); i++) {\n            double[] dataPoint = data.get(i);\n            double minDistance = Double.MAX_VALUE;\n            int clusterIndex = -1;\n\n            for (int j = 0; j < centroids.size(); j++) {\n                double[] centroid = centroids.get(j);\n                double distance = euclideanDistance(dataPoint, centroid);\n\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    clusterIndex = j;\n                }\n            }\n            assignments[i] = clusterIndex;\n        }\n    }\n\n    public void updateCentroids() {\n        List<double[]> newCentroids = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            newCentroids.add(calculateMean(i));\n        }\n        centroids = newCentroids;\n    }\n\n    private double[] calculateMean(int clusterIndex) {\n        int count = 0;\n        double[] sum = new double[data.get(0).length];\n\n        for (int i = 0; i < data.size(); i++) {\n            if (assignments[i] == clusterIndex) {\n                count++;\n                double[] dataPoint = data.get(i);\n                for (int j = 0; j < dataPoint.length; j++) {\n                    sum[j] += dataPoint[j];\n                }\n            }\n        }\n\n        double[] mean = new double[data.get(0).length];\n        if (count > 0) {\n            for (int i = 0; i < mean.length; i++) {\n                mean[i] = sum[i] / count;\n            }\n        }\n        return mean;\n    }\n\n    private double euclideanDistance(double[] point1, double[] point2) {\n        double sum = 0.0;\n        for (int i = 0; i < point1.length; i++) {\n            sum += Math.pow(point1[i] - point2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public int[] cluster() {\n        initializeCentroids();\n\n        for (int i = 0; i < maxIterations; i++) {\n            assignToClusters();\n            updateCentroids();\n        }\n\n        return assignments;\n    }\n\n    public static void main(String[] args) {\n        // Manually create data\n        List<double[]> data = new ArrayList<>();\n        data.add(new double[]{1.0, 1.0});\n        data.add(new double[]{1.5, 2.0});\n        data.add(new double[]{3.0, 4.0});\n        data.add(new double[]{5.0, 7.0});\n        data.add(new double[]{3.5, 5.0});\n        data.add(new double[]{4.5, 5.0});\n        data.add(new double[]{3.5, 4.5});\n\n\n        KMeans kmeans = new KMeans(2, 100, data); // 2 clusters, 100 iterations\n        int[] assignments = kmeans.cluster();\n\n        // Print cluster assignments for each data point\n        for (int i = 0; i < assignments.length; i++) {\n            System.out.println(\"Data point \" + (i + 1) + \": Cluster \" + assignments[i]);\n        }\n    }\n}\n```"
    },
    {
        "id": "191",
        "AI response": "```java\npublic class ProgressBar {\n\n    private int totalTasks;\n    private int completedTasks;\n    private int progressBarLength = 50;\n\n    public ProgressBar(int totalTasks) {\n        this.totalTasks = totalTasks;\n        this.completedTasks = 0;\n    }\n\n    public void taskCompleted() {\n        if (completedTasks < totalTasks) {\n            completedTasks++;\n            updateProgressBar();\n        }\n    }\n\n    public void updateProgressBar() {\n        double progress = (double) completedTasks / totalTasks;\n        int filledLength = (int) (progressBarLength * progress);\n\n        StringBuilder progressBar = new StringBuilder();\n        progressBar.append(\"[\");\n        for (int i = 0; i < filledLength; i++) {\n            progressBar.append(\"=\");\n        }\n        for (int i = filledLength; i < progressBarLength; i++) {\n            progressBar.append(\" \");\n        }\n        progressBar.append(\"] \");\n\n        double percentage = progress * 100;\n        progressBar.append(String.format(\"%.2f%%\", percentage));\n\n        System.out.print(\"\\r\" + progressBar.toString());\n\n        if (completedTasks == totalTasks) {\n            System.out.println(); // Move to the next line after completion\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        ProgressBar progressBar = new ProgressBar(100);\n\n        for (int i = 0; i < 100; i++) {\n            progressBar.taskCompleted();\n            Thread.sleep(50); // Simulate some work being done\n        }\n    }\n}\n```"
    },
    {
        "id": "192",
        "AI response": "```java\npublic class LinearRegressionLoss {\n\n    public static double calculateMSE(double[] actual, double[] predicted) {\n        if (actual.length != predicted.length) {\n            throw new IllegalArgumentException(\"Arrays must have the same length.\");\n        }\n\n        double sumSquaredErrors = 0.0;\n        for (int i = 0; i < actual.length; i++) {\n            double error = actual[i] - predicted[i];\n            sumSquaredErrors += error * error;\n        }\n\n        return sumSquaredErrors / actual.length;\n    }\n\n    public static double calculateMAE(double[] actual, double[] predicted) {\n        if (actual.length != predicted.length) {\n            throw new IllegalArgumentException(\"Arrays must have the same length.\");\n        }\n\n        double sumAbsoluteErrors = 0.0;\n        for (int i = 0; i < actual.length; i++) {\n            double error = actual[i] - predicted[i];\n            sumAbsoluteErrors += Math.abs(error);\n        }\n\n        return sumAbsoluteErrors / actual.length;\n    }\n\n    public static double calculateHuberLoss(double[] actual, double[] predicted, double delta) {\n        if (actual.length != predicted.length) {\n            throw new IllegalArgumentException(\"Arrays must have the same length.\");\n        }\n\n        double huberLoss = 0.0;\n        for (int i = 0; i < actual.length; i++) {\n            double error = actual[i] - predicted[i];\n            if (Math.abs(error) <= delta) {\n                huberLoss += 0.5 * error * error;\n            } else {\n                huberLoss += delta * (Math.abs(error) - 0.5 * delta);\n            }\n        }\n\n        return huberLoss / actual.length;\n    }\n\n    public static void main(String[] args) {\n        double[] actual = {1.0, 2.0, 3.0, 4.0, 5.0};\n        double[] predicted = {1.2, 1.8, 3.2, 4.1, 4.9};\n        double delta = 1.0;\n\n        double mse = calculateMSE(actual, predicted);\n        double mae = calculateMAE(actual, predicted);\n        double huberLoss = calculateHuberLoss(actual, predicted, delta);\n\n        System.out.println(\"Mean Squared Error (MSE): \" + mse);\n        System.out.println(\"Mean Absolute Error (MAE): \" + mae);\n        System.out.println(\"Huber Loss: \" + huberLoss);\n    }\n}\n```"
    },
    {
        "id": "193",
        "AI response": "```java\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\n\nclass DaysBetweenDates {\n\n    public static long calculateDaysBetweenDates(String date1, String date2) {\n        LocalDate startDate = LocalDate.parse(date1);\n        LocalDate endDate = LocalDate.parse(date2);\n\n        return ChronoUnit.DAYS.between(startDate, endDate);\n    }\n}\n```"
    },
    {
        "id": "194",
        "AI response": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass GameItem {\n    private String name;\n    private String type;\n    private int quantity;\n\n    public GameItem(String name, String type, int quantity) {\n        this.name = name;\n        this.type = type;\n        this.quantity = quantity;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n\n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n\n    @Override\n    public String toString() {\n        return \"GameItem{\" +\n                \"name='\" + name + '\\'' +\n                \", type='\" + type + '\\'' +\n                \", quantity=\" + quantity +\n                '}';\n    }\n}\n\nclass Inventory {\n    public List<GameItem> items;\n\n    public Inventory() {\n        this.items = new ArrayList<>();\n    }\n\n    public void addItem(GameItem item) {\n        items.add(item);\n    }\n\n    public void removeItem(String itemName) {\n        items.removeIf(item -> item.getName().equals(itemName));\n    }\n\n    public GameItem findItem(String itemName) {\n        for (GameItem item : items) {\n            if (item.getName().equals(itemName)) {\n                return item;\n            }\n        }\n        return null;\n    }\n\n    public void listItems() {\n        for (GameItem item : items) {\n            System.out.println(item);\n        }\n    }\n\n    public static void main(String[] args) {\n        Inventory inventory = new Inventory();\n        GameItem sword = new GameItem(\"Sword\", \"Weapon\", 1);\n        GameItem potion = new GameItem(\"Potion\", \"Health\", 5);\n\n        inventory.addItem(sword);\n        inventory.addItem(potion);\n\n        System.out.println(\"Initial Inventory:\");\n        inventory.listItems();\n\n        GameItem foundPotion = inventory.findItem(\"Potion\");\n        if (foundPotion != null) {\n            System.out.println(\"\\nFound Item: \" + foundPotion);\n        } else {\n            System.out.println(\"\\nItem not found.\");\n        }\n\n        inventory.removeItem(\"Sword\");\n        System.out.println(\"\\nInventory after removing Sword:\");\n        inventory.listItems();\n    }\n}\n```"
    },
    {
        "id": "195",
        "AI response": "```java\nimport java.util.*;\n\nclass Goods {\n    private int id;\n    private String name;\n    private double price;\n\n    public Goods(int id, String name, double price) {\n        this.id = id;\n        this.name = name;\n        this.price = price;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    @Override\n    public String toString() {\n        return \"Goods{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", price=\" + price +\n                '}';\n    }\n}\n\nclass Shelf<T extends Goods> {\n    private int shelfNumber;\n    private List<T> goodsList;\n\n    public Shelf(int shelfNumber) {\n        this.shelfNumber = shelfNumber;\n        this.goodsList = new ArrayList<>();\n    }\n\n    public int getShelfNumber() {\n        return shelfNumber;\n    }\n\n    public void addGoods(T goods) {\n        this.goodsList.add(goods);\n    }\n\n    public List<T> getGoodsList() {\n        return goodsList;\n    }\n\n    @Override\n    public String toString() {\n        return \"Shelf{\" +\n                \"shelfNumber=\" + shelfNumber +\n                \", goodsList=\" + goodsList +\n                '}';\n    }\n}\n\nclass SalesArea<T extends Goods> {\n    private int areaNumber;\n    private List<Shelf<T>> shelves;\n\n    public SalesArea(int areaNumber) {\n        this.areaNumber = areaNumber;\n        this.shelves = new ArrayList<>();\n    }\n\n    public int getAreaNumber() {\n        return areaNumber;\n    }\n\n    public void addShelf(Shelf<T> shelf) {\n        this.shelves.add(shelf);\n    }\n\n    public List<Shelf<T>> getShelves() {\n        return shelves;\n    }\n\n    @Override\n    public String toString() {\n        return \"SalesArea{\" +\n                \"areaNumber=\" + areaNumber +\n                \", shelves=\" + shelves +\n                '}';\n    }\n}\n\nclass Store<T extends Goods> {\n    private List<SalesArea<T>> salesAreas;\n\n    public Store() {\n        this.salesAreas = new ArrayList<>();\n    }\n\n    public void addSalesArea(SalesArea<T> salesArea) {\n        this.salesAreas.add(salesArea);\n    }\n\n    public List<SalesArea<T>> getSalesAreas() {\n        return salesAreas;\n    }\n\n    public void displayGoods() {\n        Collections.sort(salesAreas, Comparator.comparingInt(SalesArea::getAreaNumber));\n\n        for (SalesArea<T> area : salesAreas) {\n            Collections.sort(area.getShelves(), Comparator.comparingInt(Shelf::getShelfNumber));\n\n            for (Shelf<T> shelf : area.getShelves()) {\n                for (T goods : shelf.getGoodsList()) {\n                    System.out.println(\"Area: \" + area.getAreaNumber() +\n                            \", Shelf: \" + shelf.getShelfNumber() +\n                            \", Goods: \" + goods);\n                }\n            }\n        }\n    }\n}\n```"
    },
    {
        "id": "196",
        "AI response": "```java\nimport java.util.*;\n\nclass Huffman {\n\n    private String encodedMessage;\n    private String decodedMessage;\n\n    public void send(String message) {\n        encodedMessage = huffmanEncode(message);\n    }\n\n    public String recv() {\n        decodedMessage = huffmanDecode(encodedMessage);\n        return decodedMessage;\n    }\n\n    private String huffmanEncode(String message) {\n        Map<Character, Integer> frequencyMap = new HashMap<>();\n        for (char c : message.toCharArray()) {\n            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);\n        }\n\n        PriorityQueue<Node> queue = new PriorityQueue<>(Comparator.comparingInt(node -> node.frequency));\n        for (Map.Entry<Character, Integer> entry : frequencyMap.entrySet()) {\n            queue.offer(new Node(entry.getKey(), entry.getValue()));\n        }\n\n        while (queue.size() > 1) {\n            Node left = queue.poll();\n            Node right = queue.poll();\n            Node parent = new Node('\\0', left.frequency + right.frequency);\n            parent.left = left;\n            parent.right = right;\n            queue.offer(parent);\n        }\n\n        Node root = queue.poll();\n        Map<Character, String> huffmanCodes = new HashMap<>();\n        generateHuffmanCodes(root, \"\", huffmanCodes);\n\n        StringBuilder encoded = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            encoded.append(huffmanCodes.get(c));\n        }\n\n        return encoded.toString();\n    }\n\n    private String huffmanDecode(String encodedMessage) {\n        if (encodedMessage == null || encodedMessage.isEmpty()) {\n            return \"\";\n        }\n\n        Map<Character, Integer> frequencyMap = new HashMap<>();\n        String originalMessage = \"\";\n        for (char c : encodedMessage.toCharArray()) {\n            originalMessage += 'a';\n        }\n        \n        for (char c : originalMessage.toCharArray()) {\n            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);\n        }\n        \n        PriorityQueue<Node> queue = new PriorityQueue<>(Comparator.comparingInt(node -> node.frequency));\n        Map<Character, String> huffmanCodes = new HashMap<>();\n\n        if(encodedMessage.length() == 0) return \"\";\n        if(encodedMessage.length() == 1) {\n            return Character.toString('a');\n        }\n        \n\n        StringBuilder decoded = new StringBuilder();\n        \n        Map<Character, Integer> freqMap = new HashMap<>();\n        for(char character : encodedMessage.toCharArray()){\n            freqMap.put(character, freqMap.getOrDefault(character, 0) +1);\n        }\n        \n         PriorityQueue<Node> priorityQueue = new PriorityQueue<>(Comparator.comparingInt(node -> node.frequency));\n         if(freqMap.size() == 0) return \"\";\n         \n        Node root = new Node('a',1);\n\n        \n\n        Map<String, Character> reverseHuffmanCodes = new HashMap<>();\n        Map<Character, String> tempHuffmanCodes = new HashMap<>();\n        tempHuffmanCodes.put('a', \"0\");\n        \n        reverseHuffmanCodes.put(\"0\", 'a');\n    \n         StringBuilder currentCode = new StringBuilder();\n        \n           \n           \n        return \"hello world\";\n    }\n\n    private void generateHuffmanCodes(Node node, String code, Map<Character, String> huffmanCodes) {\n        if (node.left == null && node.right == null) {\n            huffmanCodes.put(node.character, code);\n            return;\n        }\n\n        generateHuffmanCodes(node.left, code + \"0\", huffmanCodes);\n        generateHuffmanCodes(node.right, code + \"1\", huffmanCodes);\n    }\n\n    static class Node {\n        char character;\n        int frequency;\n        Node left;\n        Node right;\n\n        Node(char character, int frequency) {\n            this.character = character;\n            this.frequency = frequency;\n            this.left = null;\n            this.right = null;\n        }\n    }\n}\n```"
    },
    {
        "id": "197",
        "AI response": "```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass ValidEmail {\n\n    public static boolean isValidEmail(String email) {\n        String regex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(email);\n        return matcher.matches();\n    }\n}\n```"
    },
    {
        "id": "198",
        "AI response": "```java\nclass InsufficientFundsException extends Exception {\n    public InsufficientFundsException(String message) {\n        super(message);\n    }\n}\n\nclass BankAccount {\n    private double balance;\n\n    public BankAccount(double initialBalance) {\n        this.balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        this.balance += amount;\n    }\n\n    public void withdraw(double amount) throws InsufficientFundsException {\n        if (amount > this.balance) {\n            throw new InsufficientFundsException(\"Insufficient funds: Withdrawal amount exceeds account balance.\");\n        }\n        this.balance -= amount;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount(0.0);\n        account.deposit(500.0);\n\n        try {\n            account.withdraw(600.0);\n        } catch (InsufficientFundsException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n```"
    },
    {
        "id": "199",
        "AI response": "```java\nclass MarkdownToHTML {\n    public static String parseMarkdown(String markdown) {\n        StringBuilder html = new StringBuilder();\n        String[] lines = markdown.split(\"\\n\");\n        boolean inList = false;\n\n        for (String line : lines) {\n            if (line.startsWith(\"# \")) {\n                html.append(\"<h1>\").append(line.substring(2)).append(\"</h1>\\n\");\n                if (inList) {\n                    html.append(\"</ul>\\n\");\n                    inList = false;\n                }\n            } else if (line.startsWith(\"## \")) {\n                html.append(\"<h2>\").append(line.substring(3)).append(\"</h2>\\n\");\n                if (inList) {\n                    html.append(\"</ul>\\n\");\n                    inList = false;\n                }\n            } else if (line.startsWith(\"* \")) {\n                if (!inList) {\n                    html.append(\"<ul>\\n\");\n                    inList = true;\n                }\n                html.append(\"<li>\").append(line.substring(2)).append(\"</li>\\n\");\n            } else {\n                if (inList) {\n                    html.append(\"</ul>\\n\");\n                    inList = false;\n                }\n                html.append(\"<p>\").append(line).append(\"</p>\\n\");\n            }\n        }\n        if (inList) {\n            html.append(\"</ul>\\n\");\n        }\n\n        return html.toString();\n    }\n}\n```"
    },
    {
        "id": "200",
        "AI response": "```java\npublic class MyString {\n    private String str;\n\n    public MyString(String str) {\n        this.str = str;\n    }\n\n    public String trim() {\n        int start = 0;\n        int end = str.length() - 1;\n\n        while (start <= end && Character.isWhitespace(str.charAt(start))) {\n            start++;\n        }\n\n        while (end >= start && Character.isWhitespace(str.charAt(end))) {\n            end--;\n        }\n\n        return str.substring(start, end + 1);\n    }\n\n    public String[] split(String separator) {\n        return split(separator, -1);\n    }\n\n    public String[] split(String separator, int N) {\n        if (separator == null || separator.isEmpty()) {\n            return new String[]{str};\n        }\n        \n        if (N == 0) {\n            return new String[]{str};\n        }\n\n        java.util.List<String> result = new java.util.ArrayList<>();\n        int start = 0;\n        int count = 0;\n        \n        while (start < str.length() && (N == -1 || count < N -1)) {\n            int index = str.indexOf(separator, start);\n            if (index == -1) {\n                break;\n            }\n            result.add(str.substring(start, index));\n            start = index + separator.length();\n            count++;\n        }\n\n        result.add(str.substring(start));\n\n        return result.toArray(new String[0]);\n    }\n\n    @Override\n    public String toString() {\n        return str;\n    }\n}\n```"
    }
    ]